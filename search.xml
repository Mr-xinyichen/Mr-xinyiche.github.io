<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MySQL索引执⾏计划与SQL优化</title>
      <link href="2022/07/13/MySQL%E7%B4%A2%E5%BC%95%E6%89%A7%E2%BE%8F%E8%AE%A1%E5%88%92%E4%B8%8ESQL%E4%BC%98%E5%8C%96/"/>
      <url>2022/07/13/MySQL%E7%B4%A2%E5%BC%95%E6%89%A7%E2%BE%8F%E8%AE%A1%E5%88%92%E4%B8%8ESQL%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="MySQL索引执⾏计划与SQL优化"><a href="#MySQL索引执⾏计划与SQL优化" class="headerlink" title="MySQL索引执⾏计划与SQL优化"></a>MySQL索引执⾏计划与SQL优化</h1><h2 id="1-MySQL多表join的实现⽅式"><a href="#1-MySQL多表join的实现⽅式" class="headerlink" title="1. MySQL多表join的实现⽅式"></a><strong>1</strong>. MySQL多表join的实现⽅式</h2><h3 id="1-1基本概念："><a href="#1-1基本概念：" class="headerlink" title="1.1基本概念："></a>1.1基本概念：</h3><ul><li><p><strong>驱动表与被驱动表</strong>：在多表join查询时，先从⼀个表中查询出来⼀批数据，再根据这批数据去另外⼀个表中进⾏关联查询或者筛选，那第⼀个表就是驱动表，第⼆个表就是被驱动表；</p></li><li><p><strong>join类型</strong>：</p><ul><li><p><strong>inner join（内连接</strong>）：两个表中的数据必须完全关联，也就是A表中的数据在B表中必须也存在，才能查询出来；</p></li><li><p>内连接的驱动表和被驱动表的位置是可以相互转换的；（也就是可以由MySQL来进⾏优化改写的；⽽左/右连接的是固定的）</p></li><li><p><strong>left join（左连接</strong>）：返回所有左表中的数据，当右表中不存在左表关联的数据时，以NULL来进⾏填充；</p></li><li><p><strong>right join（右连接）</strong>：返回所有右表中的数据，当左表中不存在右表关联的数据时，以NULL来进⾏填充；</p></li><li><p>上⾯的⼏种连接⽅式，驱动表和被驱动表是由MYSQL执⾏的时候去选择的；</p></li><li><p><strong>straight_join</strong>：straight_join的表现完全与innerjoin⼀致，但是它限制了表的顺序，也就是说载⼊表的顺序遵循从左往右；</p><ul><li>也就是说straight_join可以指定驱动表与被驱动表的顺序；</li><li>如果遇到两个表的join，各⾃数据量⽐较⼤，但是关联的字段本来是有索引却没有⾛索引，然后查询⾮常慢的情况可以看看是不是MySQL⾃⼰给你调整了表的驱动顺序，然后没有使⽤到索引，并且还有⼀些额外的排序等操作；这个时候可以使⽤ straight_join 来优化试试；</li></ul></li><li><p><strong>循环嵌套查询（Nested-LoopJoin）</strong>：在MySQL中，多表join查询是通过循环嵌套查询来实现的；示例：</p><pre><code>select * from t1 straight_join t2 on t1.a = t2.b; </code></pre></li><li><p>假设 t1表有100条数据，2表有1000条数据</p></li><li><p>这个语句没有where条件，那它就会先从t1表中取出所有的数据（100⾏），然后对这100⾏数据进⾏循环遍历，每次取⼀条数据，⽤它的字段a的值到t2表中扫描所有⾏（1000⾏），找到t2表中满⾜条件t1.a=t2.b的⾏；再跟t1表中的记录合并放到结果集；</p><ul><li><p>如果还有t3表，则再对t2表中取出来的所有记录进⾏循环，再使⽤每⼀条数据去t3中查询满⾜条件的记录；</p></li><li><p>伪代码</p><pre class="line-numbers language-java"><code class="language-java">t1Rows <span class="token operator">=</span> <span class="token function">queryFromT1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> t1Row in t1Rows <span class="token punctuation">{</span>    t2Rows <span class="token operator">=</span> <span class="token function">queryFromT2</span><span class="token punctuation">(</span>t1Row<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> t2Row in t2Rows <span class="token punctuation">{</span>        t3Rows <span class="token operator">=</span> <span class="token function">queryFromT3</span><span class="token punctuation">(</span>t2Row<span class="token punctuation">.</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将 t1Row、t2Row、t3Row 组合成为结果集</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>那知道了MySQL是循环嵌套查询的，我们再回过头来看看，驱动表与被驱动表应该怎么选择更好呢？</p><ul><li>因为得拿驱动表中查出来的结果，全部遍历之后去被驱动表中查询；</li><li>驱动表中的数量越少越好，也就是说使⽤⼩表作为驱动表</li></ul></li></ul></li></ul></li></ul><h3 id="1-2-Join-查询类型"><a href="#1-2-Join-查询类型" class="headerlink" title="1.2 Join 查询类型"></a><strong>1</strong>.<strong>2</strong> Join 查询类型</h3><p>下⾯来看看MySQL中的不同情况下join查询是怎么实现的，后⾯的join查询都使⽤这个作为示例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from t1 straight_join t2 on t1.a = t2.b;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>假设t1表有100条数据，t2表有1000条数据；</li><li>并且⾥⾯的数据是⼀⼀对应的，即t1表和t2表关联的数据⼀定存在，且只存在⼀条；</li></ul><h4 id="1-2-1-Index-Nested-Loop-Join（NLJ）索引嵌套循环连接"><a href="#1-2-1-Index-Nested-Loop-Join（NLJ）索引嵌套循环连接" class="headerlink" title="1.2.1 Index Nested-Loop Join（NLJ）索引嵌套循环连接"></a><strong>1</strong>.<strong>2</strong>.<strong>1</strong> Index Nested-Loop Join（NLJ）索引嵌套循环连接</h4><p>如果t2表中的字段b有索引，此时这个语句的执⾏过程为：</p><ul><li>对t1表做全表扫描，这个过程扫描出来了100⾏数据；</li><li>遍历这100⾏数据，对于每⾏数据，都根据字段a到t2表中去查找满⾜t2.b=a的记录⾏；</li><li>因为t2表中的字段b是有索引的，所以这个查找就是⾛索引查找，速度很快；</li><li>但是执⾏的是select*，所以根据字段b索引查找之后，还要到t2的主键索引中回表得到全部的数据信息；</li><li>最终从t2表中查找到对应的记录⾏，加⼊结果集；</li></ul><p>也就是说，<strong>当驱动表的关联字段有索引时，会⾛索引查找，速度很快</strong>；</p><p>并且因为数据是⼀⼀对应的，且⾛了索引查找，也只会扫描⼀⾏记录，则这个查询⼀共扫描了：100+100=200⾏记录；</p><h4 id="1-2-2-Simple-Nested-Loop-Join-单嵌套循环连接"><a href="#1-2-2-Simple-Nested-Loop-Join-单嵌套循环连接" class="headerlink" title="1.2.2 Simple Nested-Loop Join 单嵌套循环连接"></a><strong>1</strong>.<strong>2</strong>.<strong>2</strong> Simple Nested-Loop Join 单嵌套循环连接</h4><ul><li>如果t2表中的字段b没有索引，当从t1表中扫描出100⾏数据，并遍历每⾏数据，到t2表中去查找满⾜t2.b=a的记录⾏时，就得做全表扫描了，也就是说会扫描1000⾏数据；</li><li>这种情况下，这个查询⼀共会扫描：100*1000=100000⾏记录；</li><li>这样扫描太笨重了，速度也太慢了，所以MySQL肯定不会采取性能这么差的查询⽅式，⽽是会采⽤BlockNested-LoopJoin的⽅式；</li></ul><h4 id="1-2-3-Block-Nested-Loop-Join（BNL）缓存块嵌套循环连接"><a href="#1-2-3-Block-Nested-Loop-Join（BNL）缓存块嵌套循环连接" class="headerlink" title="1.2.3 Block Nested-Loop Join（BNL）缓存块嵌套循环连接"></a><strong>1</strong>.<strong>2</strong>.<strong>3</strong> Block Nested-Loop Join（BNL）缓存块嵌套循环连接</h4><p>MySQL的线程中开辟了⼀块叫做join_buffer的内存区域；</p><p>在t2表中的字段b没有索引的情况下，MySQL采⽤的BlockNested-Loop Join优化算法的执⾏流程为：</p><ul><li>把t1表中的所有数据读⼊线程内存join_buffer中，由于我们这个语句中写的是select*，因此是把整个t1表所有字段放⼊了内存；</li><li>扫描表t2，将表t2中的每⼀⾏取出来，到join_buffer中去做⽐较，如果满⾜t1.a=t2.b时，就放⼊结果集：</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730144310938.png" alt="BNL"></p><p>PS:</p><ul><li><p>在这个过程中，对于t1表和t2表都做了⼀次全表扫描，因此总的扫描⾏数为100+1000=1100；</p></li><li><p>但是join_buffer中的数据是⽆序的，所以对于t2表中取出的每⼀条数据，都要进⾏100次判断，因此在内存中做的判断次数为100*1000=100000；</p></li><li><p>在前⾯使⽤SimpleNested-LoopJoin算法进⾏查询，扫描⾏数也是10万⾏；因此，从时间复杂度上来说，这两个算法是⼀样的；</p></li><li><p>但是，BlockNested-LoopJoin算法的这10万次判断是内存操作，⽽SimpleNested-LoopJoin算法是在磁盘上的扫描操作；所以速度上会快很多，性能也更好；</p></li></ul><p>这⾥还有⼀个问题，j<strong>oin_buffer的⼤⼩是有限的（由参数join_buffer_size设定，默认值是256k</strong>）；</p><p>如果j<strong>oin_buffer中放不下t1表中的全部数据</strong>怎么办呢？</p><p><strong>解决⽅式为分段放：假设t1表中有10000⾏数据，join_buffer中只能放1000条</strong>：</p><ul><li>每次从t1表中读取1000条放⼊join_buffer，然后扫描t2表中所有数据到join_buffer中去作对比；</li><li>然后清空join_buffer，再次从t1中读取1000条放进⼊，然后再扫描t2表中的数据去对⽐；</li><li>这样⼀次⼀次的分段将t1表中的数据加载到join_buffer，直到得到最后的结果集；</li></ul><p>这个流程，叫做分段，也叫做分块，也就是分块放⼊join_buffer，也就是算法名称中 “Block”的由来； </p><p><strong>Block Nested-Loop Join（BNL）的弊端：</strong></p><ul><li>这⾥当join_buffer_size较⼩，或者t1表中数据量较⼤时，需要分块地多次放到join_buffer中，然后每次都要扫描t2表中的数据来做对⽐；</li><li>在最开始我们将BufferPool的时候讲到了，优化后的LRU链表变为了冷热数据分离的LRU链表，先加载进来的数据⻚放在冷数据区，这个数据⻚在1s之后再次被访问过，才放到热数据区；</li><li>所以针对于这⾥的t2表，不就是会多次扫描它，如果整个过程执⾏的时间超过了1s，不就会把t2表所在的数据⻚，给移到LRU链表的热数据区去了；</li><li>如果这个t2表是⼀个很⼤的表，那可能就会将LRU链表中热数据区⾥⾯原本的热数据，给全部淘汰掉；</li><li>并且join语句还在⼀直循环读取磁盘和加载数据⻚，也就是会⼀直往冷数据区加载进来数据⻚，满了之后也会淘汰冷数据区；<ul><li>则此时还会影响业务正常访问的数据⻚，没有机会进⼊到热数据区了；</li><li>因为它⼀加载进去冷数据区，还没等1s后再次被访问呢，就被join语句加载到冷数据区的给淘汰了；</li></ul></li><li>所以，⼤表join不⽌会影响IO性能，还会影响BufferPool中的缓存命中率的性能；○为了减少这种影响，可以考虑增⼤join_buffer_size，减少对被驱动表的扫描次数；</li></ul><p>当然，为了真正减少这些影响，我们<strong>最好不要出现BNL</strong>，⽽是<strong>对被驱动表的关联字段加上索引</strong>；</p><h4 id="1-2-4-Multi-Range-Read（MRR索引多范围查找）（优化⼿段）"><a href="#1-2-4-Multi-Range-Read（MRR索引多范围查找）（优化⼿段）" class="headerlink" title="1.2.4 Multi-Range Read（MRR索引多范围查找）（优化⼿段）"></a><strong>1</strong>.<strong>2</strong>.<strong>4</strong> Multi-Range Read（MRR索引多范围查找）（优化⼿段）</h4><p>这个Multi-RangeRead主要是⼀种优化的⼿段，它的⽬的是尽量将读磁盘的随机IO转化为顺序IO；</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#字段a有索引select * from t1 where a>=1 and a<=100; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们前⾯说过回表的概念，这⾥是select *，并且使⽤的是字段a的索引，所以在a索引中查询出满⾜a&gt;=1 and a&lt;=100的记录之后，需要回表到主键索引中查询出所有的数据信息；</p><p>那这⾥的回表，是怎么回的呢？是将这些记录⾏⼀⾏⼀⾏的回表？还是量地回表查询呢？</p><ul><li>主键索引⻚是⼀棵B+树，在这颗树上，每次也只能根据⼀个主键id进⾏查找数据；所以回表肯定是⼀⾏⼀⾏的回的；</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730145043739.png" alt="回表"></p><p>但是⼀般来说，字段c和主键id是没有什么顺序关系的，当你使⽤索引c查询出来的⼀批有序的数据，它们对应的主键id基本都是⽆序的；</p><p>此时去做回表的话，那不就是⽤⼀批⽆序的主键id去主键索引中进⾏查找，也就出现了随机访问，随机IO，性能就会很低了；</p><p><strong>优化思路</strong>：</p><p>因为主键索引中的数据都是按照主键id递增的顺序存储的，当我们按照主键id递增的顺序进⾏查询时，就接近为顺序IO了，也就能极⼤程度的提升性能了；基于这个优化思路，MMR优化后的语句执⾏流程为：</p><ul><li>根据索引a查询出来满⾜a&gt;=1 and a&lt;=100条件的记录，并将这些记录的id值放⼊到read_rnd_buffer（也是⼀个内存缓冲区）中；</li><li>在内存中对read_rnd_buffer中的所有id进⾏⼀个递增的排序；</li><li>然后将排序之后的id数组，再到主键索引中进⾏回表查找，得到所有数据信息后放⼊结果集；这个时候，去主键索引中回表的所有ID，都是递增的，也就能实现顺序读取，转变为了顺序IO，提升了性能。</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730145304827.png" alt="MMR"></p><p>跟join_buffer⼀样，read_rnd_buffer⼤⼩受参数read_rnd_buffer_size控制，当read_rnd_buffer放满时，也是分段去多次这样执⾏即可；</p><p>另外，现在MySQL的优化器中在判断执⾏成本时，倾向于不使⽤MRR，因此MRR不是都会⽤到的；如果你想要稳定地使⽤MMR，需要设置<strong>setoptimizer_switch=”mrr_cost_based=off”</strong>，把mrr_cost_based设置为off，就是<strong>固定使⽤MRR</strong>了；</p><h4 id="1-2-5-Batched-Key-Access（BKA）批量索引键值访问"><a href="#1-2-5-Batched-Key-Access（BKA）批量索引键值访问" class="headerlink" title="1.2.5 Batched Key Access（BKA）批量索引键值访问"></a><strong>1</strong>.<strong>2</strong>.<strong>5</strong> Batched Key Access（BKA）批量索引键值访问</h4><p>这个Batched Key Access，是对Index Nested-Loop Join（NLJ）的优化；</p><p>在前⾯讲的IndexNested-LoopJoin（NLJ）中，</p><ul><li>从t1表中每次取⼀⾏记录，通过字段a到t2表中去查找满⾜t2.b=a的记录⾏；</li><li>然后再将满⾜的记录⾏到t2表主键索引中去做回表；</li><li>每次t1遍历⼀条数据，到t2中匹配到⼀个值，然后就要做⼀次回表；</li><li>这样⼀⾏⼀⾏地去做回表，MMR的优化就⽤不上了；所以要思考能否实现⼀次性多传⼀些值到t2表中进⾏扫描匹配呢？这样的话，批量的数据应该就能使⽤上MMR了；实现⽅案：<ul><li>将t1表中的数据取⼀部分出来，先放到⼀个临时内存，这个内存其实就是join_buffer；<ul><li>join_buffer在BNL中是暂存驱动表⾥⾯的数据；</li><li>但是在NLJ中是没有使⽤的，所以这⾥就使⽤来存储⼀批次的要传到t2表的数据；</li></ul></li><li>再将这个join_buffer中的⼀批数据传到t2表中，在t2表中等于是⼀批次地去查找到满⾜t2.b=a的多个数据⾏，此时在t2表中也就可以⽤上MRR的优化了；</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730145640250.png" alt="BKA"></p><p>同样，如果<strong>要使⽤BKA优化算法</strong>的话，也需要设置：</p><p><strong>set optimizer_switch=’mrr=on,mrr_cost_based=off,batched_key_access=on’;</strong></p><p>前⾯两个参数是启⽤MRR，因为 BKA算法的优化要依赖于MRR；后⾯⼀个参数是启BKA；</p><h2 id="2-执⾏计划"><a href="#2-执⾏计划" class="headerlink" title="2. 执⾏计划"></a><strong>2</strong>. 执⾏计划</h2><p>我们InnoDB引擎有⼀个东⻄：查询优化器，这个查询优化器的作⽤就是对于每个SQL都会去⽣成⼀个执⾏计划；</p><p>这个<strong>执⾏计划</strong>也就是：</p><p>对于⼀个SQL语句（不管简单还是复杂），在MySQL底层的磁盘上有⼤量数据⻚，有主键索引和⼀堆普通索引；那么如何去使⽤索引、如果去确定查表的顺序、如何进⾏筛选、如何进⾏排序分组等；</p><p><strong>SQL调优</strong>：</p><p>通过分析执⾏计划，就能知道你的SQL真正是怎么执⾏的了，然后也就能根据实际情况去想各种办法改写你的SQL语句，改良索引设计，进⽽优化SQL语句的执⾏计划，最终提升执⾏速度；</p><p>MySQL针对⼀个SQL语句可以有多种执⾏的⽅案，那最终是通过什么来<strong>得出⼀个最佳的执⾏计划</strong>呢？</p><ul><li>基于成本来选择执⾏计算</li><li>基于规则来优化执⾏计划</li></ul><h3 id="2-1-基于成本选择执⾏计划"><a href="#2-1-基于成本选择执⾏计划" class="headerlink" title="2.1 基于成本选择执⾏计划"></a><strong>2</strong>.<strong>1</strong> 基于成本选择执⾏计划</h3><p>这个基于成本选择执⾏计划，其实就是去评估各种⽅案的成本，然后选择⼀个成本最低的执⾏计划，来得到最佳的查询速度；</p><p><strong>MySQL需要评估的成本主要是两种：IO成本和CPU成本；</strong></p><p>为什么是这两种？我们来想⼀下MySQL要执⾏⼀个SQL语句：</p><ul><li>⾸先，这些数据是在磁盘中的，那就需要把磁盘中的数据⻚给读取出来，加载到bufferpool中，这个从磁盘读取数据⻚的成本就是IO成本；<ul><li>MySQL从磁盘读取数据都是⼀⻚⼀⻚的读取，⼀般约定<strong>读取⼀⻚的成本为1</strong>；</li></ul></li><li>另外，当你拿到数据之后，可能需要对数据做⼀些运算，⽐如：验证是否符合筛选条件、或者做⼀些排序、分组之类的事情；<ul><li>这些事情都是由CPU来做的，于是就会消费CPU资源，也就是CPU成本；</li><li>⼀般约定<strong>读取或者检测⼀条数据是否符合条件的成本为0.2</strong>（这个在MySQL8.0版本已经改为了0.1）；</li></ul></li></ul><p>这个1和0.2都是MySQL⾃定义的⼀个成本常数，你也可以看做⼀个具体的计量单位，不然它的成本也没法被计算出来；</p><p>那我们来看看在你的MySQL中，<strong>如何查看这些成本常数</strong>：</p><ul><li><p>server层</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECT * FROM mysql.server_cost;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730150644850.png" alt="server层"></p><ul><li>这⾥我们要关注的是最后这个<strong>row_evaluate_cost</strong>，即上⾯说的读取或者检测⼀条数据是否符合条件的成本为0.2； </li></ul></li><li><p>engine层</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECT * FROM mysql.engine_cost;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730151045382.png" alt="engine"></p><ul><li>这⾥我们要关注的是<strong>io_block_read_cost</strong>，即上⾯说的从磁盘中读取⼀个数据⻚的成本为 1； </li></ul><p>知道了成本的概念之后，我们再来看看MySQL具体是怎么计算这些成本的；</p></li></ul><h4 id="2-1-1-全表扫描的成本计算"><a href="#2-1-1-全表扫描的成本计算" class="headerlink" title="2.1.1 全表扫描的成本计算"></a><strong>2</strong>.<strong>1</strong>.<strong>1</strong> 全表扫描的成本计算</h4><p>⾸先我们来看下这个SQL语句：  </p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#表t中的x1字段是没有索引的，所以这⾥要⾛的就是全表扫描；select * from t where x1 = xxx;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>全表扫描</strong>：</p><p>去扫描主键索引的所有叶⼦节点的数据⻚（因为主键索引的叶⼦节点中是存放了⽤户记录的所有数据信息的）</p><p>那<strong>全表扫描的执⾏成本怎么计算</strong>的呢？</p><ul><li>⾸先需要把磁盘中的主键索引的叶⼦节点的数据⻚，都⼀⻚⼀⻚的加载到bufferpool中进⾏⽐较，那么有多少数据⻚就会消耗多少IO成本；</li><li>然后再在bufferpool（内存）中对⾥⾯的每⼀条数据，都判断是否符合查询条件，那么有多少条数据就会消耗多少CPU成本；对于全表扫描，有个简单⽅法可以去看看它的执⾏成本；</li><li>有⼀个命令为：<strong>show table status like’表名’;</strong></li><li>这个命令可以拿到你的表的统计信息，当你在对表进⾏增删改查的时候，MySQL会⾃动给你维护这个表的⼀些这些统计信息；</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730152027878.png" alt="show table status"></p><ul><li><p>这⾥有两个字段：</p><ul><li>Rows：表示表中的记录⾏数；<ul><li>但是要注意，这⾥的Rows是⼀个估算值，不是真实值；如果你要得出真实值，那不得在执⾏得到执⾏计划的时候还要去计算或者执⾏⼀个selectcount(1)？正常来说不可能这样的对吧；</li><li>因为InnoDB引擎中没有地⽅记录⼀个表中到底有多少⾏数据；</li></ul></li><li>Data_length：表示表的主键索引的字节数⼤⼩；即Data_length/1024/16=数据⻚数；</li></ul></li><li><p>因此，这个全表扫描的执⾏成本为：</p><ul><li><strong>数据⻚数<em>1 + 记录⾏数 * 0.2 = (27449622528/1024/16) * 1 + 28748912</em> 0.2 = 7425174；</strong></li></ul></li></ul><h4 id="2-1-2-主键索引的成本计算"><a href="#2-1-2-主键索引的成本计算" class="headerlink" title="2.1.2 主键索引的成本计算"></a><strong>2</strong>.<strong>1</strong>.<strong>2</strong> 主键索引的成本计算</h4><p>在⽹上没有找到真正讲主键索引的成本计算的，都只有讲普通索引的成本计算的；但是我认为这个计算⽅式应该是差不多的，所以按照普通索引的计算⽅式应该是没问题的；</p><p>对于这种索引查询的⽅式，MySQL的设计是：</p><ul><li>不去管到底占⽤了多少的数据⻚，⽽是⽐较粗暴的认为读取索引的⼀个范围区间的IO成本就等于读取⼀个⻚⾯的成本；例如：where id &gt; 10：</li><li>这就是⼀个区间，成本为1；（这⾥应该对于whereid=10这种等值查询，也就是成本为1）</li><li>where id &gt; 10 and id &lt; 20;：这就是两个区间，成本为2；</li><li>另外，就是去⽐较有多少条数据满⾜筛选条件：如果是主键id的等值查询，表中也只有⼀个唯⼀的id，这种情况成本为1+0.2；</li><li>如果是主键id的范围查询，就需要在定位到第⼀条之后，往后去⽐较还有多少满⾜范围的；如果有n条，则为0.2*n；这种情况成本为1+0.2n；</li></ul><p>这⾥使⽤这个语句可以查出：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">EXPLAIN format=jsonSELECT * FROM `server` WHERE id = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730153116210.png" alt="主键索引成本"></p><p>这⾥的 <strong>query_cost</strong> 就是执⾏这个查询语句的⼤概成本了</p><p>当改为范围查询时：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">EXPLAIN format=jsonSELECT * FROM `server` WHERE id > 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>query_cost</strong>  = 7425174</p><h4 id="2-1-3-普通索引的成本计算"><a href="#2-1-3-普通索引的成本计算" class="headerlink" title="2.1.3 普通索引的成本计算"></a><strong>2</strong>.<strong>1</strong>.<strong>3</strong> 普通索引的成本计算</h4><p>⾄于普通索引，它的成本消耗的计算⽅式，跟前⾯的主键索引⼀样：</p><ul><li>按照读取索引的⼀个范围区间的IO成本就等于读取⼀个⻚⾯的成本；</li><li>然后⽐较有多少条数据满⾜筛选条件；也就是假设为⼀个范围，那它的成本就是1+0.2n；</li><li>但是对于普通索引，它的B+树叶⼦节点数据⻚中只存储索引项+主键Id，所以需要回表；</li><li>对于回表操作的成本计算，MySQL也⽐较粗暴的认为，⼀条数据要回表就得回表到主键索引上去查⼀个数据⻚；</li><li>上⾯普通索引查询出来有n条数据，则回表的IO成本为：n*1；</li><li>回表到主键索引中，主键id是唯⼀的；则CPU成本应该是每条0.2，⼀共有n条，则为0.2n；</li></ul><p>所以最终，<strong>普通索引的成本为：(1+0.2n)+(n+0.2n)</strong>；</p><h4 id="2-1-4-多表join的成本计算"><a href="#2-1-4-多表join的成本计算" class="headerlink" title="2.1.4 多表join的成本计算"></a><strong>2</strong>.<strong>1</strong>.<strong>4</strong> 多表join的成本计算</h4><p>多表join的成本计算更为复杂，我想我们也没有必要去真正了解清楚这些，有兴趣的可以⾃⼰下去研究研究；</p><p>⼤概计算⽅式为：</p><ul><li>先根据全表扫描或索引扫描查询驱动表，得到驱动表的成本；（假设此时查询到了n条数据）</li><li>由于join查询是循环嵌套查询，也就是驱动表中的每条数据，都会到被驱动表中进⾏查询；</li><li>那再对于每条数据，根据全表扫描或索引扫描查询被驱动表，得到被驱动表的成本；</li></ul><p>则最终的成本为：驱动表成本+n*被驱动表成本</p><h3 id="2-2-基于规则优化执⾏计划"><a href="#2-2-基于规则优化执⾏计划" class="headerlink" title="2.2 基于规则优化执⾏计划"></a><strong>2</strong>.<strong>2</strong> 基于规则优化执⾏计划</h3><p>前⾯我们讨论的是基于成本的计算来选择⼀个执⾏计划，也就是在⼀个SQL语句可能有多种执⾏计划可供选择，然后计算成本之和选择最低的那种；</p><p>在此之外，MySQL还会基于⼀些规则去优化或者说改写执⾏计划；因为它可能觉得你写的SQL语句并不好，直接按照你的SQL语句⽣成的执⾏计划的效率不⾼，可能就需要主动帮你改写⼀下（也叫查询重写）；<strong>查询重写会按照⼀定的规则</strong>：</p><ul><li><strong>去掉不必要的括号</strong>：</li></ul><pre class="line-numbers language-MySQL"><code class="language-MySQL">  select * from tb where ((a = 5 AND b = c) OR ((a > c) AND (c < 5))) -> (a = 5 and b = c) OR (a > c AND c < 5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将语句中没有必要的，多余的括号给去掉，使得语句更为简洁、阅读性更好；</li></ul><ul><li><p><strong>常量替换：</strong></p><ul><li>例如你的SQL中有： i = 5 and j &gt; i 这种语句的话，这⾥的i已经是常量5了，所以会直接被替换成：i = 5 and j &gt; 5 ；</li></ul></li><li><p><strong>等值替换：</strong></p><ul><li>跟常量替换类似，你的SQL中有： a = b and b = c and c = 5，全都是⼀个常量，也就会被直接替换成：a = 5 and b = 5 and c = 5 ；</li></ul></li><li><p><strong>表达式计算：</strong></p><ul><li>在SQL中如果在表达式中只包含常量的话，它的值就会被直接先计算出来；如： a = 5 + 1，会被直接替换为： a = 6 ；</li></ul></li><li><p><strong>外连接消除：</strong></p><ul><li>内连接是需要两个表中都存在对应的记录才能进⾏匹配上加⼊结果集中；</li><li>⽽外连接是以驱动表为主，如果被驱动表中的记录⽆法匹配上，则相关字段⽤NULL来填充之后加⼊结果集中；那么，如果存在这样的情况：在外连接的语句中，被驱动表中的相关字段不可能为NULL时，那么此时的外连接可以转换为内连接；<ul><li>好处在于，优化器可以两者转换来评估不同连接顺序的成本（内连接的驱动表和被驱动表是可以调换顺序的）；</li><li>这种情况也成为“空值拒绝”；那哪些情况被驱动表中的字段不可能为NULL呢？例如：</li></ul></li></ul><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECT * FROM t1 LEFT JOIN t2 ON t1.m1 = t2.m2 WHERE t2.n2 IS NOT NULL;SELECT * FROM t1 INNER JOIN t2 ON t1.m1 = t2.m2 WHERE t2.m2 = 2;#其实这两种情况，就都跟 内连接 没有什么区别了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>⼦查询优化：</strong></p><ul><li><p>为了更快的执⾏⼦查询，MySQL想了⾮常⾮常多的⽅法来进⾏优化；这⾥就⽤⼀个示例来说明，MySQL是怎么通过 ⼦查询优化 来 优化执⾏计划的；例如这样⼀个SQL语句：</p><pre><code>select * from t1 where x1 in (select x2 from t2 where x3 = xxx);</code></pre></li><li><p>这个语句可能是按照如下⽅式执⾏：</p><ul><li>将外层查询和内层查询当做两个独⽴的单表查询来对待；</li><li>先执⾏内层查询，得出所有满⾜x3 = xxx的结果，并放⼊内存中；</li><li>再执⾏外层查询，select * from t1 where x1 in (xx, xx, xx, ……)</li></ul></li><li><p>但是这样可能会存在⼀些问题，如果外层查询得出的结果集太多时：</p><ul><li>内存可能放不下</li><li>in (xx, xx, xx, ……) 时可能⽆法使⽤到索引，进⾏全表扫描</li><li>检测⼀条记录是否符合 in 中的参数匹配花费的时间太⻓；导致整体执⾏的时间太⻓</li></ul></li><li><p>因此，MySQL并没有将内层查询的结果集当做外层查询的参数这样设计；⽽是将内层查询的结果集给写⼊了⼀个临时表中（也叫做物化表）；这个临时表的写⼊过程为</p><ul><li>这个临时表的列，也就是⼦查询结果集中的列；</li><li>写⼊临时表时会被去重（可以让临时表变得更⼩）；</li><li>⼀般情况下⼦查询的结果集不会太⼤，所以⼀般临时表使⽤基于内存的Memory存储引擎，并创建hash索引；</li><li>如果这个结果集太⼤了（有⼀个系统参数tmp_table_size），如果超过了则会使⽤InnoDB存储引擎，并创建B+树索引；</li></ul></li><li><p>这样，创建了⼀个带有索引的临时表，那也就是两个表之间进⾏join了，也就是将⼦查询给优化为了连接查询，就可以⽤到连接查询的⼀些优化或者改写了；</p></li></ul></li></ul><h2 id="3-explain"><a href="#3-explain" class="headerlink" title="3. explain"></a><strong>3</strong>. explain</h2><p>上⾯讨论了MySQL会基于成本和基于规则来选择出⼀个最优的执⾏计划，这个执⾏计划也就是MySQL会怎样去执⾏你的SQL语句，例如：多表连接的顺序、怎么样去访问每个表、使⽤哪个索引（或不使⽤索引）等；</p><p>这些东⻄都是MySQL内部的执⾏，那我们怎么知道MySQL具体是怎么执⾏的呢？</p><p>为此，MySQL提供了explain关键字，⽤它也就可以让我们查看每个语句的具体执⾏计划；⽤法就是在你的SQL语句之前，直接加⼀个explain就⾏了；然后explain会给你输出⼀个列表，这个列表也就是MySQL对于你这条SQL语句的的执⾏计划，所以我们需要去看懂这个列表中每⼀列的含义，然后在看懂之后去思考怎么改写⾃⼰的SQL语句，使得执⾏起来更快；这其实就是SQL优化了；</p><p>我们先⼤概来看看explain中每⼀列的含义吧，后⾯再⼀个⼀个的详细解释：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730155255465.png" alt="explain含义"></p><p>先创建两个示例表 t1， t2,并插入一些数据</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE t1 ( id INT NOT NULL AUTO_INCREMENT, key1 VARCHAR (100), key2 INT, key3 VARCHAR (100), common_field VARCHAR (100), PRIMARY KEY (id), KEY idx_key1 (key1), UNIQUE KEY uk_key2 (key2), KEY idx_key1_key2_key3 (key1, key2, key3) ) ENGINE = INNODB;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1-id"><a href="#3-1-id" class="headerlink" title="3.1 id"></a><strong>3</strong>.<strong>1</strong> id</h3><p>⼀个select对应⼀个id，也就是⼀个简单的查询语句；但是在⼀些例如⼦查询、UNION⼦句的情况下，就会包含两个select语句，此时可能会有两个id；这个id也代表了SQL语句的执⾏顺序：id相同时，从上往下执⾏；id不同时，id越⼤的先执⾏；</p><h3 id="3-2-select-type"><a href="#3-2-select-type" class="headerlink" title="3.2 select_type"></a><strong>3</strong>.<strong>2</strong> select_type</h3><p>每个select代表的⼀个⼩查询，都会对应⼀个select_type，这个select_type就表示了这个⼩查询在整个查询中扮演的⻆⾊；</p><ul><li>SIMPLE：简单的查询、不包含⼦查询UNION查询等的查询都是SIMPLE类型；当然连接查询也是SIMPLE；</li><li>PRIMARY：对于包含了⼦查询、UNION查询这些的多个查询来说，整个⼤查询是由⼏个⼩查询组成的，这⾥⾯最外层⼤查询的select_type就会是PRIMARY；</li><li>UNION：对于包含 UNION查询的⼤查询来说，内层的⼩查询的select_type就是UNION；</li><li>UNIONRESULT：UNION之后要去重，MySQL使⽤了⼀个临时表来去重，这个临时表的select_type就是UNIONRESULT；</li><li>SUBQUERY：当⼦查询不能转换为连接查询时，MySQL会将⼦查询给物化，这个物化的临时表的select_type为SUBQUERY；</li><li>还剩下⼀些其他的类型，我认为没有必要去了解了；</li></ul><h3 id="3-3-table"><a href="#3-3-table" class="headerlink" title="3.3 table"></a><strong>3</strong>.<strong>3</strong> table</h3><p>每个select语句对应需要去查询哪个单表</p><h3 id="3-4-partitions"><a href="#3-4-partitions" class="headerlink" title="3.4 partitions"></a><strong>3</strong>.<strong>4</strong> partitions</h3><p>基本没有⽤到和关注过</p><h3 id="3-5-type"><a href="#3-5-type" class="headerlink" title="3.5 type"></a><strong>3</strong>.<strong>5</strong> type</h3><p>这个应该算是explain中最重要的列之⼀了；explain中每⼀⾏代表了MySQL对某个表的查询⽅式，type列就表示如何去查询这个表，即查询类型、关联类型等； </p><p>先总结说⼀下 type有哪些类型：system、const、eq_ref、ref、ref_or_null、range、index_merge、index、ALL 等；</p><ul><li><strong>system</strong>：当表中只有⼀条记录时，并且依赖的存储依赖是使⽤的精确统计的话（如MyIsam、Memory，InnoDB不是精确统计），type就为system；</li><li><strong>const：</strong>单词意思是常量嘛，也就是只有⼀个匹配⾏；那也就是⽤于主键索引或唯⼀索引的查询；</li><li><strong>eq_ref：</strong>跟const类似，但是是在执⾏连接查询时，被驱动表是通过主键索引或唯⼀索引来进⾏关联的，也就是说这样是等值匹配，也只会有⼀条记录；</li><li><strong>ref</strong>：⽤于普通索引的等值查询；或者连接查询中，被驱动表使⽤普通索引来关联；（也就是⽤上普通索引）</li><li><strong>ref_or_null</strong>：对于普通索引进⾏等值查询时，这个索引列的值也可以是NULL时，对于这个表的访问⽅式；</li><li><strong>range</strong>：⽤于主键索引或普通索引的范围查询，或普通索引的in查询；</li><li><strong>index_merge</strong>：⼀般情况下，只会为单个索引⽣成扫描区间来进⾏访问；但是在某些场景下，MySQL可能个会使⽤两个索引来提取数据，也就是使⽤索引合并来对某个表进⾏查询；</li><li><strong>index：</strong>要查询的字段都能被索引给覆盖（也就是我们说的覆盖索引），但是⼜不能完全⾛这个索引的树搜索（没法使⽤到B+树的查询进⾏定位）；这⾥⼤家可能会有点奇怪，是什么意思呢；<ul><li>这种情况，也就是你不能使⽤这个索引来直接定位，但是⼜的确使⽤了这个索引，怎么使⽤的呢？<ul><li>也就是去扫描这个索引的B+树结构的所有叶⼦节点（也就是数据⻚）；</li></ul></li><li>为什么要去扫描这个索引的叶⼦节点，⽽不去做全表扫描呢？<ul><li>因为这⾥是覆盖索引，这个索引中已经有了所有需要的信息；并且这个普通索引中内容要⽐主键索引的内容少，扫描起来更快；</li><li>所以就直接扫描这个索引的叶⼦节点，⽽不去做全表扫描；</li></ul></li><li>其实这种情况，可能性能也是⾮常慢的；因为它并没⽤使⽤到树搜索；</li><li>什么情况才会是这样呢？<ul><li>⽐如⼀个联合索引中，前⾯的列使⽤了范围查询、跳过了等，使得后⾯的列没法再按照索引进⾏搜索了；但是查询的列都在这个联合索引中，属于覆盖索引，可以不去回表；</li></ul></li></ul></li><li><strong>ALL</strong>：这个没什么好说的了，就是全表扫描；但是要记住的是全表扫描扫的是主键索引的叶⼦节点中数据⻚的全部记录⾏，挨着挨着扫就完了；我们前⾯说过这⾥怎么扫描的；</li></ul><h3 id="3-6-possible-keys和key"><a href="#3-6-possible-keys和key" class="headerlink" title="3.6 possible_keys和key"></a><strong>3</strong>.<strong>6</strong> possible_keys和key</h3><p><strong>possible_keys</strong> 表示在执⾏某个查询语句中，对于某个单表查询时，可能会⽤到的索引有哪些；</p><p><strong>key</strong> 就表示实际上真正⽤到了哪个索引； </p><p>有⼀点要注意的是，possible_keys 中的列不是越多越好，因为这⾥⾯的数量越多，就代表MySQL需要 去计算成本和⽐较成本时的开销也就越⻓； </p><p>所以，在可能的情况下，尽量删除⼀些多于的索引；</p><h3 id="3-7-key-len"><a href="#3-7-key-len" class="headerlink" title="3.7 key_len"></a><strong>3</strong>.<strong>7</strong> key_len</h3><p>MySQL在决定使⽤哪个索引的时候，会有对应的扫描区间，以及形成这个扫描区间的边界条件；这个key_len的组成也就是扫描区间的边界条件；</p><p><strong>计算⽅式</strong>：索引列的实际数据最多占⽤存储空间的⻓度：</p><ul><li><p><strong>INT类型</strong>:实际最多占⽤就是4字节；（INT其实不论存什么都是4字节）</p></li><li><p><strong>变⻓类型VARCHAR(100)</strong>，最多占⽤字节数为：</p><ul><li>假设对于utf8字符集下⼀个字符最多占⽤的字节数*最多可以存储的字节数；这⾥也就是100 X 3=300；</li></ul></li><li><p>如果索引列可以存储NULL值，则再在上⾯key_len计算值上加1字节；</p></li><li><p>对于使⽤了变⻓类型的索引列，都会有2字节的空间来存储实际数据占⽤的存储空间⻓度，则再在上⾯key_len计算值上加1字节；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730160704629.png" alt="key_len"></p><ul><li>key1 是 varchar(100)，则 3 *100 = 300； </li><li>key1 允许为 NULL，则再加 1 为 301； </li><li>key1 是变⻓字段，则再加 2 为 303； </li></ul></li><li><p><strong>对于联合索引⽽⾔</strong></p><p><img src="C:%5CUsers%5Ckarakal%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220730160855760.png" alt="key_len"></p></li><li><p>这⾥的 611，也就是： </p><ul><li>key1, key3 都是 303；</li><li>key2 为 INT，也允许为 NULL ，则为 5；</li><li>那最终结果为 303 + 303 + 5 = 611；</li></ul></li></ul><h3 id="3-8-ref"><a href="#3-8-ref" class="headerlink" title="3.8 ref"></a><strong>3</strong>.<strong>8</strong> ref</h3><p>ref表示跟索引进⾏匹配的是什么，是常量，还是列，还是什么；</p><h3 id="3-9-rows"><a href="#3-9-rows" class="headerlink" title="3.9 rows"></a><strong>3</strong>.<strong>9</strong> rows</h3><ul><li>当决定使⽤全表扫描的⽅式对某个表进⾏查询时，rows就表示整个表的评估⾏数；</li><li>当决定使⽤索引的⽅式对某个表进⾏查询时，rows就表示要扫描的索引中的⾏数；</li></ul><h3 id="3-10-filtered"><a href="#3-10-filtered" class="headerlink" title="3.10 filtered"></a><strong>3</strong>.<strong>10</strong> filtered</h3><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730161123032.png" alt="filtered"></p><ul><li>这⾥使⽤idx_key1索引进⾏查询，从rows列可以看出评估出来满⾜条件的有15条记录；</li><li>filtered中的10表示这15条记录中，有多少条满⾜条件common_field=1000；</li><li>这⾥是10，也就是10%，即只有1,2条满⾜条件的意思；</li></ul><h3 id="3-11-Extra"><a href="#3-11-Extra" class="headerlink" title="3.11 Extra"></a><strong>3</strong>.<strong>11</strong> Extra</h3><p>Extra列是⽤来说明⼀些额外信息的，我们可以通过这个Extra列来更精确地理解MySQL到底如何执⾏给定的查询语句；</p><p>Extra可能显示的额外信息⾮常⾮常多，我们这⾥就只介绍⼏个平时最常⻅的即可；</p><ul><li><p><strong>Using index</strong>：使⽤了覆盖索引，要查询的列都可以从索引中返回，也就不⽤再回表去查了；</p></li><li><p><strong>Using index condition</strong>：索引下推</p><ul><li><p>在联合索引中，只能使⽤到索引的前⾯字段，因为⼀些模糊查询、范围查询等35导致不能⽤到后⾯字段了；</p></li><li><p>但是这个查询⼜是需要回表的，所以先在存储引擎层利⽤联合索引中后⾯的字段，对于满⾜前⾯字段的查询结果进⾏过滤，过滤之后再去回表；这个就是索引下推；</p><ul><li><pre class="line-numbers language-mysql"><code class="language-mysql">explain SELECT * FROM t1 WHERE key1 LIKE 'c309%' AND key2 > 1000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对于key1可以⽤上索引，但是是范围查询了，就会导致key2⽤不上索引；</p></li></ul></li></ul></li></ul><ul><li><p><strong>Usingwhere</strong>：上⾯说到的索引下推，是因为剩余部分的条件可以在索引中进⾏过滤，也就是可以下推到存储引擎层进⾏过滤；</p><ul><li>但是查询条件中可能还存储⼀些不在索引中的条件，对于这种条件的过滤，就只有在MySQL的服务器层进⾏过滤了；这种情况也就是Usingwhere；</li><li>最简单的⼀个没有索引的查询，也就是使⽤的 Using where，因为它需要在服务器层进⾏过滤； </li></ul></li><li><p><strong>Using join buffer</strong> 连接查询中，被驱动表的关联字段没法使⽤上索引时，就会显示Using join buffer</p></li><li><p><strong>Using filesort</strong> </p><ul><li>仅仅表示没有使用索引的排序，事实上filesort这个名字很糟糕，并不意味着在硬盘上排序，filesort与文件无关。因此消除Using filesort的方法就是让查询sql的排序走索引</li></ul></li><li><p><strong>Using temporary</strong> </p><ul><li>表示由于排序没有走索引、使用union、子查询)连接查询、使用某些视图等原因，因此创建了一个内部临时表。注意这里的临时表可能是内存上的临时表，也有可能是硬盘上的临时表，理所当然基于内存的临时表的时间消耗肯定要比基于硬盘的临时表的实际消耗小。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL索引应⽤介绍</title>
      <link href="2022/07/08/MySQL%E7%B4%A2%E5%BC%95%E5%BA%94%E2%BD%A4%E4%BB%8B%E7%BB%8D/"/>
      <url>2022/07/08/MySQL%E7%B4%A2%E5%BC%95%E5%BA%94%E2%BD%A4%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="MySQL索引应⽤介绍"><a href="#MySQL索引应⽤介绍" class="headerlink" title="MySQL索引应⽤介绍"></a>MySQL索引应⽤介绍</h1><h2 id="1-索引分类"><a href="#1-索引分类" class="headerlink" title="1. 索引分类"></a><strong>1</strong>. 索引分类</h2><p>MyIsam 存储引擎中索引的存储格式</p><p>在MyIsam中，也是通过B+树作为索引的数据结构，但是跟InnoDB不同的是，MyIsam的索引⽂件和数据⽂件是分开的，使⽤.MYI来表示索引⽂件，使⽤.MYD来表示数据⽂件，那主键索引的结构为:</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730094842925.png" alt="image"></p><p>可以看到，MyIsam索引的中间节点的组织⽅式，跟InnoDB相同，也是只存储指向的数据⻚的指针和指向的数据⻚中的最⼩id；但是叶⼦节点就不同了：</p><ul><li>InnoDB的索引树中叶⼦节点中，存储了记录⾏的所有的数据信息，也就是有所有数据；</li><li>MyIsam的索引树中叶⼦节点中，只存储了指向的数据⽂件中的指针位置，需要到数据⽂件中去找到具体的记录⾏的数据信息；</li></ul><p>既然主键索引的叶⼦节点中是指针指向的数据⽂件中的具体的数据信息，那⾮主键索引肯定也就没有区别了，也是通过叶⼦节点来指向数据⽂件：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730095023895.png" alt="image"></p><p>根据InnoDB和MyIsam 这两种存储⽅式，就可以总结出索引的第⼀种分类了； </p><h3 id="1-1聚簇索引与⾮聚簇索引"><a href="#1-1聚簇索引与⾮聚簇索引" class="headerlink" title="1.1聚簇索引与⾮聚簇索引"></a><strong>1</strong>.1聚簇索引与⾮聚簇索引</h3><ul><li><strong>聚簇索引</strong>：数据和索引结构是存放在⼀起的；<ul><li>也就是对于⼀个表的数据它的索引项的逻辑顺序与表中记录在磁盘上的物理顺序是⼀致的（因为他们就是存放在⼀起的），也就是索引就是数据，数据就是索引；</li><li>聚簇索引⼀般就只有InnoDB的主键索引；</li></ul></li><li><strong>⾮聚簇索引</strong>：数据和索引结构没有存储在⼀起；<ul><li>，数据结构是在⼀个⽂件中，索引结构是在另外⼀个⽂件中；</li><li>对于⼀个表的数据，它的索引项的逻辑顺序与表中记录在磁盘上的物理顺序是不⼀致的；</li><li>⾮聚簇索引⼀般有MyIsam的所有索引、InnoDB的普通索引</li></ul></li></ul><h3 id="1-2-InnoDB的主键索引和普通索引"><a href="#1-2-InnoDB的主键索引和普通索引" class="headerlink" title="1.2 InnoDB的主键索引和普通索引"></a><strong>1</strong>.<strong>2</strong> InnoDB的主键索引和普通索引</h3><ul><li><p><strong>主键索引</strong>：在InnoDB中，对于每个表都会根据主键ID来创建⼀个主键索引；特征：</p><ul><li>数据⻚中的所有记录⾏都按照主键ID⼤⼩排列，组成⼀个单向链表；</li><li>索引树中的所有数据⻚和索引⻚都按照⻚中记录的最⼩项ID的⼤⼩来排列，组成⼀个双向链表；</li><li>索引树中的叶⼦节点是数据⻚，⾥⾯有完整的记录⾏的数据信息；⽽⾮叶⼦节点是索引⻚，⾥⾯只有索引项的信息；</li></ul></li><li><p><strong>普通索引（⼆级索引</strong>）：在InnoDB中，对于⾮主键，也就是其他字段，⽤户⾃⼰创建的索引，都叫做普通索引；假设以name列来创建⼀个索引，它的特征是：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730104537700.png" alt="二级索引"></p></li></ul><ul><li>数据⻚中不再存储完整的数据⾏记录，⽽是name+主键两个字段的值，并且是按照name的顺序进⾏排序，将所有的数据⾏（name+主键）排列，组成⼀个单向链表；</li><li>索引树中的索引⻚（⽬录项记录⻚）中的⽬录项中存储的是name+⻚号（不再是主键ID+⻚号）；并且索引⻚也是按照⻚中记录的最⼩name值排列，组成⼀个双向链表；</li><li>因为索引树的叶⼦节点（数据⻚）中没有所有的数据信息了，所以需要先⽤name找到对应的数据⾏，再根据这⾏数据⾥⾯的主键ID的值，再去主键索引中查找有完整数据信息的记录⾏（等于再⾛⼀遍主键索引的查询过程）；<ul><li>这个过程也叫做回表（回主键索引再去查⼀遍）；这⾥的回表是⼀⾏⼀⾏地去搜索主键索引；</li></ul></li><li>但是这⾥还有另外⼀个问题，⽬录项记录⻚中真的只有name+⻚号吗？<ul><li>如果name的值为“abc”的记录⾏⾮常⾮常多，⽐如在数据⻚中存在了好⼏个数据⻚，那在上层的索引⻚中，不就会存在name相同⽽指向的数据⻚不同的⽬录项？</li><li>这个时候，那新插⼊⼀条name还是为“abc”的记录，会往哪个数据⻚插呢？那就没法判断了；</li><li>所以，对于⼆级索引的索引⻚中的⽬录项，会添加⼀个主键值，这样也就能保证其中的⽬录项除了⻚号这个字段外，是唯⼀的；</li></ul></li></ul><ul><li><strong>联合索引（也是普通索引</strong>）：给多个列创建索引；假设以 name+age 列创建⼀个索引，特征是（这⾥只画图了索引⻚）</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730103606339.png" alt="联合索引"></p><p>索引⻚中的记录⾏信息为：name+age，当然还有个指向数据⻚的指针漏掉了；</p><ul><li>数据⻚中同样没有完整的记录⾏的所有数据信息，⽽是name+age+主键ID；</li><li>排序⽅式为：先按name排序，再按age排序；</li><li>所以联合索引同样也需要根据条件查找到记录⾏之后，需要回表到主键索引中查找有完整数据信息的记录⾏；</li></ul><p>这⾥把普通索引说完了，那回到上⾯说到的⾮聚簇索引的知识点，普通索引是⾮聚簇索引吗？、</p><ul><li>是⾮聚簇索引，因为普通索引存储索引信息的⽂件在普通索引这个索引树中，⽽存储它的具体的数据信息的⽂件在主键索引这个索引树中；</li><li>也就是说，存储索引信息和存储数据信息的⽂件是分开的，所以也属于⾮聚簇索引；</li></ul><h3 id="全局性地总结⼀下索引的理论知识"><a href="#全局性地总结⼀下索引的理论知识" class="headerlink" title="全局性地总结⼀下索引的理论知识"></a><strong>全局性地总结⼀下索引的理论知识</strong></h3><ul><li>每个索引都对应了⼀棵B+树；对于⼀棵B+树，在性能较优情况下⼀般⽽⾔有3层：<ul><li>上⾯两层是⾮叶⼦节点，对应的是索引⻚，⾥⾯只有索引项数据和指向下层⻚节点的指针；</li><li>最下⾯⼀层是叶⼦节点，对应的是数据⻚；</li></ul></li><li>如果是主键索引，⾥⾯就存放了所有的⽤户记录的全部信息；</li><li>如果是普通索引，⾥⾯就存放了索引项内容和主键ID；</li><li>InnoDB存储引擎默认会为主键ID创建⼀个聚簇索引（当你没有显示指定主键字段时，或者没有声明不能为NULL的unique字段时，InnoDB会⾃动添加索引，也就是数据⾏中的DB_ROW_ID那个隐藏字段）；</li><li>然后对于其他需要的字段，我们可以单独创建普通索引；在使⽤普通索引进⾏查询时，需要执⾏回表操作，也就是在普通索引中找到了对应的记录⾏之后，还需要回到主键索引中去找到具有所有⽤户数据的记录⾏；</li><li>B+树中每层的节点都按照索引列（主键ID、普通字段）的值从⼩到⼤顺序排列成了双向链表，并且每个节点⻚内部，也是按照索引列的值从⼩到⼤排列成了单向链表；因此索可以⽀持范围查询；</li><li>通过索引字段来查找数据时，是从B+树的根节点开始，⼀层⼀层地往下搜索的；先定位到记录在哪个数据⻚，然后在数据⻚中通过⼆分查找去找到对应的slot，最后再遍历slot中的单向链表，直到找到/找不到具体的记录⾏</li></ul><h2 id="2-索引设计"><a href="#2-索引设计" class="headerlink" title="2. 索引设计"></a><strong>2</strong>. 索引设计</h2><h3 id="2-1-回表"><a href="#2-1-回表" class="headerlink" title="2.1 回表"></a><strong>2</strong>.<strong>1</strong> 回表</h3><p>以⼀个SQL语句说明：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># money字段是有索引的select * from user_account where money > 1000 and money < 100000; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于user_account表，money字段创建了索引，也就是普通索引；</p><p>我们前⾯说过，对于普通索引，它的叶⼦节点只存储了索引项（mone）和主键id；</p><p>当你要查询⽤户记录的所有数据时，就需要使<strong>⽤主键id再到主键索引中查询所有数据信息，这也就是回表</strong>；</p><p>那么对于这个SQL语句，MySQL可以有两种查询⽅式：</p><ul><li>1.直接以全表扫描的⽅式进⾏查询：<ul><li>a.也就是直接去扫描主键索引，因为主键索引的叶⼦节点中存储了所有数据信息，那就去对⽐整个表的所有数据⾏，判断搜索条件是否成⽴，如果成⽴就将这⾏记录加⼊结果集；</li><li>b.但是主键索引是按照主键id的顺序来排列的，跟money字段没有顺序关系，所以需要从第⼀⾏⼀直扫描到最后⼀⾏为⽌；</li></ul></li><li>2.使⽤money字段的索引进⾏查询：<ul><li>a.因为对money字段创建了索引，所以这个索引就会按照money的⼤⼩来进⾏排序；那这个时候就可以使⽤这个索引树来进⾏树搜索，查找到第⼀个money&gt;1000的记录，然后遍历单向链表和双向链表直到money&lt;100000的记录；</li><li>b.但是money索引中，没有所有的数据信息，⽽我们的查询是select*，那就需要回表到主键索引中去查询；</li><li>c.我们说过，InnoDB的索引是存储在磁盘中的，并且以数据⻚作为B+树的节点来组织的；那这些数据⻚就是在需要的时候，才从磁盘中加载到内存；</li><li>d.假设查到了有50000条数据满⾜money&gt;1000andmoney&lt;100000，那对于其中的每⼀⾏数据，都要去执⾏⼀个回表操作（这⾥需要注意，是每⼀⾏都去做，⽽不能批量去做回表操作）；</li><li>e.也就是对于每⼀⾏数据，都有可能要去做⼀遍从磁盘中查找数据⻚并加载到内存中的操作，所以可想⽽知这个代价有多⼤；</li></ul></li></ul><p>那对于这个SQL语句，到底采⽤哪种⽅式来执⾏呢？</p><p>这就是我们前⾯讲到的查询优化器的⼯作：</p><ul><li><strong>它会去计算这两种⽅式各⾃需要消耗的成本，然后选择成本较⼩的⼀种⽅式来执⾏这个SQL语句；</strong></li></ul><h3 id="2-2-索引的设计原则"><a href="#2-2-索引的设计原则" class="headerlink" title="2.2 索引的设计原则"></a><strong>2</strong>.<strong>2</strong> 索引的设计原则</h3><ul><li><p><strong>覆盖索引</strong>：在使⽤普通索引进⾏查询时，数据⻚中只有索引字段+主键id，如果要查询其他字段就需要回表到主键索引中再次查询；</p><ul><li>如果要查询的字段都在这个索引中，那也就不⽤再做回表操作了，这个时候也就叫做覆盖索引（也就是让查询列表中只包含索引列）</li><li><strong>为了让最常⽤的where、orderby、groupby等语句都可以⽤到索引，就可以考虑覆盖索引</strong>；</li></ul></li><li><p><strong>最左匹配原则</strong>：对于联合索引，多个索引列 从最左边开始匹配，中间不能跳过或者有范围查询（模糊查询），否则会停⽌匹配（也就是不能使⽤到这个联合索引了）；</p><ul><li>为什么？</li><li>我们前⾯讲过，联合索引的组织⽅式为：先按key1进⾏排序，当key1相同时，再按key2进⾏排序，当key2相同时，再按key3进⾏排序；对于中间跳过的语句，如：wherekey1=’a’andkey3=’c’，当找到第⼀条满⾜key1=’a’的记录时，此时应该要去找key2相关的条件，但是这⾥直接没了key2，那在这个索引树中肯定就没法进⾏搜索了；</li><li>对于中间是范围查询的语句，如：wherekey1&gt;’a’ and key2=’b’：key1是可以⽤到索引的，可以将所有key1&gt;’a’的数据取出来；</li><li>key2有序的前提是key1是确定的值，但是这⾥的key1是⼀个范围，也就是说key1可以是’b’、’c’、’d’……等等；</li><li>那在这个时候，对于key2就已经不是有序的了，也就没法使⽤树搜索了；</li><li>联合索引排序⽅式为：先按key1排序，key1相同时，再按key2排序；</li><li>但是当key1是范围时，这⾥就查出来了⼀堆key1，此时key2已经是⽆序的了，所以这种情况下没法⽤到索引；</li><li>另外，对于最左匹配原则，还有⼀个最左前缀匹配，也就是对于单字段索引，从字符的最左边开始匹配；<ul><li>如：like’a%’；■like’%a%’或like’%a’不能⽤到索引</li></ul></li></ul></li><li><p><strong>选择基数较⼤（区分度⾼）的列创建索引</strong>：对于⼀个字段，它的<strong>区分度越⼤则它的值不重复的⽐例就越⾼，此时扫描的⾏数就越少</strong>；</p><ul><li>例如性别字段，⼀共就两个值，即使建⽴了索引，那它跟全表扫描也基本差别不⼤了；</li></ul></li><li><p><strong>选择字段类型较⼩的列创建索引</strong>：</p><ul><li>在索引⻚中会存储字段的值，如果⼀个字段太⻓了，那就会占⽤很⼤的存储空间，则在⼀个索引⻚中能够存储的记录数就会变少，这样就会增加索引⻚数，也就增加了磁盘IO；所以尽量选择字段类型较⼩的列来创建索引；</li><li>如果要在较⼤的列上创建索引，则可以使⽤前缀索引：例如只对字段的前20个字符建⽴索引key(name(20))；</li></ul></li><li><p><strong>索引列不能参与计算、嵌套函数、编码转换</strong>：因为索引是对于列的原值创建的B+树，如果你的查询条件中的值做了什么转换（计算、函数、编码等转换），那肯定就没法去到根据原值创建的B+树上进⾏树搜索了；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730110150993.png" alt="索引列不能参与计算、嵌套函数、编码转换"></p><ul><li>这个是对于t_modified字段创建的索引;<ul><li>如果查询条件为where t_modified=’2018-7-1’，InnoDB就会按照绿⾊箭头的路线，快速定位到t_modified=’2018-7-1’的地⽅；</li><li>如果查询条件为wheremonth(t_modified)=7的话，则传⼊的值会是7，在索引树上第⼀层就搜索失效了；这个时候优化器会放弃⾛t_modified索引的树搜索；</li></ul></li></ul></li><li><p><strong>尽量扩展索引，⽽不要新建索引</strong>：</p><ul><li>由于每个索引都会创建⼀棵B+树，不仅会占⽤磁盘空间，在插⼊更新时还需要维护这颗树；</li><li>所以在需要新的索引字段时，先考虑是否可以在现有索引的基础上添加列来创建联合索引，⽽不是直接创建⼀个新的索引；</li></ul></li></ul><h3 id="补充⼀个概念：索引下推（喵的每次面试都被问到）："><a href="#补充⼀个概念：索引下推（喵的每次面试都被问到）：" class="headerlink" title="补充⼀个概念：索引下推（喵的每次面试都被问到）："></a>补充⼀个概念：索引下推（喵的每次面试都被问到）：</h3><pre class="line-numbers language-MySQL"><code class="language-MySQL">#这个 user表中有索引为 (name, age)；select * from user where name like '张%' and age=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>我们前⾯介绍了最左匹配原则中的最左前缀规则，对于这种 张% 开头的可以⽤到索引的name字段；</p></li><li><p>但是因为它是模糊查询，对于联合索引(name,age)就没法搜索age字段了；</p></li><li><p>所以在使⽤了这个联合索引(name,age)查到满⾜条件的记录之后，还需要去筛选满⾜age条件的；这⾥的筛选⽅式就有两种了</p><ul><li><p>每条都回表先获取到所有信息，然后在server层进⾏筛选；</p><ul><li><p>也就是说从联合索引中取出的数据只判断name字段（不管age字段），满⾜name字段的就拿去回表了，获取所有的信息之后，再在server层进⾏筛选；</p></li><li><p>在MySQL5.6之前都是这样筛选的；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730110759890.png" alt="索引下推1"></p></li></ul></li><li><p>每条都先根据联合索引(name,age)中的age字段，先进⾏⼀次筛选（因为联合索引中是会记录age的值）；</p><ul><li><p>也就是<strong>将这个筛选的动作，下推到了存储引擎层实现</strong>，所以叫索引下推；</p></li><li><p>然后再将这些筛选过滤之后的满⾜条件的数据，进⾏回表；</p></li><li><p>显⽽易⻅，这种⽅式回表的记录数会⽐第⼀种少很多很多，所以是⼀种优化；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220730110944197.png" alt="索引下推2"></p></li></ul></li></ul></li></ul><h3 id="2-3-索引的设计案例"><a href="#2-3-索引的设计案例" class="headerlink" title="2.3 索引的设计案例"></a><strong>2</strong>.<strong>3</strong> 索引的设计案例</h3><p>上⾯讲到了索引设计的时候要考虑到的多个原则，也就是理论性的东⻄，那我们接着使⽤⼀个案例来举例说明⼀下较为真实的场景下，怎么设计索引；（当然这⾥是单表情况下）</p><p>⾸先这⾥的场景是⼀个社交APP的场景：</p><ul><li>表：user_info</li><li>字段：id,name,sex,age,weight,province,city,county,hobby,character,latest_login_time,score(评分)</li></ul><p>下⾯根据各个不同的查询场景，来看看怎么去思考<strong>索引的设计</strong>：</p><h4 id="场景⼀："><a href="#场景⼀：" class="headerlink" title="场景⼀："></a><strong>场景⼀</strong>：</h4><p>因为这是个社交APP，那肯定就要在上⾯搜索你感兴趣的⼈吧，那最简单的搜索条件为：</p><ul><li>搜索年龄在20到30之间的，根据评分进⾏排序，并且限制结果⼈数为20⼈（也就是分⻚）；</li></ul><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from user_info where age between '20' and '30' order by score limit xx, xx;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在这种场景下，where条件中使⽤了范围查询，根据最左匹配原则，后⾯的排序和limit都没法⽤到索引了；</li><li>所以在这种情况下，你的where筛选和后⾯的orderby等没法都⽤上索引，就需要做⼀个抉择了：<ul><li>你是要让where语句先基于索引去做⼀个筛选，筛选出来的部分数据，然后把数据加载到内存或者基于磁盘⽂件去进⾏指定条件的排序等，最后再分⻚；</li><li>还是说你是要让orderby按照你索引的顺序去找，然后找的过程中基于where语句来筛选出指定的数据，最后再分⻚；</li><li>这种情况下，⼀般都是使⽤where条件去快速地筛选出来⼀部分指定的数据，接着再进⾏排序和分⻚；因为根据你的where条件筛选之后的数据量，可能已经很⼩了，那么后续的排序和分⻚的成本就较⼩；</li></ul></li><li>先满⾜where条件中的索引；</li></ul><h4 id="场景⼆："><a href="#场景⼆：" class="headerlink" title="场景⼆："></a><strong>场景⼆</strong>：</h4><p>你在搜索⽤户时，⼀般会加上省、市这三个地区字段得带上；性别字段应该也得带上</p><pre><code>select * from user_info where province = 'xx' and city = 'xx' and sex = 'male' order by score limit xx, xx;</code></pre><ul><li>对于这种情况，既然省市区基本是确定要带的，性别也基本是确定要带的；那我们肯定也就直接创建⼀个联合索引：joint_index(province,city,sex)</li><li>前⾯说过，基数较⼩的字段不要创建索引吗，为什么这⾥性别字段也创建索引了呢？<ul><li>其实这⾥就是为了，在⽤到这个查询的时候，让你满⾜最左匹配原则，不然的话后⾯的字段就⽤不上了；</li></ul></li><li><strong>必选项字段，放在联合索引的最左侧</strong>；</li></ul><h4 id="场景三："><a href="#场景三：" class="headerlink" title="场景三："></a><strong>场景三</strong>：</h4><p>基于场景⼆和场景⼀，在搜索⽤户的时候，肯定还是会根据年龄进⾏筛选吧，所以往往会带上age字段；</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from user_info where province = 'xx' and city = 'xx' and sex ='male' and age between '20' and '30' order by score limit xx, xx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>但是age字段⼜⼀般都是在⼀个范围内进⾏筛选，所以为了满⾜最左匹配原则，我们需要把age字段放在联合索引的最后⾯（最右边）：joint_index(province,city,sex,age)</li><li><strong>范围查询的字段，放在联合索引的最后</strong>；</li></ul><h4 id="场景四："><a href="#场景四：" class="headerlink" title="场景四："></a><strong>场景四</strong>：</h4><p>有些时候，对于有些⽤户还可能会按照⼀些个性化特征来搜索⽤户；例如：爱好（hobby）、性格（charactor）等，但是这些条件也有可能⼀部分⼈不会带上他们；那这个时候，如果把他们直接放到联合索引中</p><ul><li><p>joint_index(province, city, sex, hobby, character, age)</p></li><li><p>不过，当未带上其中⼀个字段的话，那后续的字段也就⽤不上这个索引了；</p></li><li><p>设计技巧：可以发现，这些字段其实都是有⼀些固定的枚举值的，例如：</p><ul><li>hobby：运动、电影、看书、旅游等；</li><li>character：温柔、内向、外向、体贴等；</li></ul></li><li><p>基于这个特性，那上⾯的问题就可以在SQL语句中进⾏解决了：</p></li><li><pre><code>where province = 'xx' and ... and hobby in ('xx', 'xx', 'xx') and character in ('xx', 'xx', 'xx') and age between ...</code></pre><p>;</p></li><li><p>当⽤户未带上这个字段时，就直接使⽤⼀个装有所有的枚举值的list进⾏查询；</p></li><li><p>当⽤户带上了这个字段时，就把这个所有值的list，替换成⽤户传递的list；</p></li><li><p>这样的话，就可以让这两个字段也包含在索引中，⽽且肯定都能⽤上；</p></li><li><p><strong>含有枚举值的可选字段，使⽤in来让它们保证能⽤上索引</strong>；</p></li></ul><h4 id="场景五："><a href="#场景五：" class="headerlink" title="场景五："></a><strong>场景五</strong>：</h4><p>大部分搜索⽬标⽤户的场景，肯定都想要得到的结果是活跃⽤户吧，那些⼀两个⽉都没有上线过的⽤户，搜索出来也没有意思；</p><ul><li>所以⼤部分的搜索会带上⼀个例如最近7天在线的条件；</li><li>在我们的表中，有⼀个字段latest_login_time，表示的是最后的登录时间；如果想要使⽤这个字段的话，那就需要对它进⾏⼀些函数处理或者范围查询；<ul><li>但是这样的话也会导致⽤不到索引，或者导致后⾯的字段⽤不到索引（因为已经有了⼀个age的范围查询了）；</li></ul></li><li>设计技巧：在表中增加⼀个字段is_login_in_latest_7_days，每天定时去维护这个字段；<ul><li>那此时，就可以把这个字段加⼊到联合索引中了：</li><li>joint_index(province,city,sex,hobby,character,is_login_in_latest_7_days,age)</li></ul></li><li><strong>对⼀些字段，做特殊处理（增加字段）来可以⽤上索引</strong>；</li></ul><h4 id="场景六："><a href="#场景六：" class="headerlink" title="场景六："></a><strong>场景六</strong>：</h4><p>可能会存在⼀些⽤户，他不按常理出牌，⽐如他就设置⼀个搜索条件，其他什么条件都不带；例如就设置sex为⼥性，则SQL为：</p><ul><li><pre class="line-numbers language-MySQL"><code class="language-MySQL">where sex = 'female' order by score limit 0, 20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果还是⽤上⾯的那个联合索引，那sex是中间字段，肯定没法⽣效的；⽽且基数还很⼤，最后取出来⼏百万条数据，还要去磁盘中排序再分⻚什么的，这样效率会⾮常差的；</p></li><li><p>所以对于这种⼩众的条件假设排序的搜索，可以单独创建⼀个索引：idx_sex_score(sex,score);对⼩众搜索条件，单独创建索引；</p></li></ul><h4 id="设计核⼼："><a href="#设计核⼼：" class="headerlink" title="设计核⼼："></a><strong>设计核⼼</strong>：</h4><ul><li>尽量⽤⼀两个复杂的多字段联合索引，来覆盖到80%以上的查询；</li><li>再⽤⼀两个⼩众的辅助索引，来覆盖剩余的15%左右的查询；</li><li>也就是说，基本能保证95%以上的查询都能充分利⽤索引，就能保证你的查询性能了；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL索引结构介绍</title>
      <link href="2022/07/07/MySQL%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>2022/07/07/MySQL%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="MySQL索引结构介绍"><a href="#MySQL索引结构介绍" class="headerlink" title="MySQL索引结构介绍"></a>MySQL索引结构介绍</h1><p>在介绍索引之前，我们先思考⼀下如果没有索引的时候，要查找会有什么问题？</p><ul><li><strong>如果是根据主键ID查找</strong>：<ul><li>⾸先是多个数据⻚，这个时候可以根据每个数据⻚的Infimum指向的最⼩记录，可以判断当前ID跟这⼀⻚的最⼩ID之间的关系；然后遍历数据⻚的双向链表，这样可以定位到在哪个数据⻚；</li><li>然后根据数据⻚中的slot，可以使⽤⼆分法定位到是在哪个分组；</li><li>然后再在这个分组⾥⾯遍历单向链表，直到找到（或未找到）具体的数据⾏；</li></ul></li><li><strong>如果是⾮主键ID查找</strong>：<ul><li>⾮主键ID，⼜没有索引，（这⾥有个重点，数据⻚是只按照主键ID的⼤⼩排序的），那就只有挨着挨着从第⼀个数据⻚的Infimum开始遍历单向链表；</li><li>第⼀个数据⻚中没有，再通过双向链表去遍历第⼆个数据⻚，再次遍历单向链表；</li><li>这样⼀直挨着挨着的遍历，直到找到（或未找到）具体的数据⾏；</li></ul></li></ul><p>问题在于，如果你的表中有上千万条数据，不管是根据主键ID查找还是⾮主键ID查找，速度都是⾮常⾮常慢的，因为要遍历所有所有的数据⻚；所以，此时就引⼊了索引这个数据结构；</p><h2 id="1-B-树索引"><a href="#1-B-树索引" class="headerlink" title="1. B+ 树索引"></a><strong>1</strong>. B+ 树索引</h2><p><strong>⼀般⽽⾔，动态查找树主要有</strong>：</p><ul><li><strong>⼆叉查找树</strong>：⾸先是⼀棵⼆叉树（节点中只能存储⼀个元素，且任意节点只能有两个⼦节点），然后左⼦节点的值⽐根节点⼩，右⼦节点的值⽐根节点⼤；</li><li><strong>平衡⼆叉查找树</strong>：在满⾜⼆叉查找树的基础之上，树中任何⼀个节点的⾼度差不超过1，也就是平衡的；</li><li><strong>红⿊树</strong>：也是⼀个⼆叉树，是⼀种不严格的平衡⼆叉查找树；</li><li><strong>多路查找树（B树、B+树</strong>）：多路的意思，就不是⼆叉树了，⽽是多叉树了；⼀个节点可以有多个⼦节点（称为树的阶），⼀个节点中可以存储多个元素；</li></ul><h3 id="1-1-为什么要使⽤多路查找树"><a href="#1-1-为什么要使⽤多路查找树" class="headerlink" title="1.1 为什么要使⽤多路查找树"></a><strong>1</strong>.<strong>1</strong> 为什么要使⽤多路查找树</h3><p>那我们回到索引这个场景上来思考，为什么需要多路查找树呢？</p><ul><li>如果我们给⼀亿个数据构建⼆叉查找树索引，那索引中会包含⼤约1亿个节点，每个节点假设占⽤16个字节，那就需要⼤约1GB的内存空间。给⼀张表建⽴索引，我们需要1GB的内存空间。如果我们要给10张表建⽴索引，那对内存的需求是⽆法满⾜的；</li><li>这种时候⼀般的解决办法就是：<strong>时间换空间</strong>；也就是把索引存储在硬盘中，⽽⾮内存中；<ul><li>但是我们都知道，硬盘是⼀个⾮常慢速的存储设备，通常内存的访问速度是纳秒级别的，⽽磁盘访问的速度是毫秒级别的。读取同样⼤⼩的数据，从磁盘中读取花费的时间，是从内存中读取所花费时间的上万倍，甚⾄⼏⼗万倍；</li><li>这种将索引存储在磁盘中的⽅法，尽管减少了内存消耗，但是在读取磁盘的时候，查询效率会相应降低很多很多；</li></ul></li><li>索引存储在磁盘中时，对于每个节点的访问，都会对应⼀次次磁盘IO操作；那也就是说，树的⾼度就等于磁盘IO的次数；那肯定是树越⾼，磁盘IO次数越多，查找速度越慢；</li><li>如果这个时候使⽤的是⼆叉树，⼀个节点只能有两个⼦节点，当节点数量很多时，那是不是就会对应到树的⾼度⾮常⾼，也就导致了磁盘IO次数⾮常多了；</li></ul><p>所以，我们需要降低树的⾼度，怎么降低呢？</p><p>就是使⽤多叉树了，每个节点中可以存储多个元素，每个节点的⼦节点数也可以是多个，那⾃然就降低树的⾼度了；示例：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729162916609.png" alt="多路查找树"></p><ul><li>16个数据构成的⼆叉树中，树的⾼度是4，查找⼀个元素最多就需要4次磁盘IO； </li><li>16个数据构成的多叉树中，树的⾼度变成了3，那查找⼀个元素最多就只需要3次磁盘IO； </li><li>当这是⼀个m叉树（⽐如树的阶即m是100），那存储⼀亿个数据，树的⾼度也只是3，也最多只需要3次磁盘IO；</li></ul><p>这也就是我们为什么要使⽤多路查找树（多叉树）作为索引的原因；</p><h3 id="1-2-B树-与-B-树"><a href="#1-2-B树-与-B-树" class="headerlink" title="1.2 B树 与 B+树"></a><strong>1</strong>.<strong>2</strong> B树 与 B+树</h3><p>这⾥来说⼀下 B树 与 B+树 各⾃的特性： </p><h4 id="B树：是⼀种平衡的多路查找树；⼀棵m阶的B树："><a href="#B树：是⼀种平衡的多路查找树；⼀棵m阶的B树：" class="headerlink" title="B树：是⼀种平衡的多路查找树；⼀棵m阶的B树："></a><strong>B树：是⼀种平衡的多路查找树；⼀棵m阶的B树：</strong></h4><ul><li><p>如果根节点不是叶⼦节点，则⾄少有两颗⼦树；（特殊情况为：根节点就是叶⼦节点，那整棵树就只要⼀个根节点）</p></li><li><p>树中每个节点最多含有m个孩⼦（⼦树），和m-1个元素；除了根节点和叶⼦节点外（中间节点），每个节点⾄少有ceil(m/2)个孩⼦；（ceil为取上限）</p></li><li><p>⾮叶⼦节点中会存储元素（指向记录的指针）；⾮叶⼦节点中出现过的元素，不会再在叶⼦节点中出现；</p><p>示例：</p></li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729163243362.png" alt="B树"></p><h4 id="B-树：是基于B树的⼀种变形树，也是⼀种多路查找树；⼀棵m阶的B-树："><a href="#B-树：是基于B树的⼀种变形树，也是⼀种多路查找树；⼀棵m阶的B-树：" class="headerlink" title="B+树：是基于B树的⼀种变形树，也是⼀种多路查找树；⼀棵m阶的B+树："></a>B+树：是基于B树的⼀种变形树，也是⼀种多路查找树；⼀棵m阶的B+树：</h4><ul><li><p>树中每个节点最多含有m个孩⼦（⼦树），和m个元素；⾮叶⼦节点（中间节点）只存储索引，不存储真正的数据；</p></li><li><p>⾮叶⼦节点中的元素值，都是⼦树中的最⼤（或最⼩）值；</p></li><li><p>叶⼦节点中，有整个树的所有节点的元素信息；（会跟⾮叶⼦节点中的元素重复）</p></li><li><p>为所有的叶⼦节点，都添加了⼀个指针进⾏连接；</p></li><li><p>阶数越⼤，树的⾼度越低，磁盘IO次数越少；</p><ul><li>所以中间节点不存储数据，可以存储更多的元素作为索引，降低树的⾼度；</li></ul><p>示例：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729163507113.png" alt="B+树"></p></li></ul><h3 id="1-3-MySQL-为什么要使⽤-B-树-作为索引"><a href="#1-3-MySQL-为什么要使⽤-B-树-作为索引" class="headerlink" title="1.3 MySQL 为什么要使⽤ B+树 作为索引"></a><strong>1</strong>.<strong>3</strong> MySQL 为什么要使⽤ B+树 作为索引</h3><p><strong>⼀个数据结构，要⽤来作为索引的话，需要从两个⽅⾯进⾏考虑：查询效率和存储空间；并且MySQL还需要⽀持范围查询；</strong></p><p>那我们来对⽐⼀下各种数据结构作为索引的表现：</p><ul><li><p><strong>Hash表</strong>：</p><ul><li>查询效率为O(1)，但是不⽀持范围查询；</li></ul></li><li><p><strong>⼆叉搜索树</strong>：</p><ul><li>查询效率为O(n)，但是也不⽀持范围查询；</li><li>并且每个节点只能存储⼀个元素，会导致树的⾼度很⾼，磁盘IO次数很多；</li></ul></li><li><p><strong>跳表</strong>：</p><ul><li>查询效率为O(log），也能⽀持范围查询；</li><li>但是跳表中每个节点只能存储⼀个元素，也会导致跳表的层⾼⾮常⾼，磁盘IO次数很多；</li></ul></li><li><p><strong>B树</strong>：</p><ul><li>查询效率为O(log），元素按照顺序存储，能⽀持范围查询；</li><li>B树中每个节点可以存储多个元素，但是⾮叶⼦节点中存储了元素本身，就会导致在索引⻚中不能存放很多的索引节点，也会导致树的⾼度增加，磁盘IO次数很多；</li></ul></li><li><p><strong>B+树</strong>：</p><ul><li>查询效率为O(log），元素按照顺序存储，能⽀持范围查询；</li><li>中间节点不存储元素，只存储索引项；因此⼀个节点中可以存放很多的索引元素，就可以⼤⼤降低树的⾼度，减少磁盘IO，提升索引效率；</li></ul></li></ul><p>因此，MySQL选择了使⽤B+树作为索引的数据结构；</p><h2 id="2-MySQL索引"><a href="#2-MySQL索引" class="headerlink" title="2. MySQL索引"></a><strong>2</strong>. MySQL索引</h2><h3 id="2-1-索引的数据格式"><a href="#2-1-索引的数据格式" class="headerlink" title="2.1 索引的数据格式"></a><strong>2</strong>.<strong>1</strong> 索引的数据格式</h3><p>假设⼀个表中有 3个字段：id、age、name；再往这个表中插⼊3条数据（id 分别为 1，3，5），此时的数据⻚简略显示为： </p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729165609899.png" alt="image"></p><ul><li>注意看上⾯的 record_type：2 表示最⼩记录、3表示最⼤记录、0表示普通记录</li><li>数据⻚中的数据⾏都⽤单向链表连接起来了（这⾥省略了 slot）</li></ul><p>并且我们假设，⼀个数据⻚中最多存储3条数据，那我们再次插⼊三条数据（id 分别为 4， 7，8）时，这个数据⻚中就不够放了，所以需要再分裂出⼀个数据⻚： </p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729170008495.png" alt="image"></p><ul><li>此时，由于新插⼊数据中，id=4⽐前⼀个数据⻚中的id=5更⼩，⽽我们的数据⻚中的数据⾏是按照id从⼩到⼤排列的；</li><li>所以需要把id=4的数据⾏移到第⼀个数据⻚，把id=5的数据⾏移到第⼆个数据⻚；</li><li>也就是说，这⾥需要调整两个数据⻚中这两⾏记录的物理位置，⽽这个调整物理位置的操作，是⽐较耗时的，会降低MySQL的性能；<ul><li>这也就是，为什么MySQL的主键ID，建议是单调递增的；只要是单调递增（不⼀定连续⾃增），那它每次新插⼊的记录都会在后⾯的数据⻚，不⽤去调整；</li><li>⽽如果是uuid之类的，⾮递增的主键ID，有可能你第100个数据⻚中的记录，要跟第10个数据⻚中的记录调换位置，并且还有可能你的每次插⼊操作都需要去调换位置；那这个时候对MySQL的性能是不是就影响很⼤；</li><li>你所以MySQL的主键ID最好是单调递增的，就是因为这⾥的调换位置的原因；上⾯的这个操作，也叫做⻚分裂；</li></ul></li></ul><p>这⾥可能会有⼀个疑问，为什么分裂出来的新数据⻚号是16，⽽不是连续的11呢？</p><p>其实这⾥不⽤是连续的，因为还会有索引⻚的分裂（下⾯会讲到）；使⽤的这些数据⻚在磁盘上也不是相邻的，只需要维护上⼀⻚和下⼀⻚的编号的指针来建⽴链表关系即可；</p><p>我们说过，数据⻚和数据⻚之间，是通过双向链表连接的；前⾯也说了，要查找⼀条数据，是通过遍历双向链表挨着挨着进⾏查找的；但是，如果数据有⼏百万，甚⾄⼏千万条，那这个时候是不是就会有⾮常多的数据⻚？（你就算⼀个数据⻚存100条数据，不也得有⼏⼗万个数据⻚）</p><p>这个时候，再通过遍历双向链表来进⾏查找，那速度就很慢了，肯定是不能接受的；所以，为了优化这种查找，就使⽤了索引；⾄于怎么实现这个索引的，我们⼀点⼀点的来分析；⾸先，对于多个数据⻚，先为它们建⽴⽬录项，每个⻚都对应了⼀个⽬录项，每个⽬录项包括两个部分：</p><ul><li><strong>key</strong>：表示这个数据⻚中所有记录⾏的最⼩值（也就是主键ID最⼩值）；</li><li><strong>page_no</strong>：表示这个数据⻚⻚号；</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729171053253.png" alt="页目录项"></p><p>那这些⼀条⼀条的⽬录项，怎么存储或者说怎么组织数据结构呢？</p><p>其实粗略看起来，它跟数据⾏⾮常相似，只是数据⾏存储的是主键ID+各个字段，那这个⽬录项存储的是最⼩ID+数据⻚号，其实基本⼀样了；</p><p>那我们不就可以也使⽤数据⻚来存储这些⽬录项，存储这种的数据⻚就可以叫做<strong>⽬录项记录⻚</strong>：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729171746101.png" alt="⽬录项记录⻚"></p><p>那这样怎么区分普通的记录⾏和⽬录项呢？、</p><ul><li>我们前⾯讲过，记录⾏的数据头中，有⼀个字段叫做<strong>record_type</strong>，它有4种取值：<ul><li>0：普通记录⾏；</li><li>1：⾮叶⼦节点的数据⻚的⽬录项的记录；</li><li>2：最⼩记录；</li><li>3：最⼤记录；</li></ul></li></ul><p>这⾥的1，就表示了这个⽬录项记录也中的⽬录项记录，也就跟普通的⽤户记录（数据⾏）区分开了；</p><p>随着表中数据越来越多，那数据⻚就会越来越多，数据⻚上层的⽬录项记录⻚中的⽬录项也就越来越多；当达到⼀个临界值时，那这个⽬录项记录⻚是不是就要分裂出来⼀个新的⽬录项记录⻚，也就是跟数据⻚的分裂⼀样；多个⽬录项记录⻚之间也是通过双向链表来连接的；</p><p>那随着⽬录项记录⻚越来越多时，进⾏⼀个查找是不是也得双向链表中很多的节点？那这个时候怎么办？</p><p>对这些⽬录项记录⻚，在上层再建立⼀个⽬录项记录⻚，⾥⾯存储的⾃然就是：</p><ul><li>⽬录项记录⻚中的所有⽬录项的最⼩id；</li><li>⽬录项记录⻚的编号；</li></ul><p>示例：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729174056649.png" alt="⽬录项记录⻚"></p><p>ps:B+树的插⼊分裂等，会导致⻚号不连续；</p><p>在数据⻚上⾯的⽬录项记录⻚就是索引⻚，它⾥⾯存储的⽬录项记录就是索引项；</p><p>再回过头来看，这种数据⻚+索引⻚来组织出来的索引数据结构，就是⼀棵B+树；我们对照索引和B+树的特性来⼀起看看：</p><ul><li>数据⻚是叶⼦节点，叶⼦节点中存储了所有的元素信息；也就是有所有的数据⾏的所有字段信息；</li><li>索引⻚是⾮叶⼦节点，⾮叶⼦节点（中间节点）中只存储了⽬录项（⾥⾯只包含最⼩id和⻚号，其实是⼀个指向数据⻚的指针），⽽没有存储其他信息；<ul><li>⾮叶⼦节点中存储的内容更少，那⼀个索引⻚中能够存储的⽬录项就会更多，这样也就降低了这棵树的⾼度了；</li></ul></li><li>所有的数据⻚和索引⻚，都是通过双向链表进⾏连接的</li></ul><p><strong>在MySQL中，对于每个表都会默认对主键ID按照B+树这种数据结构来创建⼀个索引树（也就是索引）；索引树中的叶⼦节点是包含了所有数据⾏信息的数据⻚，⽽⾮叶⼦节点是存储⽬录项记录的索引⻚；</strong></p><p>这⾥再多介绍⼀点，<strong>⼀个索引从最初是怎么来形成这棵B+树的</strong>：</p><ul><li>创建B+树索引时，会为这个索引创建⼀个根节点的⻚；最初表中没有数据的时候，每个B+树索引对于的根节点⻚中既没有⽤户记录，也没有⽬录项记录；</li><li>接着执⾏⼀些插⼊语句，往这个表中插⼊⽤户记录时，会先存⼊这个根节点；</li><li>在根节点中的可⽤空间⽤完时，再插⼊⽤户记录，此时会将根节点中的所有记录复制到⼀个新⻚；</li><li>然后再对这个新⻚执⾏⻚分裂，得到第⼆个新⻚；并将新插⼊的记录分配到第⼀个或者第⼆个新⻚中；</li><li>此时根节点就⾃动升级为存储⽬录项的⽬录项记录⻚（也就是索引⻚），那也就需要将第⼀个新⻚和第⼆个新⻚对应的⽬录项都插⼊到这个根节点中；</li><li>后续的节点分裂，就是⼀直分裂分裂，并往根节点中插⼊⽬录项；直到作为索引⻚的根节点再次插满了，就再次执⾏记录复制，这个根节点继续往上提，成为记录索引⻚的⽬录项的上层索引⻚；</li></ul><h3 id="2-2-索引的查询流程"><a href="#2-2-索引的查询流程" class="headerlink" title="2.2 索引的查询流程"></a><strong>2</strong>.<strong>2</strong> 索引的查询流程</h3><p>基于索引，根据主键查询数据流程：（假设查找id=450的记录）</p><ul><li><p>从最顶层的⻚63开始查找，前⾯讲过，数据⻚中的⻚⽬录中有slot，所以可以通过slot来进⾏⼆分查找；○⻚63中的第⼆条⽬录项的数据范围为[321,1005)左开右闭的空间，所以我们要查找的id=450的记录肯定就在这个⽬录项指向的⻚中；（也就是⻚87）</p></li><li><p>再在⻚87中继续查找，同样是通过⼆分查找，找到了第⼀条⽬录项的数据范围为[321,555)，所以要查找的的记录⾏在它指向的⻚中；（⻚58）</p></li><li><p>同样，在⻚58中也是通过⻚⽬录中的slot的⼆分查找，找到对应的slot，再在这个slot中遍历多个数据⾏组成的单向链表，直到找到（或未找到）id=450的记录⾏；</p></li></ul><p>那如果我们是查找id&gt;450的记录呢？⼤家可以先想⼀下，联系到B+树的特性；</p><ul><li><p>因为数据⻚中的记录⾏是从⼩到⼤且⽤单向链表连接起来的，那是不是直接往后⾯依次查找就⾏了；</p></li><li><p>并且数据⻚也是通过双向链表连接的，同样也是往后⾯依次查找就⾏了；</p></li></ul><p>总结⼀下：</p><ul><li>其实就是将存放所有信息的数据⻚作为B+树的叶⼦节点，并且⽤双向链表来连接；</li><li>再将存放⽬录项记录的⽬录项记录⻚作为B+树的⾮叶⼦节点，同样使⽤双向链表来连接，⾥⾯的内容只有：<ul><li>⽬录项指向的数据⻚的最⼩Id；</li><li>⽬录项指向的数据⻚的指针；</li></ul></li><li>⽬录项记录⻚中没有其他内容，所以这样的⼀个⻚，可以存放⾮常多的⽬录项，也就使得这棵B+树的⾼度变矮了；</li></ul><h3 id="2-3-索引的缺点"><a href="#2-3-索引的缺点" class="headerlink" title="2.3 索引的缺点"></a><strong>2</strong>.<strong>3</strong> 索引的缺点</h3><p>上⾯我们讲了这么多索引的内容，也基本上都是<strong>索引的优点：⽤来提升查询速度</strong>；</p><p>那索引的作⽤这么⼤，为什么对于普通索引还需要我们⾃⼰去⼿动创建，为什么InnoDB不为表的每个字段都创建⼀个索引呢？</p><ul><li>存储空间：每创建⼀个索引，都会去创建⼀棵B+树，每⼀个B+树的节点都是⼀个数据⻚/索引⻚，默认⼤⼩是16KB；当⼀个表中数据量很⼤时，这颗树还是很占⽤存储空间的；</li><li>维护索引的开销：因为索引中要维护数据⻚、记录⾏等的排序关系；当你每执⾏⼀条增、删、改等语句时，都可能会涉及到索引中要去调整索引中多个数据⻚之间的排序关系，这是很浪费性能的；</li><li><strong>所以索引不是越多越好的，当然也不能为表中每个字段都创建⼀个索引；</strong></li></ul><h3 id="2-4-索引的存储⾏数"><a href="#2-4-索引的存储⾏数" class="headerlink" title="2.4 索引的存储⾏数"></a><strong>2</strong>.<strong>4</strong> 索引的存储⾏数</h3><p>最后，以⼀个⾯试题来结尾吧，其实也不算⼀个⾯试题，我觉得我们本身也需要去掌握的这个东⻄；</p><p>Q：MySQL InnoDB存储的表，在性能允许的情况下，⼀个表中最多存储多少⾏数据⽐较合理？</p><p>A：⼀般来说，B+树中三层的⾼度对于MySQL的查询性能表现最好；并且规定最下⾯的⼀层（存⽤户记录的数据⻚那层）为第0层；</p><ul><li>我们知道，不管是数据⻚还是索引⻚，⼤⼩都是16kb；12</li><li>我们粗略⼀点计算：对于索引⻚⽽⾔，它⾥⾯的⼀个⽬录项主要有两个内容：id占⽤8个字节、指向数据⻚的指针占⽤6个字节，⼀共占⽤⼤概15个字节；</li><li>那我们从上到下来看：○对于第2层：就只有⼀个索引⻚，⾥⾯会有：16384/15≈1092个索引节点；也就是会指向1092个索引⻚；<ul><li>对于第1层：会有1092个索引⻚，同样对于每个索引⻚，它⾥⾯也有1092个索引节点；那就会指向1092*1092≈1192464个数据⻚；</li><li>对于第0层：第0层是数据⻚，⾥⾯存放的具体的记录⾏了（就有很多的字段等内容），那我们也粗略⼀点计算，⼀个记录⾏⼤概占⽤0.5kb，则16kb的数据⻚中就可以存储30条左右的记录⾏；</li><li>则这⼀层⼀共可以存储：1192464*30=35773920≈35000000⾏；</li></ul></li></ul><p><strong>也就是说，对于⼀个InnoDB的表，⼤概的、粗略的、计算来看，可以存储3500w⾏左右的记录；</strong></p><ul><li><strong>如果表中字段很多，或者每个字段存的内容很多，那就可能减少到2000w⾏左右记录；</strong></li><li><strong>如果表中字段⽐较少，或者每个字段存的内容⽐较少，那就可能增加到4000w⾏左右记录；</strong></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySQL中表空间、数据⻚、数据⾏的物理存储</title>
      <link href="2022/07/05/MySQL%E8%A1%A8%E7%A9%BA%E9%97%B4%E3%80%81%E6%95%B0%E6%8D%AE%E2%BB%9A%E3%80%81%E6%95%B0%E6%8D%AE%E2%BE%8F%E7%9A%84%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8/"/>
      <url>2022/07/05/MySQL%E8%A1%A8%E7%A9%BA%E9%97%B4%E3%80%81%E6%95%B0%E6%8D%AE%E2%BB%9A%E3%80%81%E6%95%B0%E6%8D%AE%E2%BE%8F%E7%9A%84%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h1 id="MySQL中表空间、数据⻚、数据⾏的物理存储"><a href="#MySQL中表空间、数据⻚、数据⾏的物理存储" class="headerlink" title="MySQL中表空间、数据⻚、数据⾏的物理存储"></a>MySQL中表空间、数据⻚、数据⾏的物理存储</h1><h2 id="1-MySQL-各数据所在⽬录"><a href="#1-MySQL-各数据所在⽬录" class="headerlink" title="1. MySQL 各数据所在⽬录"></a><strong>1</strong>. MySQL 各数据所在⽬录</h2><p>MySQL的配置⽂件都是 /etc/my.cnf</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mysql]# cat /etc/my.cnf# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.7/en/server-configurationdefaults.html[mysqld]# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2Mdatadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sock# Disabling symbolic-links is recommended to prevent assorted securityriskssymbolic-links=0log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pidlower_case_table_names=1sql-mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>MySQL的数据⽂件在 /var/lib/mysql</strong></p></li><li><p><strong>MySQL的⽇志⽂件在 var/log/mysqld.log</strong></p></li><li><p>还有 sql-mode；</p></li></ul><h3 id="MySQL的数据⽂件⽬录-var-lib-mysql"><a href="#MySQL的数据⽂件⽬录-var-lib-mysql" class="headerlink" title="MySQL的数据⽂件⽬录 /var/lib/mysql"></a>MySQL的数据⽂件⽬录 /var/lib/mysql</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mysql]# cd /var/lib/mysql[root@localhost mysql]# lltotal 1368176-rw-r-----. 1 mysql mysql         56 Feb 21  2020 auto.cnf-rw-------. 1 mysql mysql       1675 Feb 21  2020 ca-key.pem-rw-r--r--. 1 mysql mysql       1074 Feb 21  2020 ca.pem-rw-r--r--. 1 mysql mysql       1078 Feb 21  2020 client-cert.pem-rw-------. 1 mysql mysql       1675 Feb 21  2020 client-key.pem-rw-r-----. 1 mysql mysql       1370 Sep 13  2021 ib_buffer_pool-rw-r-----. 1 mysql mysql 1287651328 Jun 16 04:50 ibdata1-rw-r-----. 1 mysql mysql   50331648 Jun 16 04:50 ib_logfile0-rw-r-----. 1 mysql mysql   50331648 Jun 16 04:43 ib_logfile1-rw-r-----. 1 mysql mysql   12582912 Jun 24 03:42 ibtmp1drwxr-x---. 2 mysql mysql       4096 Feb 21  2020 mysql //⽬录srwxrwxrwx. 1 mysql mysql          0 Jun 16 00:07 mysql.sock-rw-------. 1 mysql mysql          5 Jun 16 00:07 mysql.sock.lockdrwxr-x---. 2 mysql mysql       4096 Mar 19  2020 nsight //⽬录drwxr-x---. 2 mysql mysql       8192 Feb 21  2020 performance_schema //⽬录-rw-------. 1 mysql mysql       1679 Feb 21  2020 private_key.pem-rw-r--r--. 1 mysql mysql        451 Feb 21  2020 public_key.pem-rw-r--r--. 1 mysql mysql       1078 Feb 21  2020 server-cert.pem-rw-------. 1 mysql mysql       1679 Feb 21  2020 server-key.pemdrwxr-x---. 2 mysql mysql       8192 Feb 21  2020 sys //⽬录drwxr-x---. 2 mysql mysql       4096 Jun 16 01:08 sysbench@002ddb //⽬录drwxr-x---. 2 mysql mysql       4096 Jun  1 23:22 test //⽬录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上⾯这些⽂件⼤概是：</p><ul><li><p><strong>*.pem</strong>等相关的都是mysql的⼀些安全性校验⽂件；</p></li><li><p><strong>ib_buffer_pool</strong>：前⾯说过，InnoDB使⽤了内存bufferpool来提升效率，但是在MySQL重启之后，那这些内存中的数据是不是就都没有了，然后所有的连接都需要重新从磁盘中加载，那这样性能肯定会受影响；所以在mysql5.6后，添加了这个新特性：</p><ul><li>在mysql关闭时，将bufferpool内存中的热数据，dump到磁盘⽂件中，也就是这⾥的ib_buffer_pool⽂件；</li><li>在mysql重启时，将ib_buffer_pool⽂件的数据load到内存中；（虽然也读取了磁盘，但是load的是热数据）</li></ul></li><li><p><strong>ibdata1</strong>：InnoDB将存储的数据按表空间（tablespace）进⾏存放，在默认配置下就会有⼀个初始⼤⼩为10M，名为ibdata1的⽂件，也就是默认的表空间⽂件（也是共享表空间）；（另外undolog⽇志⽂件也存在于这个共享表空间中）</p></li><li><p><strong>ib_logfile0、ib_logfile1</strong>：这两个⽂件就是InnoDB的redolog⽂件，也就是前⾯说的重做⽂件；为什么这⾥有两个，是因为redolog是⼀个逻辑上循环使⽤的⽂件，⼀个⽂件写满之后写另⼀个⽂件；</p></li><li><p>另外的⽬录这些，就表示的是⼀个数据库，⼀个数据库就是⼀个⽬录；</p></li></ul><p>再进⼊到⼀个⽬录（数据库）：</p><pre class="line-numbers language-shell"><code class="language-shell">-rw-r-----. 1 mysql mysql      8632 Jun 16 01:06 sbtest10.frm-rw-r-----. 1 mysql mysql 297795584 Jun 16 04:50 sbtest10.ibd-rw-r-----. 1 mysql mysql      8632 Jun 16 01:08 sbtest11.frm-rw-r-----. 1 mysql mysql 297795584 Jun 16 04:50 sbtest11.ibd-rw-r-----. 1 mysql mysql      8632 Jun 16 01:08 sbtest12.frm-rw-r-----. 1 mysql mysql 297795584 Jun 16 04:50 sbtest12.ibd-rw-r-----. 1 mysql mysql      8632 Jun 16 01:08 sbtest13.frm-rw-r-----. 1 mysql mysql 297795584 Jun 16 04:50 sbtest13.ibd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>sbtest10.frm</strong>：前⾯表示表名，后⾯的.frm表示这是存放表结构的⽂件；</li><li><strong>sbtest10.ibd</strong>：同样前⾯表示表名，后⾯的.ibd表示这个存放数据的⽂件；（也就是说，InnoDB的表的数据就存放在这⾥⾯）</li></ul><h2 id="2-表空间的物理结构"><a href="#2-表空间的物理结构" class="headerlink" title="2. 表空间的物理结构"></a><strong>2</strong>. 表空间的物理结构</h2><p>表空间可以看做是InnoDB存储引擎结构的最⾼层，因为所有的数据都是存放在表空间中；从上⾯可以看到，有两种表空间：</p><ul><li><strong>共享表空间（ibdata1）</strong>：也就是系统表空间，⼀些Undo的信息、事务信息等是存储在这⾥⾯的；</li><li><strong>独⽴表空间（xxx.ibd）</strong>：每个创建的表都对应了⼀个独⽴的表空间，命名为表名.ibd；这个⽂件中包含了表的数据；</li></ul><p><strong>独⽴表空间的内容为：</strong> </p><ul><li><p><strong>段（Segment）</strong>：表空间是由各个段（Segment）组成的，⼀般分为数据段和索引段；（共享表空间中还有回滚段）</p><ul><li>这⾥先提及⼀点MySQL索引的知识，mysql的索引由B+树组织，分为叶⼦节点和⾮叶⼦节点；叶⼦节点⻚存储了完整的数据，⽽⾮叶⼦节点⻚（也就是索引⻚）只存储了索引指针。</li><li>如果把这些叶⼦节点⻚和⾮叶⼦节点⻚都通通放在⼀起的话，那叶⼦节点⻚与叶⼦节点⻚之间不就存在物理距离了。（当要执⾏全表扫描或者范围查询时（这个也就是对所有叶⼦节点⻚进⾏顺序扫描），如果都是间隔存放的，就会产⽣随机IO，导致扫描性能⼤⼤下降；）</li><li>所以，这⾥就设计出了段这个概念：<ul><li>将叶⼦节点⻚所在的区放到叶⼦节点段；</li><li>将⾮叶⼦节点⻚所在的区放到⾮叶⼦节点段</li></ul></li></ul></li><li><p><strong>区（Extend）</strong>：本质上，表空间可以直接由数据⻚组成；但是在数据量⼤的情况下，性能会受到影响；所以为了更好的利⽤和管理数据⻚，就设计出了区 这个概念；</p><ul><li><strong>区就是数据⻚的集合，把64个数据⻚划分成为⼀个区，所以⼀个区的⼤⼩为1M</strong></li><li>为什么有了区就可以提升使⽤⻚的性能？<ul><li>因为数据⻚是通过双向链表来连接的，上⼀⻚和下⼀⻚的物理位置可能很远，这样就会导致随机IO，性能低下；</li><li>所以就引⼊了区，⼀个区就是在物理位置上连续的64个数据⻚（可以连续访问）；这样当表中数据量⼤的时候，为某个索引分配空间时，就不再按照⻚为单位分配了，⽽是按照区为单位分配；</li><li>甚⾄在表中的数据特别多的时候，可以⼀次性分配多个连续的区。虽然可能造成⼀点点空间的浪费（数据不⾜填充满整个区），但是从性能⻆度看，可以消除很多的随机IO；也就说，尽量将物理位置不相邻的数据⻚，分配在相邻的位置；</li></ul></li></ul></li><li><p><strong>组（ExtendGroup）：将256个区划分为⼀个组，所以⼀个组的⼤⼩为256M</strong>；</p><ul><li><p>第⼀个组中第⼀个区的前三个⻚的类型的固定的，⽤来记录⼀些系统数据；</p></li><li><p>其余各组的前两个⻚的类型固定，也是记录⼀些系统数据；：</p><p>总体来说，表空间的结构为：</p></li></ul><p>很多个数据区分组（ExtendGroup），每个组中有256个数据区（Extend 256MB）,每个数据区中有64个数据页（1MB）,每个数据页中有很多数据行</p></li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729104152244.png" alt="表空间结构"></p><h2 id="3-数据⾏的物理结构"><a href="#3-数据⾏的物理结构" class="headerlink" title="3.数据⾏的物理结构"></a>3.数据⾏的物理结构</h2><p>MySQL的数据⾏，有⼏种⾏格式，在创建表的时候就可以指定，这⾥我们⽤默认的COMPACT格式来讲解下⾯的东⻄；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729141424118.png" alt="COMPACT行格式"></p><h3 id="3-1-变⻓字段的存储格式："><a href="#3-1-变⻓字段的存储格式：" class="headerlink" title="3.1 变⻓字段的存储格式："></a><strong>3</strong>.<strong>1</strong> 变⻓字段的存储格式：</h3><p>我们都知道在MySQL中有⼀个数据类型是varchar(x)，这个varchar是变⻓字段，也就是说字段的⻓度不固定；</p><p>（另外还有⼀些如VARBINARY(M)、TEXT、BLOG等类型的也是）那为了存储这种⻓度不固定的字段，是不是就需要额外的东⻄来记录各个字段真实的⻓度，不然你没法在物理结构上进⾏存储和读取的；也就是说这些编程字段占⽤的存储空间分为两部分：</p><ul><li><p>真正存储的数据内容； </p></li><li><p>数据占⽤的字节数；</p></li></ul><p>在Compact⾏格式中，所有变⻓字段的真实数据占⽤的字节数都存放在开头部分，⼀起形成了⼀个变⻓字段列表：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729111612578.png" alt="变长字段列表"></p><p><strong>这⾥为什么要逆序存储？</strong></p><p>这⾥的逆序存储，是为了提⾼缓存命中率，我们可以看到每个字段与它对应的⻓度信息，在内存中的距离是更近的（当然这⾥只有位置靠前的字段）；这样可以提⾼⾼速缓存中的内存命中率；（算是⼀个⽐较巧妙的设计）</p><h4 id="在这⾥做⼀个扩展："><a href="#在这⾥做⼀个扩展：" class="headerlink" title="在这⾥做⼀个扩展："></a>在这⾥做⼀个扩展：</h4><p><strong>⼤家应该都知道数组有哪些特性：</strong></p><ul><li><p>最重要的，<strong>随机查找的时间复杂度是O(1)</strong>；（什么叫随机查找，也就是⽐如arr[0],arr[5]）</p></li><li><p>那数组是怎么实现这种 O(1) 时间复杂度的随机访问呢？有⼏个点: </p><ul><li><p>数组中所有元素的⼤⼩都是相同的（也就是相同类型的数据）；假设为data_type_size ； </p></li><li><p>并且是连续的内存空间，没有内存碎⽚；假设基地址为 base_address ； </p></li><li><p>基于这样的存储结构，就可以有⼀个寻址公式：</p><ul><li>a[i]_address = base_address + i * data_type_size</li></ul></li></ul></li></ul><p>但是这样的数组，有没有什么<strong>缺点</strong>呢？</p><ul><li>所有元素的⼤⼩都是相同的，那也就是说你如果要存储不同类型的元素，你需要按照最⼤类型⼤⼩来申请内存空间； </li><li>假设你要存储的数据⼤⼩为1,5,20,100的元素，那申请的内存空间为4个100的，但是第⼀个元素的数据才1这么⼤，你⽤100来存，是不是就是极⼤程度的浪费存储空间；</li></ul><p>那这样缺点可以怎么去<strong>优化</strong>呢？ </p><ul><li>这⾥我们要跳出java的数组类型，不能按照Java⾥的int[]，String[]数组这种，都存储的是⼀样⼤⼩的；⽽把视线放到底层⼀点，底层语⾔层⾯，它可以存储不同类型的数据在数组⾥⾯；</li><li>这个时候再结合我们上⾯的对于要存储⻓度不固定的字段，就需要额外的东⻄来记录各个字段真实的⻓度；</li><li>那我们是不是可以记录数组的每个元素的⻓度，然后只⽤存储特定⼤⼩的元素即可；这时，在遍历的时候就知道每个节点的⻓度（占⽤内存⼤⼩），根据每个元素的⻓度，不就可以实现访问到所有元素了吗；</li></ul><p>示例：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729133248673.png" alt="数组"></p><p>其实，这⾥的扩展，也就是Redis中有⼀种数据结构，叫做压缩列表；它就是基于数组的思想，对于较⼩⻓度的字符串元素的空间进⾏压缩，也就是只分配它需要使⽤的⻓度的空间，然后增加⼀个length属性来记录每个元素的⼤⼩即可；</p><h3 id="3-2-NULL值字段的存储格式："><a href="#3-2-NULL值字段的存储格式：" class="headerlink" title="3.2 NULL值字段的存储格式："></a><strong>3</strong>.<strong>2</strong> NULL值字段的存储格式：</h3><p>在MySQL中，可以让你设置允许某些字段为NULL的，这些允许设置为NULL的字段，如果未赋值，显示出来就为NULL；</p><p>但是MySQL为了节约存储空间，并没有直接使⽤使⽤NULL这种字符串来存储空值的字段，⽽是直接使⽤⼆进制的bit位格式来存储；也就是⼀个bit位，代替了⾄少8个字节的存储空间；例如：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729141501575.png" alt="image"></p><p>这样就可以根据变长字段长度列表和NULL值列表解析出有几个变长字段，有几个NULL值字段，并读取整行数据。</p><h3 id="3-3-三个隐藏字段"><a href="#3-3-三个隐藏字段" class="headerlink" title="3.3 三个隐藏字段"></a><strong>3</strong>.<strong>3</strong> 三个隐藏字段</h3><p>InnoDB中，在每⾏数据⾥⾯，还会有⼀些隐藏字段，⽤来实现⼀些主键、事务、回滚等功能；分别为：</p><ul><li><strong>主键ID（DB_ROW_ID）</strong>：这是InnoDB特有的，InnoDB内部给你搞的⼀个标识；当你的表没有指定主键和唯⼀所以的时候，InnoDB内部会⾃动加⼀个DB_ROW_ID作为主键；</li><li><strong>事务ID（DB_TRX_ID</strong>）：表明这⾏数据是由哪个事务来更新的，在实现事务时需要⽤到；</li><li><strong>回滚指针（DB_ROLL_PTR）</strong>：⽤来指向undolog的回滚指针的，也是实现事务时需要⽤到</li></ul><table><thead><tr><th align="center">列名</th><th align="center">是否必须</th><th align="center">占用空间</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">row_id</td><td align="center">否</td><td align="center">6字节</td><td align="center">行ID，一行记录的唯一标识</td></tr><tr><td align="center">trx_id</td><td align="center">是</td><td align="center">6字节</td><td align="center">事务ID</td></tr><tr><td align="center">roll_pinter</td><td align="center">是</td><td align="center">7字节</td><td align="center">回滚指针</td></tr></tbody></table><h3 id="3-4-真实数据的存储"><a href="#3-4-真实数据的存储" class="headerlink" title="3.4 真实数据的存储"></a><strong>3</strong>.<strong>4</strong> 真实数据的存储</h3><p>在理清楚了上⾯的变⻓字段列表、NULL值列表、三个隐藏字段，那来看看具体的真实数据是怎么存储的；使⽤前⾯的示例：</p><p><strong>0x09 0x04 00000101 数据头 jack m xx_school</strong> </p><p>这⾥看⻅的是字段的值是直接这样存储的，但是在磁盘上存储的时候，会是这样直接存储字符串吗？</p><p>其实不是的，⽽是根据数据库指定的字符集编码，将这些字符串进⾏编码之后，再进⾏存储的：最终这⼀⾏会看起来如下所示：</p><p><strong>0x09 0x04 00000101 数据头 616161 636320 6262626262</strong></p><p>那最终，<strong>在磁盘中的数据⻚中的⼀⾏数据物理格式</strong>⼤概为：</p><table><thead><tr><th>记录的额外信息</th><th></th><th></th><th>记录的真实信息</th><th></th><th></th></tr></thead><tbody><tr><td>变长字段长度列表<br><strong>0x09 <br>0x04</strong></td><td>NULL值列表<br><strong>00000101</strong></td><td>数据头: <br><strong>00000000094C</strong>（DB_ROW_ID） <br><strong>00000000032D</strong>（DB_TRX_ID） <br>EA<strong>000010078</strong>E（DB_ROL_PTR）</td><td>列1<br><strong>616161</strong></td><td>列3<br><strong>636320</strong></td><td>列5<br><strong>6262626262</strong></td></tr></tbody></table><h3 id="3-5-数据头（记录头）"><a href="#3-5-数据头（记录头）" class="headerlink" title="3.5 数据头（记录头）"></a><strong>3</strong>.<strong>5</strong> 数据头（记录头）</h3><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729145107252.png" alt="image"></p><p>这⾥的数据头是数据⾏中⾮常重要的结构，它表示了这⾏数据的很多元数据信息，⼀共占⽤5个字节（也就是40bit位）；⾥⾯的各种属性为：</p><p><img src="C:%5CUsers%5Ckarakal%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220729143042383.png" alt="image"></p><ul><li><strong>两个预留位</strong>：可能就是历史原因，预留出来以防后续要使⽤的，但是没有使⽤；</li><li><strong>deleted_flag</strong>：⽤来标记当前记录⾏是否被删除了；（<strong>0代表未被删除，1代表被删除</strong>）；<ul><li>为什么要⽤这个删除标记？因为InnoDB中的数据⾏，被删除之后不是⻢上就从磁盘中删除了；</li><li>为什么？因为如果你直接删除，那还得去重新调整和排列磁盘中剩下的记录，这些是会带来性能损耗的；</li><li>所以，在删除的时候，只对这种记录添加⼀个标记即可；这些被标记删除了的记录⾏，会组成⼀个垃圾链表，这个垃圾链表中占⽤的空间也就是可重⽤的空间；当有新记录插⼊时，是可以重复覆盖掉这个空间的；</li></ul></li><li><strong>min_rec_flag</strong>：这个是⽤于构建索引的，B+树中每层⾮叶⼦节点中的最⼩的⽬录项记录，会被添加这个标记（值赋为1）；在后⾯介绍索引的时候会再介绍；</li><li>剩下的就放在后⾯讲数据⻚⾥⾯去融合；</li></ul><h2 id="4-数据⻚的物理结构"><a href="#4-数据⻚的物理结构" class="headerlink" title="4. 数据⻚的物理结构"></a><strong>4</strong>. 数据⻚的物理结构</h2><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729143409287.png" alt="数据页结构"></p><p>这是数据⻚的结构总览，16KB⼤⼩的存储空间被划分成为了这些部分，不同部分有不同的功能；有的部分占⽤的字节数是确定的，⽽有的部分占⽤的字节数是不确定的；</p><table><thead><tr><th align="center">名称</th><th align="center">空间</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">File Header（⽂件头部）</td><td align="center">38字节</td><td align="center">⻚的⼀些通⽤信息</td></tr><tr><td align="center">Page Header（⻚⾯头部</td><td align="center">56字节</td><td align="center">数据⻚的专有的一些信息</td></tr><tr><td align="center">Infimum + Supremum（最⼩记录和最⼤记录）</td><td align="center">26字节</td><td align="center">两个虚拟的⾏记录</td></tr><tr><td align="center">User Records（⽤户记录）</td><td align="center">不确定</td><td align="center">实际存储的⾏记录内容</td></tr><tr><td align="center">Free Space空闲空间（）</td><td align="center">不确定</td><td align="center">⻚中尚未使⽤的空间</td></tr><tr><td align="center">Page Directory（⻚⾯⽬录）</td><td align="center">不确定</td><td align="center">⻚中的某些记录的相对位置</td></tr><tr><td align="center">File Trailer（⽂件尾部）</td><td align="center">8字节</td><td align="center">校验⻚是否完整</td></tr></tbody></table><h3 id="4-1-⽤户记录在数据⻚中的存储"><a href="#4-1-⽤户记录在数据⻚中的存储" class="headerlink" title="4.1 ⽤户记录在数据⻚中的存储"></a><strong>4</strong>.<strong>1</strong> ⽤户记录在数据⻚中的存储</h3><p>⽤户记录（数据⾏）在数据⻚中的存储格式</p><p>MySQL中⽤户存储的数据⾏会按照指定的⾏格式存储到Records部分，但是在⼀开始⽣成⻚的时候，其实并没有UserRecords部分，每当插⼊⼀条记录时都会从FreeSpace部分（也就是尚未使⽤的存储空间）申请⼀个记录⼤⼩的空间，并将这个空间划分到UserRecords部分；</p><p>当FreeSpace部分的空间全部被UserRecords部分替代掉之后，也就意味着这个⻚使⽤完了，此时如果还有新的记录插⼊，就需要去申请新的⻚了；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729144835156.png" alt="image"></p><p>为了更清晰的讲解后⾯数据⾏与数据⻚的组织构成，⽤⼀个简单的示例表举例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">mysql> CREATE TABLE page_demo(  -> c1 INT,  -> c2 INT,  -> c3 VARCHAR(lOOOO) ,  -> PRIMARY KEY (c1)  -> ) CHARSET=ascii ROW_FORMAT=COMPACT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pagedemo表有其中c1、c2列⽤来存储整数，c3列⽤来存储字符串，且c1列为主键；所以InnoDB就没必要再创建那个DB_ROW_ID隐藏列了；</p><p>再往这个表中插⼊⼏条数据：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">mysql> INSERT INTO page_demo VALUES(1, 100, 'aaaa'), (2, 200, 'bbbb'), (3, 300, 'cccc'), (4, 400, 'dddd'); Query OK, 4 rows affected (0.00 sec) Records: 4 Duplicates: 0 Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了⽅便⼤家分析这些记录在⻚的User Records部分中是怎么表示的，我把记录中头信息和实际的列数据都⽤⼗进制表示出来了（其实是⼀堆⼆进制位），所以这些记录的示意图就是：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729145410053.png" alt="image"></p><p>看这个图的时候需要注意⼀下，各条记录在User Records中存储的时候并没有空隙，这⾥只是为了⼤家观看⽅便才把每条记录单独画在⼀⾏中。我们对照着这个图来看看记录头信息中的各个属性是啥意思：</p><ul><li><p><strong>delete_mask</strong> 这个属性标记着当前记录是否被删除，占⽤1个⼆进制位，值为0的时候代表记录并没有被删除，为1的时候代表记录被删除掉了。(将这个delete_mask位设置为1和将被删除的记录加⼊到垃圾 链表中其实是两个阶段)</p></li><li><p><strong>min_rec_mask</strong> B+树的每层⾮叶⼦节点中的最⼩记录都会添加该标记</p></li><li><p><strong>n_owned</strong></p></li><li><p><strong>heap_no</strong> </p><p>InnoDB 中把⼀条⼀条记录挨着排列的结构叫做 堆（heap）；为了⽅便管理这个堆，把每条记录在这个堆中的相对位置称为 heap_no；</p><ul><li>在⻚⾯前⾯⼀点的记录 heap_no 相对较⼩，⻚⾯后⾯的记录的 heap_no 相对较⼤，<strong>每申请⼀条新的记录时，heap_no ⽐前⾯的 加1</strong>； </li></ul><p>这个属性表示当前记录在本⻚中的位置，从图中可以看出来，我们插⼊的4条记录在本⻚中的位置分别是：2、3、4、5，怎么不⻅heap_no值为0和1的记录呢？</p><ul><li><p>这其实是设计InnoDB⾃动给每个⻚⾥边⼉加了两个记录，由于这两个记录并不是我们⾃⼰插⼊的，所以有时候也称为伪记录或者虚拟记录。这两个伪记录⼀个代表最⼩记录，⼀个代表最⼤记录。</p></li><li><p>两条记录的构造⼗分简单，都是由5字节⼤⼩的记录头信息和8字节⼤⼩的⼀个固定的部分组成的</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729151741870.png" alt="image"></p></li><li><p>由于这两条记录不是我们⾃⼰定义的记录，所以它们并不存放在⻚的User Records部分，他们被单独放在⼀个称为Infimum + Supremum的部分</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729151910124.png" alt="image"></p></li><li><p>这两条记录也算是堆中的⼀部分，所以他们的 heap_no 最⼩，为 0， 1</p></li></ul></li><li><p><strong>record_type</strong> 这个属性表示当前记录的类型</p><ul><li>0表示普通记录 也就是叶⼦节点中（数据⻚中）的普通数据⾏的记录；（⽤户⾃⼰插⼊的记录）</li><li>1表示B+树⾮叶⼦节点中（索引⻚中）的⽬录项（索引项）的记录</li><li>2表示最⼩记录</li><li>3表示最大记录</li></ul></li><li><p><strong>next_record</strong> 表示从当前记录的真实数据到下⼀条记录的真实数据的地址偏移量</p><p>如果这个属性值为 正，表示下⼀条记录在当前记录的后⾯；如果这个属性值为负，表示下⼀条记录在当前记录的前⾯；如图中：</p><ul><li><p>第⼀条记录的next_record值为32，意味着从第⼀条记录的真实数据的地址处向后找32个字节便是下⼀条记录的真实数据</p></li><li><p>第四条记录的 next_record 为 -111，就表示从第四条记录向前找 111 字节便是下⼀条记录的真实数据的地址；（其实也就是Supremum记录了）</p></li><li><p>下⼀条记录指得并不是按照我们插⼊顺序的下⼀条记录，⽽是按照主键值由⼩到⼤的顺序的下⼀条记录</p></li><li><p>⽽且规定Infimum记录（也就是最⼩记录） 的下⼀条记录就本⻚中主 键值最⼩的⽤户记录，⽽本⻚中主键值最⼤的⽤户记录的下⼀条记录就是 Supremum记录（也就是最⼤记录）</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729152054361.png" alt="image"></p></li><li><p>从图中可以看出来，我们的记录按照主键从⼩到⼤的顺序（<strong>这里体现了MySQL数据的有序性</strong>）形成了⼀个单链表（<strong>Infimum -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; Supremum</strong> ）。最⼤记录的next_record的值为0，这也就是说最⼤记录是没有下⼀条记录了，它是这个单链表中的最后⼀ 个节点。</p><ul><li>为什么 next_record 指向的是下⼀条记录⾏的next_record位置呢？⽽不是指向下⼀条记录⾏的起始位置呢？</li><li>原因是这个位置刚好，向左读取就是各种记录头的信息，向右读取就是真实的数据；⽐较巧妙的⼀个设计</li></ul></li><li><p>如果从中删除掉⼀条记录，这个链表也是会跟着变化的，⽐如我们把第2条记录删掉：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729152156354.png" alt="image"> </p></li></ul></li><li><p>从图中可以看出来，删除第2条记录前后主要发⽣了这些变化： </p><ul><li><p>第1条记录的next_record指向了第3条记录。</p></li><li><p>第2条记录并没有从存储空间中移除，⽽是把该条记录的delete_mask值设置为1。 </p></li><li><p>第2条记录的next_record值变为了0，意味着该记录没有下⼀条记录了。 </p></li><li><p>还有⼀点你可能忽略了，就是最⼤记录的n_owned值从5变成了4。 </p></li></ul><p>如果我们再次把这条记录插⼊到表中，会发⽣什么事呢： </p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729154033421.png" alt="image-20220729154033421"></p><p>从图中可以看到，InnoDB并没有因为新记录的插⼊⽽为它申请新的存储空间，⽽是直接<strong>复⽤了原来被删除记录的存储空间</strong></p><p>所以，不论我们怎么对⻚中的记录做增删改操作，InnoDB始终会维护⼀条记录的单链表，链表中的各个节点是按照主键值由⼩到⼤的顺序连接起来的</p></li></ul><h3 id="4-2-数据⻚中的其他属性"><a href="#4-2-数据⻚中的其他属性" class="headerlink" title="4.2 数据⻚中的其他属性"></a><strong>4</strong>.<strong>2</strong> 数据⻚中的其他属性</h3><h4 id="4-2-1-File-Header"><a href="#4-2-1-File-Header" class="headerlink" title="4.2.1 File Header"></a><strong>4</strong>.<strong>2</strong>.<strong>1</strong> File Header</h4><p>File Header通⽤于各种类型的数据⻚，也就是说各种类型的数据⻚都会以 File Header 作为第⼀个组成部分，⽤它来描述⼀些通⽤信息，占⽤固定的38 字节；由以下内容组成：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729154219782.png" alt="image"></p><p>我觉得需要了解的就三个东⻄： </p><ul><li><p><strong>FIL_PAGE_OFFSET</strong>：⻚号；每个数据⻚都有⾃⼰的编号，InnoDB通过⻚号来唯⼀确定⼀个⻚； </p></li><li><p><strong>FIL_PAGE_PREV</strong>：上⼀个数据⻚的⻚号；FIL_PAGE_NEXT：下⼀个数据⻚的⻚号； </p></li><li><p><strong>FIL_PAGE_TYPE</strong>：当前⻚的类型；InnoDB为了不同的⽬的将数据⻚分为不同的类型：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729154422969.png" alt="image"></p><ul><li>其中⽤来存放记录⾏的数据⻚类型其实就是 <strong>FIL_PAGE_INDEX</strong>，也是索引⻚</li></ul></li></ul><h4 id="4-2-2-Page-Header"><a href="#4-2-2-Page-Header" class="headerlink" title="4.2.2 Page Header"></a><strong>4</strong>.<strong>2</strong>.<strong>2</strong> Page Header</h4><p>Page Header <strong>⽤于记录存储在数据⻚中的记录的状态信息</strong>；如：数据⻚中已经存储了多少条记录、Free Space 在⻚⾯中的偏移量、⻚⽬录中存储了多少个槽等；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729154546388.png" alt=""></p><p>​             这些东⻄⼤概了解⼀下就⾏了，没必要去深究和记住；</p><h4 id="4-2-3-Page-Directory"><a href="#4-2-3-Page-Directory" class="headerlink" title="4.2.3 Page Directory"></a><strong>4</strong>.<strong>2</strong>.<strong>3</strong> Page Directory</h4><p>Page Directory（⻚⽬录）；这个也是数据⻚中最重要的属性之⼀，<strong>它跟 Infimum + Supremum 、User Records ⼀起实现了记录⾏在数据⻚中的存储</strong>；</p><p>从前⾯的介绍⾥⾯，我们应该知道了记录⾏在数据⻚中的存储格式为：Infimum+按每⾏主键ID值从⼩到⼤串联成的单向链表+Supremum；</p><p>所以当我们要查找这样⼀⾏记录时，该怎么查找呢？</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from page_demo where c1 = 6;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最简单直接的办法，肯定是从Infimum记录开始，沿着单向链表⼀条⼀条的往后遍历着找，总会找到（或者找不到）；</p><p>当数据⻚中记录较少时，这样查找肯定没有啥问题；但是当⻚中存储了⽐较多的记录⾏，这样的遍历操作肯定是较慢的，肯定不能使⽤这种来做为⼯业化软件的实现的；</p><p><strong>InnoDB为了解决这个问题，将数据⻚中的多条记录划分成了⼀个⼀个的组，这些组也叫做槽（slot）；</strong></p><p>这些slot也就是存<strong>在于PageDirectory中</strong>；</p><ul><li><strong>⼀个slot中的记录⾏数为4-8⾏</strong>；</li><li><strong>每个slot指向的是</strong>这⼀组记录的最后⼀条记录（也就是<strong>组中最⼤的那条记录</strong>）的物理地址；</li><li>可以将这条记录看做这组记录的leader，<strong>它的数据头⾥⾯的n_owned属性会记录它这组⼀共有⼏条记录</strong>；</li></ul><p><strong>示意图：</strong></p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220729155959265.png" alt="image"></p><p><strong>InnoDB对每个分组中的记录条数</strong>是有规定的： </p><ul><li>对于<strong>最⼩记录所在的分组只能有 1 条记录</strong>，</li><li><strong>最⼤记录所在的分组拥有的记录条数只能在 1~8 条之间</strong>，</li><li><strong>剩下的分组中记录的条数范围只能在是 4~8 条之间</strong>。</li></ul><p>插⼊记录⾏时，slot的动态过程为：</p><ul><li><p>初始情况下，⼀个数据⻚中只有Infimum和Supremum两条记录，它们分属于两个slot中的；也就是说，⻚⽬录中初始就有两个slot，分别指向了Infimum和Supremum的地址偏移量；</p></li><li><p>之后每插⼊⼀条记录，都会从⻚⽬录中找到，对应记录的主键ID⽐待插⼊记录的的差值最⼩的slot（因为slot指向的是这组记录中最⼤的⼀⾏记录⾏）；然后将这个slot指向的记录⾏的n_owned值+1；表示这组⼜添加了⼀⾏记录，直到该组中的记录数等于8个；</p></li><li><p>当⼀个组中的记录⾏数等于8之后，再插⼊⼀条记录，会将这个组中的记录拆分成两个组，其中⼀个组中4条记录，另外⼀个组中5条记录；这个拆分过程会在PageDirectory中新增⼀个slot，指向新增分组中的最⼤的记录⾏的地址；</p><p>我们向表中加入了12条记录，现在就⼀共有16条正常的记录了（包括最⼩和最⼤记录），这些记录被分成了5个组，如图所示：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">mysql> INSERT INTO page_demo VALUES(5, 500, 'eeee'), (6, 600, 'ffff'), (7, 700, 'gggg'), (8, 800, 'hhhh'), (9, 900, 'iiii'), (10, 1000, 'jjjj'), (11, 1100, 'kkkk'), (12, 1200, 'llll'), (13, 1300, 'mmmm'), (14, 1400, 'nnnn'), (15, 1500, 'oooo'), (16, 1600, 'pppp'); Query OK, 12 rows affected (0.00 sec) Records: 12 Duplicates: 0 Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:%5CUsers%5Ckarakal%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220729160357368.png" alt="image-20220729160357368"></p></li></ul><p>那设计了slot之后，⼜<strong>怎么来对数据⻚中的记录⾏进⾏查找</strong>呢？ </p><ul><li>因为 slot 是挨着的，⽽⾥⾯记录的记录⾏是从⼩到⼤依次排序的，所以可以使⽤⼆分法快速进⾏查找； </li></ul><p>⼆分法查找：</p><ul><li><p>计算中间槽的位置：(0+4)/2=2，所以查看槽2对应记录的主键值为8，⼜因为8 &gt; 5，所以设置high=2，low保持不变；</p></li><li><p>重新计算中间槽的位置：(0+2)/2=1，所以查看槽1对应的主键值为4。所以设置low=1，high保持不变。</p></li><li><p>因为high - low的值为1，所以确定主键值为5的记录在槽2对应的组中，接下来就是通过遍历槽2对应的组的链表来进⾏查找了。</p></li><li><p>所以从这个分组内的最⼩的记录⾏（第⼀条记录⾏）开始，遍历进⾏查找即可；（这个遍历的过程，也就是next_record指针的查找过程）</p><ul><li>这⾥的怎么找最⼩的记录⾏？因为没有地⽅记录了分组中最⼩的记录⾏；</li><li>所以需要找到当前slot2的前⼀个分组即slot1，slot1指向的就是前⼀个分组的最⼤记录⾏，那这个记录⾏的next_record即为slot2分组的最⼩的记录⾏；</li></ul></li><li><p>由于⼀个组中包含的记录最多是8条，所以遍历⼀个组中所有记录的代价是很⼩的；等于就是将单向链表的遍历，给⼆分优化了，将n的时间复杂度，优化到了log(n)；那这个时候，⼤家想⼀下，对于单向链表，还有什么⽅式可以优化查找的时间复杂度？（跳表，也是log(n)，Redis⾥⾯就⽤的这个数据结构）</p></li></ul><h4 id="4-2-4-Free-Space"><a href="#4-2-4-Free-Space" class="headerlink" title="4.2.4 Free Space"></a><strong>4</strong>.<strong>2</strong>.<strong>4</strong> Free Space</h4><p>Free Space 就是空闲的可以分配的空间，不⽤特别去关注它； </p><h4 id="4-2-5-File-Trailer"><a href="#4-2-5-File-Trailer" class="headerlink" title="4.2.5 File Trailer"></a><strong>4</strong>.<strong>2</strong>.<strong>5</strong> File Trailer</h4><p>File Trailer 也就是⽂件的尾部，通⽤与所有类型的⻚； </p><p>它主要的功能是 和 File Header ⼀起 做⻚⾯的检验和，检测⼀个⻚是否完整（这个完整说的将内存中的 </p><p>脏⻚刷新到磁盘的时候，中间是否有断电等异常，导致只刷进去了部分数据等）；</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5</strong>. 总结</h2><p>到这⾥最后了，我们⼀起总结⼀下<strong>InnoDB中数据⻚和数据⾏的存储结构</strong>： </p><ul><li><p>多个数据⻚组成了⼀个双向链表，每个数据⻚中的记录⾏ 会按照主键ID从⼩到⼤的顺序组成⼀个单向链表； </p></li><li><p>每个数据⻚中会将存储在它⾥⾯的记录⾏分成多个组；并⽣成⼀个⻚⽬录，在这个⻚⽬录中存在⼀个slot数组，数组中每个slot代表⼀个分组，slot 指向的是这个组最⼤的数据⾏； </p></li><li><p>在通过主键ID查找时，先通过⼆分法查找对对应的slot，然后再遍历这个slot中的所有记录⾏即可</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>InnoDB引擎的架构设计</title>
      <link href="2022/07/04/InnoDB%E5%BC%95%E6%93%8E%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
      <url>2022/07/04/InnoDB%E5%BC%95%E6%93%8E%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h1 id="以⼀个Update语句，了解InnoDB引擎的架构设计"><a href="#以⼀个Update语句，了解InnoDB引擎的架构设计" class="headerlink" title="以⼀个Update语句，了解InnoDB引擎的架构设计"></a>以⼀个Update语句，了解InnoDB引擎的架构设计</h1><h2 id="1-buffer-pool读写操作"><a href="#1-buffer-pool读写操作" class="headerlink" title="1.buffer pool读写操作"></a><strong>1</strong>.buffer pool读写操作</h2><p>InnoDB存储引擎使⽤了buffer pool内存缓冲区来提升性能；</p><ul><li><strong>读操作</strong>：如果要读的数据⻚在内存buffer pool中时，就直接从内存中读取后返回；不在buffer pool</li></ul><p>时，就先从磁盘中把数据⻚读取到buffer pool，再返回；</p><ul><li><strong>写操作</strong>：如果要更新的数据⻚在内存buffer pool中时，就直接更新内存；数据不在内存中时，不会</li></ul><p>直接从磁盘中加载数据⻚到buffer pool中，⽽是记录到change buffer中；</p><h2 id="2-change-buffer"><a href="#2-change-buffer" class="headerlink" title="2.change buffer"></a><strong>2</strong>.change buffer</h2><p>这⾥先简单介绍⼀下change buffer：</p><ul><li><p><strong>change buffer</strong>：是⼀个可以持久化的数据，⾸先是存在于内存，但是也会被写⼊到磁盘；</p></li><li><p><strong>原理</strong>：</p><ul><li>如果要更新的数据⻚不在内存中，InnoDB会将这些更新操作先写到change buffer中，这样就不需要从磁盘中读⼊这个数据⻚再进⾏更新了；</li><li>在下次查询需要访问到这个数据⻚，或者后台线程定时执⾏时；会进⾏merge操作，将change buffer中的内容merge到buffer pool中对应的数据⻚中；</li></ul></li><li><p><strong>好处</strong>：更新的时候，先将更新操作记录在change buffer，减少读磁盘，这样语句的执⾏速度会得到明显的提升（<strong>减少随机IO的访问</strong>）；</p><ul><li>另外，数据读⼊内存是要占⽤buffer pool的，这样也可能淘汰⼀些使用率不高的热数据，降低内存占⽤率；</li><li>在merge的时候，change buffer中记录的变更越多，收益就越⼤；（因为减少了很多的磁盘读取）</li></ul></li><li><p><strong>适⽤场景</strong>：</p><ul><li><strong>（适合）写多读少的业务</strong>；<ul><li>数据⻚在写完之后⻢上被访问的概率⽐较⼩，所以此时change buffer的使⽤效果最好；常⻅业务模型为账单类、⽇志类系统；</li></ul></li><li><strong>（不适合）写后⻢上就做查询的业务</strong>；<ul><li>如果写了之后⻢上就会做查询，将更新先记录在change buffer，但由于⻢上就要访问，就会⽴即触发merge过程；这样随机访问IO不会减少，反⽽增加了维护change buffer的代价；</li></ul></li></ul></li><li><p><strong>⼤⼩设置</strong>：</p><ul><li>changebuffer使⽤的是buffer pool的内存，因此不能⽆限增⼤；</li><li>通过参数<strong>innodb_change_buffer_max_size</strong>来动态设置；这个参数设置为50的时候，表示最⼤能占⽤buffer pool的50%；</li></ul></li></ul><h2 id="3-WAL（Write-AheadLogging）"><a href="#3-WAL（Write-AheadLogging）" class="headerlink" title="3.WAL（Write-AheadLogging）"></a><strong>3</strong>.WAL（Write-AheadLogging）</h2><ul><li><p><strong>WAL：Write-AheadLogging</strong>；先写⽇志，再写磁盘（数据真实写到磁盘的数据⻚上）；</p></li><li><p>当要更新⼀条记录的时候，不会直接更新磁盘上的数据；</p><ul><li>⽽是先更新内存中的数据，然后为了避免崩溃会把更新的数据写⼊到⼀个⽇志⽂件中；</li><li>然后InnoDB引起在适当的时候，将内存中的数据刷新到磁盘中持久化；</li></ul></li><li><p>这⾥可能会有⼀个疑问：将更新的数据写⼊到⽇志⽂件中，不也是写了⼀次磁盘？为什么不将数</p></li></ul><p>据直接就写到磁盘？这⾥就涉及到⼀个概念：<strong>顺序IO和随机IO</strong>；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220728142151040.png" alt="顺序IO及随机IO"></p><p>○<strong>顺序IO</strong>：指读写操作的访问地址连续，所以顺序IO的性能很好；（⼀般数据备份、写⽇志等是顺序IO）</p><p>○<strong>随机IO</strong>：读写操作的的访问地址不连续，随机分布在磁盘的地址空间中，所以可想⽽知随机IO的性能很差；（⼀般SQL⽂件是随机IO）</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220728142341455.png" alt="磁盘IO"></p><p>从这个对⽐图中可看出，差距基本在⼏个数量级以上</p><p>所以，<strong>MySQL这样设计的⽬的</strong>就是：</p><ul><li><p>如果更新操作直接去更新磁盘上的数据⽂件，将会是随机IO，性能⾮常差；</p></li><li><p>当只更新内存，然后去写到redolog⽇志⽂件中；此时写⼊执⾏的是顺序IO，性能很好；</p></li></ul><h2 id="4-InnoDB更新流程"><a href="#4-InnoDB更新流程" class="headerlink" title="4.InnoDB更新流程"></a><strong>4</strong>.InnoDB更新流程</h2><p>这⾥就简单⼀点，省略掉change buffer的应⽤和merge的过程，近似看做：</p><p>当要更新的数据⻚不在内存buffer pool中时，先从磁盘中将数据⻚读到bufferpool中，再更新内存中的数据⻚；</p><p><strong>InnoDB存储引擎使用Buffer Pool缓冲区提升性能</strong>：</p><ul><li><strong>读操作：</strong>如果读取的数据页在Buffer Pool中直接返回；不在时，则在磁盘中查询，并将数据页加载到BufferPool中，再返回。</li><li><strong>写操作：</strong>若需要更新的数据页在Buffer Pool中直接更新BufferPool中的数据页；不在时，从磁盘中加载数据页，再更新</li></ul><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220728183809478.png" alt="image-20220728183809478"></p><h3 id="1-更新时，这条记录所在的数据页不在Buffer-Pool中，则先将数据页加载到Buffer中"><a href="#1-更新时，这条记录所在的数据页不在Buffer-Pool中，则先将数据页加载到Buffer中" class="headerlink" title="1.更新时，这条记录所在的数据页不在Buffer Pool中，则先将数据页加载到Buffer中"></a>1.更新时，这条记录所在的数据页不在Buffer Pool中，则先将数据页加载到Buffer中</h3><h3 id="2-维护undoLog日志，InnoDB为了支持事务回滚，先把原来的的数据记录到undoLog日志（逻辑日志），具体体现为delete操作时写入insert语句，发生回滚时执行insert"><a href="#2-维护undoLog日志，InnoDB为了支持事务回滚，先把原来的的数据记录到undoLog日志（逻辑日志），具体体现为delete操作时写入insert语句，发生回滚时执行insert" class="headerlink" title="2.维护undoLog日志，InnoDB为了支持事务回滚，先把原来的的数据记录到undoLog日志（逻辑日志），具体体现为delete操作时写入insert语句，发生回滚时执行insert"></a>2.维护undoLog日志，InnoDB为了支持事务回滚，先把原来的的数据记录到undoLog日志（逻辑日志），具体体现为delete操作时写入insert语句，发生回滚时执行insert</h3><h3 id="3-更新BufferPool中的数据，此时BufferPool中name-’bob’-磁盘中name-”fox”-数据不一致，BufferPool中这行数据为脏数据，所在数据页为脏页"><a href="#3-更新BufferPool中的数据，此时BufferPool中name-’bob’-磁盘中name-”fox”-数据不一致，BufferPool中这行数据为脏数据，所在数据页为脏页" class="headerlink" title="3.更新BufferPool中的数据，此时BufferPool中name=’bob’,磁盘中name=”fox”,数据不一致，BufferPool中这行数据为脏数据，所在数据页为脏页"></a>3.更新BufferPool中的数据，此时BufferPool中name=’bob’,磁盘中name=”fox”,数据不一致，BufferPool中这行数据为脏数据，所在数据页为脏页</h3><h3 id="4-若此时发生宕机，Buffer-Pool中数据丢失，破坏了一致性，所以在执行上述操作时，应将脏页写入redoLog中，在MySQL恢复后更新磁盘中的数据。"><a href="#4-若此时发生宕机，Buffer-Pool中数据丢失，破坏了一致性，所以在执行上述操作时，应将脏页写入redoLog中，在MySQL恢复后更新磁盘中的数据。" class="headerlink" title="4.若此时发生宕机，Buffer Pool中数据丢失，破坏了一致性，所以在执行上述操作时，应将脏页写入redoLog中，在MySQL恢复后更新磁盘中的数据。"></a>4.若此时发生宕机，Buffer Pool中数据丢失，破坏了一致性，所以在执行上述操作时，应将脏页写入redoLog中，在MySQL恢复后更新磁盘中的数据。</h3><p><strong>WAL机制：先写日志再写磁盘，为提升效率，MySQL提供了redolog Buffer,在事务提交时根据策略刷入。</strong></p><h3 id="5-事务提交时，redolog-Buffer刷盘策略（Innodb-flush-log-at-trx-commit）："><a href="#5-事务提交时，redolog-Buffer刷盘策略（Innodb-flush-log-at-trx-commit）：" class="headerlink" title="5.事务提交时，redolog Buffer刷盘策略（Innodb_flush_log_at_trx_commit）："></a>5.事务提交时，redolog Buffer刷盘策略（Innodb_flush_log_at_trx_commit）：</h3><p>0:每次事务提交时，数据都只存在redoLog Buffer中,不刷入磁盘（MySQL宕机可能会丢失数据）<br>1：每次事务提交时，数据把redolog Buffer的数据刷入磁盘（MySQL不会丢失数据）<br>2：每次事务提交时，数据把redolog Buffer的数据刷入OS Cache，而不是写入磁盘，所有速度很快，效率基本接近0的配置（仍可能丢失数据）</p><h3 id="6-事务提交时除了写入redoLog还会写入binLog（归档日志）"><a href="#6-事务提交时除了写入redoLog还会写入binLog（归档日志）" class="headerlink" title="6.事务提交时除了写入redoLog还会写入binLog（归档日志）"></a>6.事务提交时除了写入redoLog还会写入binLog（归档日志）</h3><p><strong>binLog是逻辑日志，记录的是原始SQL</strong></p><p><strong>binLog三种格式：</strong></p><ul><li><strong>1：Statement每一条会修改数据的sql都会被记录在binlog中</strong></li></ul><p>​    优点：不需要记录每一行的变化，减少了binlog日志量，节省了IO，提高性能</p><p>​    缺点：由于记录的只是执行语句，为了这些语句能在slave上正常执行，因此还必须记录每条语句执行时的相关信息，以保证所有语句能在slave得到和master端执行时相同的结果。另外mysql的复制，像一些特定函数功能，slave可与master上要保持一致会有很多相关问题（如sleep()函数、last_inster_id()、以及userr-definedfunctions(udf)会出现问题），以下操作也会出现问题：</p><pre><code>原始：id    name    time1    a        2022-06-0100:00:002    b        2022-06-0300:00:00update tb set name="bob" where `order` &gt; 1 and time &lt; "2022-07-0100:00:00" limit 1id和time字段都有索引，这条SQL可能在主库执行时使用order索引，更新了id=1这条记录，但是在从库使用的是time这个索引，更新的是id=2这条记录，主从不一致的问题就产生了。主库id    name    time1    bob        2022-06-0100:00:002    b        2022-06-0300:00:00从库id    name    time1    a        2022-06-0100:00:002    bob        2022-06-0300:00:00</code></pre><ul><li><strong>2.ROW：不设置sql语句上下文相关信息，仅保存哪条记录被修改</strong>（最常用）</li></ul><p>优点：binlog中可以不记录执行的sql语句的上下文相关的信息，仅需要记录哪一条记录被修改成什么，所以rowslave的日志内容会非常清楚的记录下每一行数据修改的细节，而且不会出现某些特定情况下的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题</p><p>缺点：所有执行的语句当记录到日志中时，都将以每行的记录来记录，这样可能会产生大量的日志内容，比如一条update语句，修改多条记录，则binlog中每一条修改都会被记录，这样造成binlog的日志量会很大，特别是当执行altertable之类的语句时，由于表结构修改，每条记录都发生变化，那么该表每一条记录都会记录到日志中。</p><p><strong>3.MiXED：是以上两种level的混合使用</strong></p><p>一般的语句修改使用Statement格式保存binlog，如一些函数，statement无法完成主从复制的操作，则采用ROW格式保存binlog。mysql会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是从Statement和ROW中之间选择一种。新版本的mysql中对ROW模式也做了优化，并不是所有的操作都会以ROW格式记录，像遇到表结构变更的时候就会以Statement模式来记录，至于update和delete等修改数据的语句还是会记录所有行的变更。</p><p><strong>binLog属于Server层而不是InnoDB引擎的日志，主要作用是归档，用于数据恢复、主从同步等。</strong></p><p>同样也提供了<strong>binlog Cache</strong>（基于内存，每个线程一个），在事务提交时，根据<strong>策略（sync_binlog）</strong>将Cache中的数据刷入binLog文件中：</p><p><strong>0：每次提交事务都只写入（Write）文件系统的OSPageCache，而不执行数据持久化到磁盘中（Fsync）</strong></p><p><strong>1：每次提交事务都会执行Fsync</strong></p><p><strong>N:(N&gt;1)每次提交事务都只执行Write，积累到n个事务之后再执行Fsync</strong></p><h3 id="7-基于redoLog和binLog的二阶段提交（保证数据一致性）"><a href="#7-基于redoLog和binLog的二阶段提交（保证数据一致性）" class="headerlink" title="7.基于redoLog和binLog的二阶段提交（保证数据一致性）"></a>7.基于redoLog和binLog的二阶段提交（保证数据一致性）</h3><p>在第5步写入的redoLog状态为prepare，等到binLog也写完之后，再将redoLog的状态修改为commint，只有在redoLog状态为commit时，才会认为本次事务执行成功（保证redoLog和binLog数据一致性，主要保证主从数据一致性）</p><h3 id="8-刷脏：在经过第3步之后，内存中的数据与磁盘中的数据不一致了，后台有一个IO线程会在系统相对空闲的时间，将BufferPool中的数据落盘"><a href="#8-刷脏：在经过第3步之后，内存中的数据与磁盘中的数据不一致了，后台有一个IO线程会在系统相对空闲的时间，将BufferPool中的数据落盘" class="headerlink" title="8.刷脏：在经过第3步之后，内存中的数据与磁盘中的数据不一致了，后台有一个IO线程会在系统相对空闲的时间，将BufferPool中的数据落盘"></a>8.刷脏：在经过第3步之后，内存中的数据与磁盘中的数据不一致了，后台有一个IO线程会在系统相对空闲的时间，将BufferPool中的数据落盘</h3><p>innodb_io_capacity：参数定义了InnoDB后台任务每秒可用的I/O操作数（IOPS）</p><p>补充：</p><p>上⾯说到，数据写到buffer pool之后，要写到redolog中；但是也不是直接写⼊到redolog⽇志⽂件</p><p>中的，⽽是写⼊到redolog buffer中的，⽽redologbuffer中的数据是在事务提交的时候才刷⼊到磁</p><p>盘中；如果这个时候，事务还没有提交，MySQL服务器就崩了，那会不会导致数据丢失？</p><p>⾸先，内存buffer pool中的数据肯定没有了，然后redolog buffer中的数据也没有了；那这个时候算是</p><p>数据丢失吗？</p><p>其实是不算的，因为事务都没有提交，就代表你这条语句没有执⾏成功，语句都没有执⾏成功，那肯定你所有想要的结果都不能算数；</p><p><strong>但是在事务还没有提交时，redolog buffer中的数据是有可能被持久化到磁盘中的：</strong></p><p>InnoDB后台有⼀个线程，每隔1s就会把redolog buffer中的数据，调⽤write写⼊到page cache中，然后再调⽤fsync持久化到磁盘的redolog⽇志⽂件中；redolog buffer占⽤的空间即将达到innodb_log_buffer_size⼀半的时候，后台线程会主动写</p><p>盘（write）；并⾏的事务提交的时候，顺带将这个事务的redolog buffer持久化到磁盘；（假设⼀个事务A执⾏到⼀半，已经写了⼀些redolog到buffer中，这时候有另外⼀个线程的事务B提交，如果innodb_flush_log_at_trx_commit设置的是1，那么按照这个参数的逻辑，事务B要把redolog buffer⾥的⽇志全部持久化到磁盘。这时候，就会带上事务A在redolog buffer⾥的⽇志⼀起持久化到磁盘）</p><p>，</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>buffer pool 及CRUD动态过程</title>
      <link href="2022/06/29/Buffer%20Pool%20%E5%8F%8A%20CRUD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E7%A8%8B/"/>
      <url>2022/06/29/Buffer%20Pool%20%E5%8F%8A%20CRUD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-buffer-pool-介绍"><a href="#1-buffer-pool-介绍" class="headerlink" title="1. buffer pool 介绍"></a>1. buffer pool 介绍</h1><p>InnoDB存储引擎使用了 buffer pool 内存缓冲区来提升性能 ，buffer pool 是一块内存区域，是基于内存的一个组件，也是我们必须要搞清楚的核心组件，它里面缓存了磁盘的 数据页 上真实的数据；<br>我们对于 数据库 的增删改查的操作，不会直接跟磁盘打交道，而是在 buffer pool 上进行，然后配合 undo log、redo log、binlog、刷盘机制 等一起来实现了数据写入流程；</p><h4 id="buffer-pool-的读写操作："><a href="#buffer-pool-的读写操作：" class="headerlink" title="buffer pool 的读写操作："></a>buffer pool 的读写操作：</h4><ul><li><strong>读操作</strong>：如果要读的数据页在内存 buffer pool 中时，就直接从内存中读取后返回；不在buffer pool时，就先从磁盘中把数据页读取到buffer pool，再返回；</li><li><strong>写操作</strong>：如果要更新的数据页在 内存buffer pool中时，就直接更新内存；数据不在内存中时，不会直接从磁盘中加载数据页到 buffer pool 中，而是记录到 change buffer 中；</li></ul><h1 id="2-buffer-pool-结构"><a href="#2-buffer-pool-结构" class="headerlink" title="2. buffer pool 结构"></a>2. buffer pool 结构</h1><h2 id="2-1-几个概念"><a href="#2-1-几个概念" class="headerlink" title="2.1 几个概念"></a>2.1 几个概念</h2><ul><li><p><strong>数据页</strong>：</p><ul><li><p>数据库中的核心数据模型一般为：表 + 行 + 字段；也就是说 数据库里面有一个一个的表，表里面有很多行数据，一行数据里面有很多的字段；</p></li><li><p>但是这些数据行，并不是直接一行一行的放在 buffer pool 中的，而是被抽象和组织 成了 数据页 的概念；它是把很多行数据放在一个数据页里，以数据页为单位来存储，磁盘文件中有多个数据页；</p></li><li><p>默认情况下，数据页 的大小是 16KB，其中包含了 很多元数据 和 实际的数据行；</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629172102305.png" alt="image-20220629172102305"></p></li></ul></li><li><p><strong>缓存页</strong>：MySQL 在执行的时候，会把 磁盘 中的数据页加载到内存 buffer pool 中；所以在 buffer pool 中就划分出来了缓存页，缓存页跟数据页一一对应，也是 16KB；</p></li><li><p><strong>缓存页的元数据</strong>：对于每个缓存页，都有一个元数据结构（也就是描述信息）；这个元数据中包含了这个缓存页中：加载的数据页所属的表空间、数据页的编号、缓存页在 buffer pool 中的位移地址、组成各种链表的指针 等；</p></li></ul><h2 id="2-2-初始化-buffer-pool"><a href="#2-2-初始化-buffer-pool" class="headerlink" title="2.2 初始化 buffer pool"></a>2.2 初始化 buffer pool</h2><p>在 MySQL 启动的时候，会按照 buffer pool 的参数（innodb_buffer_pool_size）的大小，申请一块内存区域；<br>申请好之后，会按照 16KB 的缓存页大小 + 800byte 左右的元数据结构大小，在 buffer pool 中划分出一个个的缓存页以及对于的元数据；其中所有元数据在前面一起，缓存页在后面；</p><p>大概结构为：<br><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629173156202.png" alt="image-20220629173156202"></p><p>最初的缓存页都是空的，当MySQL运行起来之后，对数据执行 增删改查，就会执行以下一系列操作：</p><ul><li>数据页加载到缓存页；</li><li>buffer pool 中被修改过的缓存页（也就是脏页），会被线程定时刷入到磁盘中的数据页（刷脏）；</li><li>当 buffer pool 中缓存页满时，又会进行淘汰一些缓存页，淘汰的时候也要刷脏；</li></ul><p>这些操作都是一个动态的过程，随着 MySQL 的运行（也就是SQL语句的执行）来动态演变的；</p><h4 id="下面就来看看这些动态演变的过程："><a href="#下面就来看看这些动态演变的过程：" class="headerlink" title="下面就来看看这些动态演变的过程："></a>下面就来看看这些动态演变的过程：</h4><p>当进行CRUD操作时，需要把数据页加载到缓存页中，此时就需要知道哪些缓存页是空的，</p><p><strong>怎么知道哪些缓存页是空的</strong>？</p><p>MySQL为此设计了一个Free链表，本质是一个双向链表，每个节点都是一个缓存页的元数据</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629190034660.png" alt="image-20220629190034660"></p><p>使用free链表将所有空闲缓存页的元数据连接起来，free_next 和free_pre是元数据的两个属性，使用一个基础节点来连接头尾节点，并记录有多少个空闲节点；</p><p>所以当需要加载一个数据页到Buffer Pool时，（1）首先从free链表中获取一个元数据节点，（2）再找到对应的空闲缓存页，就可以将数据加载到缓存页中了，（3）最后再把元数据从free链表中删除。</p><p><strong>那么在加载数据页时怎么知道缓存页中是否缓存过了呢？</strong></p><p>MySQL为此设计了一个哈希表的数据结构</p><table><thead><tr><th align="center">key</th><th align="center">value</th></tr></thead><tbody><tr><td align="center">表空间编号1+数据页编号1</td><td align="center">缓存页地址1</td></tr><tr><td align="center">表空间编号1+数据页编号2</td><td align="center">缓存页地址2</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><p>当需要使用某个数据页时，就用数据页所属的表空间编号+数据页编号到哈希表中查询，如果能够查到，就使用value对应的缓存页；如果查询不到就将此数据页加载到缓存页中，并更新哈希表。</p><p>缓存页中的数据仅用于查询，操作结束时缓存页与数据页中的数据一致；当进行其它操作时，缓存页与数据页中的数据不一致，这些缓存页我们称之为脏页，而只有脏页才需要写回磁盘中；</p><p><strong>那么如何确定哪些缓存页是脏页呢？</strong></p><p>MySQL为此设计了一个flush链表，本质上也是一个双向链表，每个节点都是一个缓存页的元数据</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629190942529.png" alt="image-20220629190942529"></p><p>同样，flush_next与flush_pre都是元数据中的两个属性；flush链表最初是空的，当缓存页被更新时，就把缓存页对应的元数据加入到flush链表，此时当前缓存页就被标识为脏页；</p><p>随着服务的不断运行，大量的数据页被加载到Buffer pool中，free链表节点越来越少，那么总有一个时候没有空闲缓存页</p><p>（如果一个查询语句要加载的数据页很多，那么淘汰的脏页也就越多（需要先刷脏再加载），会导致查询的响应变慢（MySQL抖动））</p><p><strong>那么这个时候该淘汰哪些缓存页呢？</strong></p><p>MySQL采用LRU算法，并为此设计了一个LRU链表，本质上还是一个双向链表，每个节点都是一个缓存页的元数据</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629193346633.png" alt="image-20220629193346633"></p><p>lru_next与lru_pre都是元数据中的两个属性</p><p>当一个数据页被加载到Buffer Pool时，会将缓存页对应的元数据放到lru链表的头部；当某个缓存页被访问时，也将该缓存页对应的元数据放到lru链表的头部；这样最近频繁使用的缓存页都在链表头部，长时间未使用的缓存页在链表尾部，当需要淘汰一个缓存页时，直接淘汰了尾部节点对应的数据页即可。</p><p><strong>简单LRU链表的隐患</strong></p><ul><li><p>MySQL预读机制（减少磁盘IO）</p><ul><li>线性预读：当顺序的访问了一个区（extent）中的56个数据页（innodb_read_ahead_threshold）时，会把相邻的区中的所有数据页都加载到Buffer Pool中；</li><li>随机预读：当Buffer Pool中缓存了一个区中13个连续的数据页时，就会把这个区中剩下的数据页加载到Buffer Pool中。</li></ul></li><li><p>对于一个大表的全表扫描会把所有的数据页都加载到Buffer Pool中</p></li></ul><p>这两种情况都会导致大量的数据页被加载到Buffer Pool中，并且会放到lru链表的头部，这些数据可能被访问一次之后再也不被访问了；</p><p>而以前的热点数据被挤到lru链表的尾部，可能会被直接淘汰，后续被访问时又需要将这部分数据从磁盘加载进来，减少了效率，并且双向链表的频繁移动也会造成不必要的资源浪费。</p><p>因此MySQL没有采用简单的LRU算法实现LRU链表，而是采用冷热数据分离的方式。LRU链表会被分为两个部分，热数据部分（young区域）和冷数据部分（old区域）。每个部分所占的比例可以通过innodb_old_blocks_pct参数来指定，默认为37，意思是冷数据占比3:7</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629200713945.png" alt="image-20220629200713945"></p><p><strong>基于冷热数据区分离的LRU链表</strong></p><p><strong>工作原理</strong>：</p><ul><li>数据页第一次被加载到Buffer Pool中时，对应的元数据放置在冷数据区的头部，</li><li>过了1s之后（innodb_old_blocks_time，默认为1000ms），这个缓存页再次被访问了，才会被移动到LRU链表的头部，（降低调整LRU链表的频率，从而提升性能）。</li><li>这样一来，冷数据区保存的都是一些被预读、全表扫描进来的只需访问一次的数据，而热数据区保存的都是一些被频繁访问的数据，此时淘汰的都是冷数据区尾部的数据，不会对热点数据的访问造成影响。</li></ul><p><strong>进一步优化</strong></p><p>对于热数据区，如果缓存页一被访问就马上移动到头部，也会降低MySQL的性能（热点数据都是被频繁访问的，频繁移动元数据节点 也会消耗大量资源）</p><p>MySQL对此的优化方案：只有当热数据区后3/4的数据被访问了，才会移动到头节点，前1/4的缓存页被访问则不移动，这样减少了链表节点的移动。</p><p><strong>Redis中的LRU淘汰</strong></p><p>Redis也存在单次扫描或查询操作加载过多的数据，从而造成缓存污染，对于这种情况，Redis采用的是LFU算法（基于访问频次淘汰，而不是基于最近访问时间）</p><p><strong>刷脏机制</strong></p><ul><li>MySQL后台存在一个io线程，会定时将LRU链表冷数据区尾部的几个元数据节点对应的缓存页刷回磁盘，并清空缓存页放入free链表，并不会等到没有空闲缓存页之后再去刷盘</li><li>后台io线程在MySQL不繁忙时，将flush链表中的缓存刷入磁盘，并放入free链表</li></ul><p><strong>CRUD执行的动态过程</strong></p><p>随着CRUD操作的不断进行，free链表节点不断消耗，LRU链表不断地增加和移动，flush链表也不断地增加，同时后台io线程不断地是刷盘，使得LRU链表与flush链表中的节点不断地减少，归还到free链表中。</p><p><strong>多个Buffer Pool优化并发能力</strong></p><ul><li><p>当多个线程同时访问Buffer Pool时，都需要去访问缓存页、元数据、各种链表等共享的数据结构；由于线程安全问题，所以必然要加锁来保证数据的安全性，性能也会随之下降；</p></li><li><p>MySQL提供了多个Buffer Pool的设计来应对高并发访问：</p><ul><li><p>1.Buffer Pool Size小于1GB时，最多分配一个Buffer Pool；</p></li><li><p>2.如果并发很高则需部署在大内存的服务器上，并给Buffer Pool分配较大的内存，同时指定Buffer Pool的个数，例如个Buffer Pool分配8GB的内存，设置4个Buffer Pool，那么每个Buffer Pool Size为2GB</p><p>innodb_buffer_pool_size（默认为128m）=8589934952  innodb_buffer_pool_instances=4</p></li></ul></li></ul><p><strong>Buffer Pool基于chunk机制来支持运行期间动态调整大小</strong></p><ul><li><p>Buffer Pool是由多个chunk组成的，chunk由innodb_buffer_pool_chunk_size控制，默认为128m，例如上面2GB大小的Buffer Pool是由16个128m的chunk组成</p></li><li><p>每个chunk都包含了各自的缓存页和元数据，但是它们<strong>共享一套free链表、flush链表、LRU链表</strong></p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629205555393.png" alt="image-20220629205555393"></p></li><li><p>当要调整Buffer Pool大小时，例如将2GB的Buffer Pool调整为4GB，只需申请一系列的chunk分配给Buffer Pool即可</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java 应用与 MySQL 的交互</title>
      <link href="2022/06/29/Java%20%E5%BA%94%E7%94%A8%E4%B8%8E%20MySQL%20%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
      <url>2022/06/29/Java%20%E5%BA%94%E7%94%A8%E4%B8%8E%20MySQL%20%E7%9A%84%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<h1 id="1-MySQL驱动-数据库连接池"><a href="#1-MySQL驱动-数据库连接池" class="headerlink" title="1. MySQL驱动 数据库连接池"></a>1. MySQL驱动 数据库连接池</h1><p>作为一个 Java工程师，不知道你有没有关注过一个问题，Java程序是如何与MySQL数据库进行交互的？</p><ol><li><h3 id="MySQL驱动"><a href="#MySQL驱动" class="headerlink" title="MySQL驱动"></a><strong>MySQL驱动</strong></h3></li></ol><p>应该大部分人都知道，我们首先需要配置一个 MySQL驱动，那MySQL驱动到底是个什么东西？<br>通俗一点解释，MySQL驱动 就是用来跟MySQL服务端进行通信，也就是创建网络连接，然后往服务器发送请求，执行SQL语句 等访问数据库的操作；</p><p>一般在项目中也就是这样一个maven依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a><strong>数据库连接池</strong></h3></li></ol><p>对于我们的Java系统，肯定不可能只跟MySQL创建一个连接的，如果只有一个的话，那就得单线程串行执行SQL语句了；</p><p>所以需要和MySQL服务端创建多个连接，但是每次创建和销毁一个数据库连接都是非常耗时的操作，那肯定就不能频繁的去创建和销毁了；</p><p>这种情况下，就引入了池化思想，也就是数据库连接池；在一个池子中维持多个数据库连接，让不同的线程需要执行SQL语句的时候，先去获取到一个连接，执行完成之后又将这个连接给放回池内；</p><p>常见的数据库连接池有：<strong>DBCP、C3P0、阿里的 Druid</strong> 这些；</p><p>这些池化的思想，在我们系统开发中很多地方都会遇到；如 线程池、内存池、HTTP连接池 等等……<br>可以扩展一下<strong>池化思想的一般作用</strong>：</p><ul><li><strong>资源复用</strong>：池中对象得到复用，避免了频繁的创建、释放带来的性能开销，减少内存碎片等；</li><li><strong>更快的响应速度</strong>：在要使用到对象时，直接从池中获取即可，不用在要用时才去等待创建；</li><li><strong>统一的对象管理</strong>：可以防止内存泄露，实现线程安全等；</li></ul><p>一般来说，我们的系统是部署在Tomcat中的，或者现在的springboot内置的 Tomcat，一个Tomcat服务器中是有多个线程的（Tomcat8默认为200个线程），也就是说这些线程是可以同时接收多个请求，然后并发的处理的；</p><p>那把这些过程串联起来就是：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629170146290.png" alt="image-20220629170146290"></p><ol><li>部署在 Tomcat 中的Java应用，会通过数据库连接池创建一定数量的数据库连接；</li><li>Tomcat 中也会有多个线程，可以同时接收用户的请求；</li><li>当有多个用户并发请求时，由Tomcat中的线程来处理这些请求；<br>在要执行 SQL语句时，从 数据库连接池 中获取到跟 MySQL服务端的数据库连接，然后通过 MySQL驱动来向MySQL服务端发送请求，再由MySQL服务端来执行SQL语句；<h1 id="2-MySQL-架构设计"><a href="#2-MySQL-架构设计" class="headerlink" title="2. MySQL 架构设计"></a>2. MySQL 架构设计</h1>上面说到通过 MySQL 驱动来发起请求由MySQL服务端执行 SQL 语句，那 MySQL 服务端是怎么执行的呢？</li></ol><p>对于 MySQL服务端，其实也会维护一个连接池（连接管理器），用来管理多个客户端跟这个服务端创建的所有连接；<br>我们平常使用命令行来操作，来跟 MySQL服务端创建一个MySQL连接，一般也就是：</p><pre class="line-numbers language-bash"><code class="language-bash">mysql -h<span class="token variable">$ip</span> -P<span class="token variable">$port</span> -u<span class="token variable">$user</span> -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后，MySQL的连接管理器就会去验证你的账户密码和权限等；如果验证通过，就可以通过命令行来执行MySQL命令了；<br>这个客户端的连接，MySQL服务端会维护一定的时间长度（默认是8小时），也就是说如果你8小时客户端没有操作，连接管理器会自动将这个连接给断开（不然也是白白浪费资源维护这个连接，也就是要维护执行过程中使用到内存之类的资源）；</p><p>当MySQL服务端接收到一个 SQL请求之后，也就是说从一个网络连接中接收到网络请求；那这个时候肯定就需要有一个线程来从网络连接中读取和解析请求；<br>也就是得到一个 SQL语句，转交给SQL接口去执行，完成底层数据的增删改查；</p><p>为了执行SQL语句，MySQL的 Server层，设计了如下的 组件：</p><p><img src="https://raw.githubusercontent.com/Mr-xinyichen/picgo/main/img/image-20220629170240075.png" alt="image-20220629170240075"></p><p>以这条 SQL 语句为例，解释一下：</p><pre><code>select id, name, age from user where id = 1;</code></pre><ul><li><h4 id="解析器：对-SQL-语句做解析，也就是要让MySQL知道你这条-SQL语句，是要做什么；"><a href="#解析器：对-SQL-语句做解析，也就是要让MySQL知道你这条-SQL语句，是要做什么；" class="headerlink" title="解析器：对 SQL 语句做解析，也就是要让MySQL知道你这条 SQL语句，是要做什么；"></a>解析器：对 SQL 语句做解析，也就是要让MySQL知道你这条 SQL语句，是要做什么；</h4><ul><li><p><strong>词法解析</strong>：识别出 SQL语句里面的字符串分别是什么，代表什么；比如这里就是： </p><ul><li>select 表示这是一个查询语句；</li><li>user 表示 从user表中进行查询；</li><li>id = 1 表示查询 id为1 这行数据；</li><li>id、name、age 表示要从这行数据中提取这三个字段；</li></ul></li><li><p><strong>语法分析</strong>：根据词法分析的结果，再判断你输入的这个 SQL 是否满足 MySQL的语法； </p></li><li><p>也就是你在执行 sql 语句的时候，正常报出来的错误这些；</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span> 1064 - You have an error <span class="token keyword">in</span> your SQL syntax<span class="token punctuation">;</span> check the manual that corresponds to your MySQL server version <span class="token keyword">for</span> the right syntax to use near <span class="token string">'limit 10'</span> at line 1<span class="token operator">></span> 时间: 0.009s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般这个报错，都会提示你出现错误的位置，一般就关注 <code>use near...</code></p></li></ul></li><li><p><strong>优化器</strong>：当你的SQL语句中有多个索引，或者多个表关联查询时；优化器会决定使用哪个索引，或者决定各个表的连接顺序；也就是说优化器会决定一条 SQL 按照一个什么的步骤和顺序，去执行哪些操作；例如：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from t1 join t2 where t1.c=10 and t2.d=20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20；<br>​    也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10；<br>​    这两种方式的执行结果是一样的，但是可能执行的效率会不同，所以优化器会根据执行成本来选择使用哪个方案；</p><ul><li><strong>执行器</strong>：当通过优化器决定了怎么执行这条 SQL 时，就可以开始执行语句了； <ul><li>在执行之前，判断当前用户对于这个表是否有执行权限；如果有权限，才会打开这个表继续执行后面的操作；</li><li>具体的执行，是通过执行引擎来实现的；也就是每个表在定义时，就指定了特定的执行引擎，然后 MySQL的Server 去调用具体执行引擎的接口，来执行这条 SQL语句；</li><li>这里的执行引擎，一般默认就是 InnoDB，当然还有一些 MyIsam、Memory之类的；（这里就有一个面试题，InnoDB 和 MyIsam 的区别是什么，下去背一下就行了）；<br>对于不同引擎，他们的底层实现的存储结构或者存储方式这些都是不一样的；</li></ul></li></ul><p>也就是通过这些组件的配合，以这样一些流程来完成 执行一条 SQL 语句；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>生产环境的数据库规划</title>
      <link href="2022/06/29/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E5%88%92/"/>
      <url>2022/06/29/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E5%88%92/</url>
      <content type="html"><![CDATA[<h1 id="生产环境的数据库规划"><a href="#生产环境的数据库规划" class="headerlink" title="生产环境的数据库规划"></a>生产环境的数据库规划</h1><h2 id="1-1-生产环境的数据库服务器配置"><a href="#1-1-生产环境的数据库服务器配置" class="headerlink" title="1.1 生产环境的数据库服务器配置"></a>1.1 生产环境的数据库服务器配置</h2><p>一般来说，对于我们这种Java开发者，可能并不会去关心MySQL的服务器配置什么的，大点的公司基本都是DBA给出或者运维给出的；</p><p>但是我认为对于MySQL这种组件，我们不能局限于使用，还应该去扩展一些原理、了解部署MySQL的服务器配置，和对MySQL做一些压测（知道它能承受的极限）。</p><p>那我们的生产环境一般需要用什么配置的机器来部署MySQL？</p><p>首先，如果系统是一个没有什么并发量，用户就几十几百人的一个什么配置系统；那随便你采用什么样的机器去部署，甚至你用你自己的主机去部署一个都没什么问题；（因为数据量很小、并发量很小、操作频率低）；这种就随便你怎么弄；</p><p>真实环境：</p><p>一般而言，真实环境的数据库部署时选用的机器 最低在8核16G，正常在16核32G；</p><p>对于 8核16G的机器部署的MySQL，每秒抗个一两千的并发请求没有问题；对于16核32G 部署的MySQL，每秒能够抗个 两三千、三四千的并发请求没有问题；</p><p>但是如果达到 每秒上万的请求，那么服务器的 CPU、磁盘、IO、内存的负载这些可能会飙升很高，数据库也扛不住的（这个情况一般就会采用一些 读写分离、分库分表、缓存了）</p><p>另外，对于数据库服务器而言，条件允许的话尽量采用SSD固态硬盘而不是普通的机械硬盘；因为数据库最大的消耗这些就在于大量的磁盘IO，需要大量的读写文件，所以如果使用SSD固态硬盘，那数据库每秒能扛的并发请求就会大一些；</p><p>当然这些都是一些经验值，根据这些配置的机器来部署的MySQL数据库，大致适合多高的并发访问量。</p><h2 id="1-2-MySQL数据库压测的关注点"><a href="#1-2-MySQL数据库压测的关注点" class="headerlink" title="1.2 MySQL数据库压测的关注点"></a>1.2 MySQL数据库压测的关注点</h2><p>在大一点的公司里面，MySQL都是由DBA或运维去安装、部署和启动的，并且对于里面的一些参数进行调优后，才会给到开发者手里；</p><p>在这个时候，作为一个Java开发者，需要先对这个数据库进行一些基本的压测，知道你手里的数据库，能够抗住多大的压力；</p><p>简单来说，可以通过一些工具模拟一个系统，例如 每秒发出 1000个请求到这个数据库上，观察服务器的 CPU负载、磁盘IO负载、网络IO负载、内存负载等；然后数据库能否每秒处理完这 1000 个请求；</p><p>然后再继续 模拟每秒发送 2000 个请求、每秒 3000 个请求；逐步的进行测试，这个数据库在目前机器配置下，大致的负载和压力，性能表现、最多可以抗多少请求；</p><p>压测的目标就是看这个数据库在现有机器配置下，每秒可以抗下多少个请求，对应的专业名词为：QPS 和 TPS；</p><ul><li><strong>QPS：Query Per Second，每秒可以处理多少个请求</strong>；可以理解为，一次请求就是一条 sql 语句，也就是说这个数据库每秒可以处理多少条sql语句（或者你的Java系统每秒处理多少个请求）；</li><li><strong>TPS：Transaction Per Second，每秒可以处理多少个事务</strong>；（这个一般都用于数据库范围），可以理解为数据库每秒可以处理多次完整的事务（因为一个事务中会包含多个SQL语句， 包含提交、 回滚）；</li></ul><h3 id="1-2-1-压测关注点-—-IO相关的性能指标"><a href="#1-2-1-压测关注点-—-IO相关的性能指标" class="headerlink" title="1.2.1 压测关注点 — IO相关的性能指标"></a>1.2.1 压测关注点 — IO相关的性能指标</h3><ul><li><strong>IOPS</strong>：<strong>Input/Output Operations Per Second</strong> ，<strong>每秒执行的IO操作次数（读写次数）</strong>； 例如 IOPS 是 1000，则就是每秒可以执行 1000 个IO读写操作；<br>（联想一下，怎么影响MySQL的； 例如你要查找数据的时候，当数据没有在内存中，那是不是就得去磁盘中进行查找，就这是发生了磁盘IO；或者内存里面的更新后的脏数据，会由IO线程刷回到磁盘去，这也是发生了磁盘IO）</li><li><strong>吞吐量</strong>：<strong>磁盘每秒可以读写多少字节的数据量</strong>；（那这里怎么影响MySQL的呢？例如 前面说到的刷脏、或者在将 redo log buffer 中的数据写到redo log 日志中，也就是磁盘；吞吐量就会决定每秒能够写入到磁盘的数据量）</li><li><strong>Latency</strong>：<strong>往磁盘写入一条数据的延迟；</strong>在写入一条日志到磁盘的时候，延迟是 1ms 还是 100 us，这个时间就对SQL执行的性能是有影响的；（一般而言，吞吐量越高，延迟就得越低）</li></ul><h3 id="1-2-2-压测关注点-—-服务器相关的性能指标"><a href="#1-2-2-压测关注点-—-服务器相关的性能指标" class="headerlink" title="1.2.2 压测关注点 — 服务器相关的性能指标"></a>1.2.2 压测关注点 — 服务器相关的性能指标</h3><ul><li><strong>CPU负载</strong>：（CPU使用率）很重要的性能指标，表示你的 CPU 在运行时处理以及等待CPU处理的进程数之类的统计信息； <ul><li>这里贴一个 linux 服务器中 load 和 cpu 使用过高 的细节分析和排查的帖子：<a href="https://blog.csdn.net/yangbindxj/article/details/122956376">https://blog.csdn.net/yangbindxj/article/details/122956376</a></li></ul></li><li><strong>网络负载</strong>：这个主要受机器的带宽影响，也就是在压测到一定的QPS之后，每秒钟机器的网卡会 输入/输出 多少MB的数据；<br>有可能你的带宽每秒最多传输 100MB的数据，当你QPS到1000时，网卡就打满了，那也到了你压测的极限了；</li><li><strong>内存负载</strong>：也就是看压测到一定情况下时，机器的内存消耗了多少，如果内存消耗过多，也没法继续增大压测了；</li></ul><h2 id="1-3-MySQL-数据库压测工具-—-sysbench"><a href="#1-3-MySQL-数据库压测工具-—-sysbench" class="headerlink" title="1.3 MySQL 数据库压测工具 — sysbench"></a>1.3 MySQL 数据库压测工具 — sysbench</h2><p>这个工具可以自动帮你在数据库中构造出来大量的数据， 然后可以模拟上千个线程访问你的数据库，模拟使用各种SQL 语句来访问你的数据库，还可以模拟各种事务类型进行提交什么的，甚至模拟 几十万的 TPS 进行压测；</p><p>直接yum源安装 sysbench 的话有点麻烦，所以可以采用 docker 来安装：</p><pre class="line-numbers language-bash"><code class="language-bash">docker search sysbenchdocker pull severalnines/sysbenchdocker imagesdocker run -it --name my-sysbench 0e71335a2211sysbench --version <span class="token comment" spellcheck="true"># 出现版本之后 即安装成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sysbench-压测："><a href="#sysbench-压测：" class="headerlink" title="sysbench 压测："></a>sysbench 压测：</h3><ul><li><h4 id="1-1-构造数据（prepare模式）"><a href="#1-1-构造数据（prepare模式）" class="headerlink" title="1.1 构造数据（prepare模式）"></a>1.1 构造数据（prepare模式）</h4></li><li>先创建一个测试的数据库 sysbench-db</li></ul><pre class="line-numbers language-bash"><code class="language-bash">sysbench --db-driver<span class="token operator">=</span>mysql --time<span class="token operator">=</span>100 --threads<span class="token operator">=</span>10 --report-interval<span class="token operator">=</span>1 --mysql-host<span class="token operator">=</span>192.168.126.135 --mysql-port<span class="token operator">=</span>3306 --mysql-user<span class="token operator">=</span>root --mysql-password<span class="token operator">=</span>pass1234 --mysql-db<span class="token operator">=</span>sysbench-db --tables<span class="token operator">=</span>20 --table_size<span class="token operator">=</span>1000000 oltp_read_write --db-ps-mode<span class="token operator">=</span>disable prepare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>–db-driver</strong>=mysql：基于 mysql 驱动去连接 mysql 数据库</p></li><li><p><strong>–time</strong>=300：连续访问 100 秒</p></li><li><p><strong>–threads</strong>=10：模拟 10 个线程并发访问</p></li><li><p><strong>–report-interval</strong>=1：每隔 1s 进行输出压测情况</p></li><li><p><strong>–mysql-host</strong>=192.168.126.135 <strong>–mysql-por</strong>t=3306 <strong>–mysql-user</strong>=root <strong>–mysql-password</strong>=pass1234：要压测的 mysql 的 ip、port、用户名、密码</p></li><li><p><strong>–mysql-db</strong>=sysbench-db <strong>–tables</strong>=20 <strong>–table_size</strong>=1000000：在 sysbench-db 这个数据库内，构造 20 个测试表，每隔表里构造 100w 条测试数据；（测试表的名字会类似 sbtest1、sbtest2、、、）</p></li><li><p><strong>oltp_read_write</strong>：测试的是 OLTP 数据库的读写测试；（这里有多个模式，代表不同的压测性能） </p><ul><li><strong>oltp_read_write</strong>：测试综合读写 TPS；</li><li><strong>oltp_read_only</strong>：测试只读性能；</li><li><strong>oltp_delete</strong>：测试删除性能；</li><li><strong>oltp_update_index</strong>：测试更新索引字段性能；</li><li><strong>oltp_update_non_index</strong>：测试更新非索引字段性能；</li><li><strong>oltp_insert</strong>：测试插入性能；</li><li><strong>oltp_write_only</strong>：测试写入性能；</li></ul></li><li><p><strong>db-ps-mode</strong>=disable：禁止 ps 模式</p></li><li><p><strong>prepare</strong>：准备数据（构造数据），就是去创建这些测试表和数据，不是真正进行压测；</p></li><li><h4 id="1-2-压测性能"><a href="#1-2-压测性能" class="headerlink" title="1.2 压测性能"></a>1.2 压测性能</h4><ul><li><strong>压测综合读写性能</strong>：(注意最后是 run）(oltp_read_write )</li></ul></li></ul><pre><code>sysbench --db-driver=mysql --time=100 --threads=10 --report-interval=1 --mysql-host=192.168.126.135 --mysql-port=3306 --mysql-user=root --mysql-password=pass1234 --mysql-db=sysbench-db --tables=20 --table_size=1000000 oltp_read_write --db-ps-mode=disable run</code></pre><ul><li><strong>压测查询（只读）性能</strong>：(oltp_read_write)</li></ul><pre class="line-numbers language-bash"><code class="language-bash">sysbench --db-driver<span class="token operator">=</span>mysql --time<span class="token operator">=</span>100 --threads<span class="token operator">=</span>10 --report-interval<span class="token operator">=</span>1 --mysql-host<span class="token operator">=</span>192.168.126.135 --mysql-port<span class="token operator">=</span>3306 --mysql-user<span class="token operator">=</span>root --mysql-password<span class="token operator">=</span>pass1234 --mysql-db<span class="token operator">=</span>sysbench-db --tables<span class="token operator">=</span>20 --table_size<span class="token operator">=</span>1000000 oltp_read_only --db-ps-mode<span class="token operator">=</span>disable run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>压测删除性能</strong>：（oltp_delete） </p></li><li><p><strong>压测更新索引字段性能</strong>：（oltp_update_index） </p></li><li><p><strong>压测更新非索引字段性能</strong>：（oltp_update_non_index） </p></li><li><p><strong>压测插入性能</strong>：（oltp_insert） </p></li><li><p><strong>压测写入性能</strong>：（oltp_write_only） </p></li><li><h4 id="1-3-压测结果分析："><a href="#1-3-压测结果分析：" class="headerlink" title="1.3 压测结果分析："></a>1.3 压测结果分析：</h4><p>以 压测综合读写性能 为例： </p></li></ul><pre class="line-numbers language-bash"><code class="language-bash">sysbench --db-driver<span class="token operator">=</span>mysql --time<span class="token operator">=</span>100 --threads<span class="token operator">=</span>10 --report-interval<span class="token operator">=</span>1 --mysql-host<span class="token operator">=</span>192.168.126.135 --mysql-port<span class="token operator">=</span>3306 --mysql-user<span class="token operator">=</span>root --mysql-password<span class="token operator">=</span>pass1234 --mysql-db<span class="token operator">=</span>sysbench-db --tables<span class="token operator">=</span>20 --table_size<span class="token operator">=</span>1000000 oltp_read_write --db-ps-mode<span class="token operator">=</span>disable run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>压测结果输出：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>1s<span class="token punctuation">]</span> thds: 10 tps: 220.48 qps: 4532.31 <span class="token punctuation">(</span>r/w/o: 3191.47/388.08/952.75<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 87.56 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>2s<span class="token punctuation">]</span> thds: 10 tps: 272.30 qps: 5460.07 <span class="token punctuation">(</span>r/w/o: 3823.25/449.50/1187.32<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 59.99 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>3s<span class="token punctuation">]</span> thds: 10 tps: 235.87 qps: 4703.49 <span class="token punctuation">(</span>r/w/o: 3286.25/431.77/985.47<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 78.60 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>4s<span class="token punctuation">]</span> thds: 10 tps: 254.14 qps: 5067.78 <span class="token punctuation">(</span>r/w/o: 3544.94/421.23/1101.60<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 64.47 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>5s<span class="token punctuation">]</span> thds: 10 tps: 249.82 qps: 5027.32 <span class="token punctuation">(</span>r/w/o: 3534.41/438.68/1054.23<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 73.13 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>6s<span class="token punctuation">]</span> thds: 10 tps: 255.98 qps: 5109.56 <span class="token punctuation">(</span>r/w/o: 3567.69/457.96/1083.91<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 78.60 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>7s<span class="token punctuation">]</span> thds: 10 tps: 256.03 qps: 5138.63 <span class="token punctuation">(</span>r/w/o: 3596.44/455.06/1087.13<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 74.46 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>8s<span class="token punctuation">]</span> thds: 10 tps: 259.13 qps: 5145.49 <span class="token punctuation">(</span>r/w/o: 3597.74/453.22/1094.53<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 69.29 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>9s<span class="token punctuation">]</span> thds: 10 tps: 278.89 qps: 5598.85 <span class="token punctuation">(</span>r/w/o: 3920.50/485.81/1192.54<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 69.29 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>10s<span class="token punctuation">]</span> thds: 10 tps: 273.12 qps: 5476.32 <span class="token punctuation">(</span>r/w/o: 3831.62/473.20/1171.50<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 65.65 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>95s<span class="token punctuation">]</span> thds: 10 tps: 344.25 qps: 6876.98 <span class="token punctuation">(</span>r/w/o: 4808.48/696.50/1371.99<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 49.21 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>96s<span class="token punctuation">]</span> thds: 10 tps: 345.84 qps: 6895.86 <span class="token punctuation">(</span>r/w/o: 4825.80/711.68/1358.38<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 49.21 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>97s<span class="token punctuation">]</span> thds: 10 tps: 301.88 qps: 6105.55 <span class="token punctuation">(</span>r/w/o: 4284.28/602.76/1218.51<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 64.47 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>98s<span class="token punctuation">]</span> thds: 10 tps: 338.27 qps: 6732.51 <span class="token punctuation">(</span>r/w/o: 4711.86/701.49/1319.16<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 53.85 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>99s<span class="token punctuation">]</span> thds: 10 tps: 322.74 qps: 6472.75 <span class="token punctuation">(</span>r/w/o: 4532.33/680.55/1259.87<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 61.08 err/s: 0.00 reconn/s: 0.00<span class="token punctuation">[</span>100s<span class="token punctuation">]</span> thds: 10 tps: 327.01 qps: 6502.16 <span class="token punctuation">(</span>r/w/o: 4543.11/685.02/1274.03<span class="token punctuation">)</span> lat <span class="token punctuation">(</span>ms,95%<span class="token punctuation">)</span>: 63.32 err/s: 0.00 reconn/s: 0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 [ 5s ] 为例：</p><ul><li><strong>thds</strong>: 10：有 10 个线程在进行压测；</li><li><strong>tps</strong>: 249.82：每秒执行了 249.82个事务；</li><li><strong>qps</strong>: 5027.32：每秒可以执行 5027.32个请求；</li><li><strong>(r/w/o: 3534.41/438.68/1054.23)</strong>：在每秒 5027.32个请求中： <ul><li>有 3534.41 个请求是 读请求；</li><li>有 438.68 个请求是 写请求；</li><li>有 1054.23 个请求是 其他请求；（也就是对 QPS 进行了拆解）</li></ul></li><li><strong>lat (ms,95%)</strong>: 73.13：95% 的请求的延迟都在 73.13毫秒一下；</li><li><strong>err/s: 0.00 reconn/s: 0.00</strong>：每秒有 0 个请求是失败的，发生了 0次网络重连；</li></ul><p>这个压测结果会根据不同配置的服务器性能有较大的差距，如果服务器性能很高，那可以开很多的并发线程去压测（比如100个线程）；此时可能压测出来的 TPS有上千个；如果机器性能很低，可能 TPS才几十个；</p><p>另外在压测执行完成之后，最后会显示一个总的压测报告：</p><pre class="line-numbers language-bash"><code class="language-bash">SQL statistics:    queries performed:        read:                            420140    // 在100s的压测期间执行了 420140 次的读请求        write:                           56987     // 执行了 56987 次的写请求        other:                           123073    // 执行了 123073 次的其他请求        total:                           600200    // 一共执行了 600200 次请求    transactions:                        30010  <span class="token punctuation">(</span>299.96 per sec.<span class="token punctuation">)</span>    // 一共执行了 3w 多次的事务，每秒执行 300 次事务    queries:                             600200 <span class="token punctuation">(</span>5999.14 per sec.<span class="token punctuation">)</span>   // 一共执行了 6w 次的请求，每秒执行 6000 次请求    ignored errors:                      0      <span class="token punctuation">(</span>0.00 per sec.<span class="token punctuation">)</span>    reconnects:                          0      <span class="token punctuation">(</span>0.00 per sec.<span class="token punctuation">)</span>General statistics:    total time:                          100.0466s    total number of events:              30010Latency <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>:         min:                                    2.42    // 所有请求中最小延迟为 2.42ms         avg:                                   33.33    // 平均延迟为 33.33ms         max:                                  240.49    // 最大延迟为 240.49         95th percentile:                       62.19    // 95线（95%）的延迟都在 62.19 以内         sum:                              1000255.95    Threads fairness:    events <span class="token punctuation">(</span>avg/stddev<span class="token punctuation">)</span>:           3001.0000/20.98    execution <span class="token function">time</span> <span class="token punctuation">(</span>avg/stddev<span class="token punctuation">)</span>:   100.0256/0.01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是以 –threads=20 来跑出来的压测报告：</p><pre class="line-numbers language-bash"><code class="language-bash">SQL statistics:    queries performed:        read:                            382690        write:                           66447        other:                           97563        total:                           546700    transactions:                        27335  <span class="token punctuation">(</span>273.09 per sec.<span class="token punctuation">)</span>    queries:                             546700 <span class="token punctuation">(</span>5461.84 per sec.<span class="token punctuation">)</span>    ignored errors:                      0      <span class="token punctuation">(</span>0.00 per sec.<span class="token punctuation">)</span>    reconnects:                          0      <span class="token punctuation">(</span>0.00 per sec.<span class="token punctuation">)</span>General statistics:    total time:                          100.0929s    total number of events:              27335Latency <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>:         min:                                   19.37         avg:                                   73.20         max:                                  203.10         95th percentile:                      118.92         sum:                              2001031.92Threads fairness:    events <span class="token punctuation">(</span>avg/stddev<span class="token punctuation">)</span>:           1366.7500/13.82    execution <span class="token function">time</span> <span class="token punctuation">(</span>avg/stddev<span class="token punctuation">)</span>:   100.0516/0.02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，性能还没有 –threads=10 的时候好，说明这台服务器上MySQL的性能极限应该就是那点了，你再增加更大的并发量，它可能就扛不住，TPS 和 QPS 都会降低，延迟也会增大；</p><p>如果在增加线程数的时候，MySQL的 TPS、QPS 这些性能数据是一直在增加的，就说明还没有达到极限，你可以继续增加线程数来压测出MySQL的真实的最高负载能力，直到 TPS、QPS 上不去了；</p><p>另外，这个压测，也可以用来对比，MySQL开启和未开启 binlog 对性能的影响之类的；</p><h2 id="1-4-观察压测过程中服务器的性能"><a href="#1-4-观察压测过程中服务器的性能" class="headerlink" title="1.4 观察压测过程中服务器的性能"></a>1.4 观察压测过程中服务器的性能</h2><h3 id="1-4-1-为什么要关注压测过程中的服务器性能"><a href="#1-4-1-为什么要关注压测过程中的服务器性能" class="headerlink" title="1.4.1 为什么要关注压测过程中的服务器性能"></a>1.4.1 为什么要关注压测过程中的服务器性能</h3><p>前面说到可以通过不断提高线程数，来让MySQL承载更高的 QPS；但是这个过程需要配合 对服务器的性能表现的观察来做，不能一直盲目的增加线程去进行压测；</p><p>例如，假设当前数据库抗下了 10000 的QPS，但是这个时候服务器各种指标都已经满荷运行了；如 CPU负载很高、内存使用率很高、网络带宽几乎被打满了、磁盘IO的等待时间很长 等等；这种情况说明机器已经到达极致了，面临随时可能挂掉的情况；</p><p>所以这种情况下，你压测出来的 10000 QPS 是不能代表你MySQL的真实性能的；因为生产环境中不可能让服务器处于这种情况下运行，面临随时可能挂掉的风险；</p><p>所以，在压测的过程中，在不停增加 sysbench 的线程数量时，需要同时密切关注机器的 CPU、内存、磁盘、网络 等的负载情况，需要保证他们在比较正常的范围内；</p><h3 id="1-4-2-压测时如何观察服务器的性能指标"><a href="#1-4-2-压测时如何观察服务器的性能指标" class="headerlink" title="1.4.2 压测时如何观察服务器的性能指标"></a>1.4.2 压测时如何观察服务器的性能指标</h3><ol><li><strong>CPU负载：</strong></li></ol><p>一般观察CPU负载，使用的是 top 命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> - 04:10:37 up  4:03,  3 users,  load average: 2.17, 0.53, 0.38Tasks: 104 total,   1 running, 102 sleeping,   1 stopped,   0 zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: 26.7 us, 65.0 sy,  0.0 ni,  0.0 id,  0.3 wa,  0.0 hi,  8.0 si,  0.0 stKiB Mem <span class="token keyword">:</span>  1863076 total,    72520 free,   465568 used,  1324988 buff/cacheKiB Swap:  2097148 total,  1222396 free,   874752 used.  1242384 avail Mem    PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                                     1514 mysql     20   0 1874616 287116   3384 S 83.4 15.4  14:08.53 mysqld                                                                                                                     27688 root      20   0  482764   8564   3140 S 14.0  0.5   0:03.11 sysbench<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>04:10:37 up  4:03,  3 users</strong>：现在时间 04:10:37、运行时间 4:03、3个用户在使用当前服务器</li><li><strong>load average: 2.17, 0.53, 0.38</strong>：CPU 在 一分钟内的负载为 2.17、五分钟内为 0.53、15分钟内为 0.38； <ul><li>这个 CPU 负载，不是单纯的指 CPU 的使用率情况；而是在一段时间内 CPU 正在处理以及等待CPU处理的进程数之和（在运行队列（在CPU上运行或者等待运行的进程）中的平均进程数）<br>如果是一个 4核 CPU，当 CPU负载是 0.15， 说明 4核 中连一个核都没有用满，4核都很空闲；<br>如果CPU负载是 1 ，说明一个核被使用繁忙，另外 3个核是比较空闲的；<br>如果CPU负载是 1.5 ，说明一个核已经被繁忙使用，另外一个核也在被使用但没那么繁忙，剩余2核是空闲的；<br>如果CPU负载是 6，说明4核CPU被繁忙的使用都还不够处理当前的任务，还有很多进程在一直等待CPU去执行自己的任务；</li><li>所以，如果如果在压测过程中，发现 4核CPU的 load average已经达到了 5,6 ，说明几个CPU基本都跑满了，在满负荷运行，此时可能不能再提高线程数来增加MySQL的QPS了，否则这种长期的 CPU负载太高是不合理的；</li></ul></li></ul><ol start="2"><li><strong>内存负载</strong>： <ul><li>Mem :  1863076 total,    72520 free,   465568 used,  1324988 buff/cache：当前机器的内存使用情况 <ul><li>总内存大概有 2G左右，已经使用了 450M左右，还有 70M左右是空闲的，有 1G左右的内存用作OS内核的缓存区；</li><li>对于内存而言，在压测过程中也得密切关注；如果内存使用率在 70%以内，基本都能接受；但是如果在压测时，内存已经到了 80%甚至更高，就已经算是危险了；</li></ul></li></ul></li><li><strong>磁盘IO情况：</strong><br>使用 dstat 命令来观察 磁盘IO的指标（吞吐量、IOPS这些），dstat 直接使用 yum 安装即可；具体使用：</li></ol><ul><li>dstat -d：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dstat -d</span>-dsk/total- <span class="token function">read</span>  writ6577k 4564k 126M   29M 109M   30M 103M   29M 144M   29M 135M   34M 126M   30M 111M   28M 123M   29M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，磁盘的IO吞吐量是 每秒 读取 120M左右的数据、每秒 写入 30M 左右的数据；在合理范围内，因为一般机械硬盘可以做到每秒上百M的读写数据量；</p><ul><li>dstat -r</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dstat -r</span>--io/total- <span class="token function">read</span>  writ 145   181 217  139255  132 252  135 220  151 227  138<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个结果是 读IOPS大概为 230左右，写IOPS大概为 140左右；</p><p>一般来说，对于机械硬盘的IOPS大概是每秒 100左右；如果压测的时候IOPS已经达到了 2,300，说明磁盘负载已经太高了；</p><ol start="4"><li>网卡流量情况： <ul><li>dstat -n</li></ul></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dstat -n</span>-net/total- recv  send   0     0 1327k   16M1332k   16M1277k   16M1280k   16M1346k   17M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每秒钟网卡接收到流量有 1300k 左右，每秒通过网卡发送出去流量有 16M 左右；通常来说，如果机器使用的是千兆网卡，那每秒网卡的总流量大概就在 100M 左右，甚至更低一些；</p><p>总结，在压测的时候，不是盲目扩大线程数的；而是要在服务器硬件的合理负载范围内，将MySQL的QPS提高到最大，得到一个合理的极限的QPS值；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>AddTwoNumbers（两数相加）</title>
      <link href="2020/12/19/AddTwoNumbers%EF%BC%88%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%EF%BC%89/"/>
      <url>2020/12/19/AddTwoNumbers%EF%BC%88%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>N2AddTwoNumbers（两数相加）</p><pre><code>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.You may assume the two numbers do not contain any leading zero, except the number 0 itself.Input: l1 = [2,4,3], l2 = [5,6,4]Output: [7,0,8]Explanation: 342 + 465 = 807.来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/add-two-numbers</code></pre><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><ul><li>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在后面面补 0，比如 999 + 99 = 999 + 990 = 8901<br>每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值<br>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</li></ul><p>  <img src="https://i.loli.net/2020/12/18/HndhBC7DaGxsAWI.png" alt="1.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//用于标识头部的指针</span>       ListNode pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//用于记录每个节点值的指针</span>       ListNode cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//进位标记</span>       <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//当两个链表都置于尾部时跳出</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span>null <span class="token operator">||</span> l2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//节点如果为null则补零</span>           <span class="token keyword">int</span> x<span class="token operator">=</span>l1<span class="token operator">==</span>null<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>           <span class="token keyword">int</span> y<span class="token operator">=</span>l2<span class="token operator">==</span>null<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//计算两数之和 需要带上进位标记值</span>           <span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span>carry<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//获取进位标记</span>           carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//获取和值</span>           sum <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//将值写入下个节点 （因为是从0开始）</span>           cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//移动记录指针</span>           cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//移动递归指针</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>               l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>               l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//当两个链表都走到结尾还存在进位标记时则需将进位值写入下一位</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//返回记录链表</span>       <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>TwoSum（两数之和）</title>
      <link href="2020/12/19/TwoSum%EF%BC%88%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%89/"/>
      <url>2020/12/19/TwoSum%EF%BC%88%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="N1TwoSum（两数之和）"><a href="#N1TwoSum（两数之和）" class="headerlink" title="N1TwoSum（两数之和）"></a>N1TwoSum（两数之和）</h3><pre class="line-numbers language-text"><code class="language-text">Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.You may assume that each input would have exactly one solution, and you may not use the same element twice.You can return the answer in any order.Example :Input: nums = [2,7,11,15], target = 9Output: [0,1]Output: Because nums[0] + nums[1] == 9, we return [0, 1].Constraints:2 <= nums.length <= 103-109 <= nums[i] <= 109-109 <= target <= 109Only one valid answer exists.来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/two-sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><ol><li><h4 id="暴力解法：-SpaceComplexity：0，TimeComplexity：n-n"><a href="#暴力解法：-SpaceComplexity：0，TimeComplexity：n-n" class="headerlink" title="暴力解法：(SpaceComplexity：0，TimeComplexity：n*n)"></a>暴力解法：(SpaceComplexity：0，TimeComplexity：n*n)</h4><ul><li>最容易想到的方法是指针遍历数组中的每一个数 <strong>x</strong>，寻找数组中是否存在 <strong>target - x</strong>。<strong>第一个指针i从0开始</strong>依次指向后面的元素，由于规定不允许重复计算【<strong>2+3和3+2是同一个结果</strong>】<strong>第二个指针j从i+1开始</strong>依次指向后面的元素，当满足<strong>arr[i]+arr[j]=target</strong>时，返回<strong>[i,j]</strong>即可。</li></ul></li></ol><pre><code> ![1.png](https://i.loli.net/2020/12/18/CNa5ixHpFBtcjIZ.png) ```java class Solution {     public int[] twoSum(int[] nums, int target) {         for (int i = 0; i &lt; nums.length; i++) {             for (int j = i+1; j &lt; nums.length; j++) {                 if (nums[i]+nums[j]==target){                     return new int[]{i,j};                 }             }         }         return new int[]{-1,-1};     } } ```</code></pre><ol><li><h4 id="dictionary解法：-SpaceComplexity：n-，TimeComplexity：n"><a href="#dictionary解法：-SpaceComplexity：n-，TimeComplexity：n" class="headerlink" title="dictionary解法：(SpaceComplexity：n ，TimeComplexity：n)"></a>dictionary解法：(SpaceComplexity：n ，TimeComplexity：n)</h4><ul><li><p>使用HashMap生成)字典<strong>(key(元素值):value(下标值)</strong>，<strong>使用一个指针i</strong>遍历元素集合，判断key是否包含<strong>target - arr[i]</strong>，如果包含则返回<strong>[map.get(target - arr[i]),i]</strong></p><p><img src="https://i.loli.net/2020/12/18/j6By9cGrKX5NZYE.png" alt="2.png"></p></li></ul></li></ol><pre><code> ```java class Solution {     public int[] twoSum(int[] nums, int target) {         //key存储值 value存储下标         HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();         for (int i = 0; i &lt; nums.length; i++) {             //计算和值与当前元素的差值             int tem = target - nums[i];             //如果map的key包含差值说明存在 直接返回             if (map.containsKey(tem)){                 return new int[]{map.get(tem),i};             }             //将元素的值作为key 下标作为value存入map             map.put(nums[i],i);         }         return null;     } } ```</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JReble与XRebel</title>
      <link href="2020/12/16/JReble%E4%B8%8EXRebel/"/>
      <url>2020/12/16/JReble%E4%B8%8EXRebel/</url>
      <content type="html"><![CDATA[<h2 id="关于jReble的实际使用可前往"><a href="#关于jReble的实际使用可前往" class="headerlink" title="关于jReble的实际使用可前往"></a>关于jReble的实际使用可前往</h2><h4 id="沉默的反补-https-www-bilibili-com-video-BV1rz4y1k7ii"><a href="#沉默的反补-https-www-bilibili-com-video-BV1rz4y1k7ii" class="headerlink" title="[沉默的反补]https://www.bilibili.com/video/BV1rz4y1k7ii"></a>[<strong>沉默的反补</strong>]<a href="https://www.bilibili.com/video/BV1rz4y1k7ii">https://www.bilibili.com/video/BV1rz4y1k7ii</a></h4><h3 id="1-安装插件、重启idea"><a href="#1-安装插件、重启idea" class="headerlink" title="1.安装插件、重启idea"></a>1.安装插件、重启idea</h3><p><img src="https://i.loli.net/2020/12/16/zv2WX6eCU7d1BFf.png" alt="result1.png"></p><h3 id="2-下载反向代理工具"><a href="#2-下载反向代理工具" class="headerlink" title="2.下载反向代理工具"></a>2.下载反向代理工具</h3><pre><code>根据系统选择工具版本地址为：https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4Windows64位版本下载地址：https://github.com/ilanyu/ReverseProxy/releases/download/v1.4/ReverseProxy_windows_amd64.exe</code></pre><h3 id="3-运行反向代理工具"><a href="#3-运行反向代理工具" class="headerlink" title="3.运行反向代理工具"></a>3.运行反向代理工具</h3><p><img src="https://i.loli.net/2020/12/16/gsetnpTxbdL8UfI.png" alt="result7.png"></p><h3 id="4-打开jRebel的激活界面，输入激活地址和自己邮箱地址"><a href="#4-打开jRebel的激活界面，输入激活地址和自己邮箱地址" class="headerlink" title="4.打开jRebel的激活界面，输入激活地址和自己邮箱地址"></a>4.打开jRebel的激活界面，输入激活地址和自己邮箱地址</h3><p><img src="https://i.loli.net/2020/12/16/Jj4HWNfpzKCcdsr.png" alt="result6.png"></p><p><strong>激活地址随便从下面4个地址中选一个可用的即可：</strong></p><pre><code>http://127.0.0.1:8888/Zephyrhttp://127.0.0.1:8888/88414687-3b91-4286-89ba-2dc813b107cehttp://127.0.0.1:8888/ff47a3ac-c11e-4cb2-836b-9b2b26101696http://127.0.0.1:8888/11d221d1-5cf0-4557-b023-4b4adfeeb36a</code></pre><h3 id="5-查看console是否激活"><a href="#5-查看console是否激活" class="headerlink" title="5.查看console是否激活"></a>5.查看console是否激活</h3><p><img src="https://i.loli.net/2020/12/16/PBnhJCQHj2rIAvM.png" alt="result.png"></p><h3 id="6-设置离线使用"><a href="#6-设置离线使用" class="headerlink" title="6.设置离线使用"></a>6.设置离线使用</h3><p><img src="https://i.loli.net/2020/12/16/o8s2ATV6mtbxQyp.png" alt="result3.png"></p><h3 id="7-使用jrebel启动即可享受热部署与异常分析"><a href="#7-使用jrebel启动即可享受热部署与异常分析" class="headerlink" title="7.使用jrebel启动即可享受热部署与异常分析"></a>7.使用jrebel启动即可享受热部署与异常分析</h3><p><img src="https://i.loli.net/2020/12/16/f6Js4TYFltyCoEd.png" alt="result6.png"></p><h5 id="修改代码后只需build即可热部署，但是对于实体类以及原生mapper结果字段的修改必须重启才能生效"><a href="#修改代码后只需build即可热部署，但是对于实体类以及原生mapper结果字段的修改必须重启才能生效" class="headerlink" title="修改代码后只需build即可热部署，但是对于实体类以及原生mapper结果字段的修改必须重启才能生效"></a>修改代码后只需build即可热部署，但是对于实体类以及原生mapper结果字段的修改必须重启才能生效</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SpringBoot路径匹配问题</title>
      <link href="2020/12/10/springboot%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
      <url>2020/12/10/springboot%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="近日在为公司项目搭建大数据平台展示模块时遇到一个错误："><a href="#近日在为公司项目搭建大数据平台展示模块时遇到一个错误：" class="headerlink" title="近日在为公司项目搭建大数据平台展示模块时遇到一个错误："></a>近日在为公司项目搭建大数据平台展示模块时遇到一个错误：</h3><pre class="line-numbers language-shell"><code class="language-shell">Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.[2020-12-10 11:42:58.356] ERROR 15436 --- [                main] o.s.b.d.LoggingFailureAnalysisReporter   : ***************************APPLICATION FAILED TO START***************************Description:Invalid mapping pattern detected: /**/login/**^No more pattern data allowed after {*...} or ** pattern elementAction:Fix this pattern in your application or switch to the legacy parser implementation with `spring.mvc.pathpattern.matching-strategy=ant_path_matcher`.Disconnected from the target VM, address: '127.0.0.1:63242', transport: 'socket'Process finished with exit code 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="很明显的提示："><a href="#很明显的提示：" class="headerlink" title="很明显的提示："></a>很明显的提示：</h3><pre class="line-numbers language-shell"><code class="language-shell">Invalid mapping pattern detected: /**/login/**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关于PathPattern与AntPathMatcher官方论坛大佬的解释："><a href="#关于PathPattern与AntPathMatcher官方论坛大佬的解释：" class="headerlink" title="关于PathPattern与AntPathMatcher官方论坛大佬的解释："></a>关于PathPattern<code>与</code>AntPathMatcher官方论坛大佬的解释：</h3><p><a href="https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc">https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc</a></p><h3 id="仔细排查后发现在配置Security时确实存在此问题："><a href="#仔细排查后发现在配置Security时确实存在此问题：" class="headerlink" title="仔细排查后发现在配置Security时确实存在此问题："></a>仔细排查后发现在配置Security时确实存在此问题：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig11</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置安全     * */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/needLogin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 授权不需要登录权限的URL</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/needLogin"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger*//**"</span><span class="token punctuation">,</span>                        <span class="token string">"/v2/api-docs"</span><span class="token punctuation">,</span>                        <span class="token string">"/swagger-ui//**"</span><span class="token punctuation">,</span>                        <span class="token string">"/webjars*//**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span>CorsUtils<span class="token operator">:</span><span class="token operator">:</span>isPreFlightRequest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虽然发现了问题，但这是一个公共配置文件，修改后会引发其他业务的正常运行，遂继续排查</strong></p><h3 id="经过仔细排查后确定该问题是SpringBoot版本差异所导致的，将spring-boot-starter版本回退至2-1-3-RELEASE后问题解决："><a href="#经过仔细排查后确定该问题是SpringBoot版本差异所导致的，将spring-boot-starter版本回退至2-1-3-RELEASE后问题解决：" class="headerlink" title="经过仔细排查后确定该问题是SpringBoot版本差异所导致的，将spring-boot-starter版本回退至2.1.3.RELEASE后问题解决："></a>经过仔细排查后确定该问题是SpringBoot版本差异所导致的，将spring-boot-starter版本回退至2.1.3.RELEASE后问题解决：</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>提问的智慧</title>
      <link href="2020/11/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"/>
      <url>2020/11/04/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
      <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p><p><strong>How To Ask Questions The Smart Way</strong></p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p><p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p><p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p><p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/issues/new">发 Issue</a>，或直接<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/compare">发 Pull Request</a> 给我。</strong></p><p>本文另有<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md">繁體中文版</a>。</p><h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/history.md">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#声明">声明</a></li><li><a href="#简介">简介</a></li><li><a href="#在提问之前">在提问之前</a></li><li><a href="#当你提问时">当你提问时</a><ul><li><a href="#慎选提问的论坛">慎选提问的论坛</a></li><li><a href="#stack-overflow">Stack Overflow</a></li><li><a href="#网站和-irc-论坛">网站和 IRC 论坛</a></li><li><a href="#第二步使用项目邮件列表">第二步，使用项目邮件列表</a></li><li><a href="#使用有意义且描述明确的标题">使用有意义且描述明确的标题</a></li><li><a href="#使问题容易回复">使问题容易回复</a></li><li><a href="#用清晰、正确、精准且语法正确的语句">用清晰、正确、精准且语法正确的语句</a></li><li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#精确地描述问题并言之有物">精确地描述问题并言之有物</a></li><li><a href="#话不在多而在精">话不在多而在精</a></li><li><a href="#别动辄声称找到-bug">别动辄声称找到 Bug</a></li><li><a href="#低声下气不能代替你的功课">低声下气不能代替你的功课</a></li><li><a href="#描述问题症状而非你的猜测">描述问题症状而非你的猜测</a></li><li><a href="#按发生时间先后列出问题症状">按发生时间先后列出问题症状</a></li><li><a href="#描述目标而不是过程">描述目标而不是过程</a></li><li><a href="#别要求使用私人电邮回复">别要求使用私人电邮回复</a></li><li><a href="#清楚明确的表达你的问题以及需求">清楚明确的表达你的问题以及需求</a></li><li><a href="#询问有关代码的问题时">询问有关代码的问题时</a></li><li><a href="#别把自己家庭作业的问题贴上来">别把自己家庭作业的问题贴上来</a></li><li><a href="#去掉无意义的提问句">去掉无意义的提问句</a></li><li><a href="#即使你很急也不要在标题写紧急">即使你很急也不要在标题写紧急</a></li><li><a href="#礼多人不怪而且有时还很有帮助">礼多人不怪，而且有时还很有帮助</a></li><li><a href="#问题解决后加个简短的补充说明">问题解决后，加个简短的补充说明</a></li></ul></li><li><a href="#如何解读答案">如何解读答案</a><ul><li><a href="#rtfm-和-stfw如何知道你已完全搞砸了">RTFM 和 STFW：如何知道你已完全搞砸了</a></li><li><a href="#如果还是搞不懂">如果还是搞不懂</a></li><li><a href="#处理无礼的回应">处理无礼的回应</a></li></ul></li><li><a href="#如何避免扮演失败者">如何避免扮演失败者</a></li><li><a href="#不该问的问题">不该问的问题</a></li><li><a href="#好问题与蠢问题">好问题与蠢问题</a></li><li><a href="#如果得不到回答">如果得不到回答</a></li><li><a href="#如何更好地回答问题">如何更好地回答问题</a></li><li><a href="#相关资源">相关资源</a></li><li><a href="#鸣谢">鸣谢</a></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p><p><strong>本指南不提供此项目的实际支持服务！</strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准且语法正确的语句"><a href="#用清晰、正确、精准且语法正确的语句" class="headerlink" title="用清晰、正确、精准且语法正确的语句"></a>用清晰、正确、精准且语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it's</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/小白">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong>蠢问题</strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/">Google 是你的朋友</a></strong>！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong>聪明问题</strong>：</p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
    </entry>
    
    <entry>
      <title>flutter基础</title>
      <link href="2020/10/20/flutter%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/20/flutter%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="本文章知识来自于jspang（https-jspang-com-detailed-id-42-toc219），仅用于学习记录。"><a href="#本文章知识来自于jspang（https-jspang-com-detailed-id-42-toc219），仅用于学习记录。" class="headerlink" title="本文章知识来自于jspang（https://jspang.com/detailed?id=42# toc219），仅用于学习记录。"></a>本文章知识来自于jspang（<a href="https://jspang.com/detailed?id=42#">https://jspang.com/detailed?id=42#</a> toc219），仅用于学习记录。</h2><h2 id="Flutter页面的基本写法main-dart"><a href="#Flutter页面的基本写法main-dart" class="headerlink" title="Flutter页面的基本写法main.dart:"></a>Flutter页面的基本写法main.dart:</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//导入组件</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动入口</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义的运行模块？</span><span class="token comment" spellcheck="true">//需要继承自 StatelessWidget 并重写build方法</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">//app名称</span>      title<span class="token punctuation">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//页面展示的内容</span>       home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//bar</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//内容</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"hello world "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p>![0Y_Q0@`U1_A_ZPE_3559__C.png](<a href="https://i.loli.net/2020/10/20/joc9fil76LPmZqw.png">https://i.loli.net/2020/10/20/joc9fil76LPmZqw.png</a>)</p><h2 id="调整文本："><a href="#调整文本：" class="headerlink" title="调整文本："></a>调整文本：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">//app名称</span>      title<span class="token punctuation">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//页面展示的内容</span>       home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//bar</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//内容</span>       body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">"Stack Overflow is an open community "</span>                  <span class="token string">"for anyone that codes. We help you get "</span>                  <span class="token string">"answers to your toughest coding questions, "</span>                  <span class="token string">"share knowledge with your coworkers in private, "</span>                  <span class="token string">"and find your next dream job."</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//左对齐</span>            textAlign<span class="token punctuation">:</span> TextAlign<span class="token punctuation">.</span>left<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//最大显示1行</span>            maxLines<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//超出显示的部分怎么处理</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//调整文本的样式</span>            style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">//字号</span>              fontSize<span class="token punctuation">:</span> <span class="token number">25.0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//颜色</span>              color<span class="token punctuation">:</span> Color<span class="token punctuation">.</span><span class="token function">fromARGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//下划线</span>              decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>underline<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//下划线的类型</span>              decorationStyle<span class="token punctuation">:</span> TextDecorationStyle<span class="token punctuation">.</span>solid<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/20/OWL74SmzuqjrPeM.png" alt="NP~IGB90UZCLQ__3M33GLA6.png"></p><h2 id="页面容器Container："><a href="#页面容器Container：" class="headerlink" title="页面容器Container："></a>页面容器Container：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span>       home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//内部是一个Container</span>          child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>                <span class="token comment" spellcheck="true">//显示的文本</span>                <span class="token string">"hello saber"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//文本的样式...</span>                style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                  fontSize<span class="token punctuation">:</span> <span class="token number">40.0</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//容器靠左上浮动</span>            alignment<span class="token punctuation">:</span> Alignment<span class="token punctuation">.</span>topLeft<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//容器的尺寸</span>            width<span class="token punctuation">:</span> <span class="token number">500.0</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">400.0</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// color: Colors.lightGreenAccent,</span>            <span class="token comment" spellcheck="true">//内边距</span>            padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">fromLTRB</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//外边距</span>            margin<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//颜色渐变</span>            decoration<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>              gradient<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">LinearGradient</span><span class="token punctuation">(</span>                colors<span class="token punctuation">:</span> <span class="token punctuation">[</span>Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>Colors<span class="token punctuation">.</span>green<span class="token punctuation">,</span>Colors<span class="token punctuation">.</span>purple<span class="token punctuation">]</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//边框</span>              border<span class="token punctuation">:</span> Border<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span><span class="token number">2.0</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/20/HZn96JqCP1W2XVd.png" alt="U6QOXZ8ZE6XFDP_S~_8L1_Y.png"></p><h2 id="导入图片："><a href="#导入图片：" class="headerlink" title="导入图片："></a>导入图片：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>                appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>                    title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"MyApp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>                    <span class="token comment" spellcheck="true">//引入容器</span>                    child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>                        <span class="token comment" spellcheck="true">//引入网络图片 本地图片使用file</span>                        child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span>                            <span class="token string">'https://picabstract-preview-ftn.weiyun.com/'</span>                                    <span class="token string">'ftn_pic_abs_v3/6d37e151e59ca439abe2654102a31'</span>                                    <span class="token string">'63bee41ca67113bb3add51aa2fc9e16f27d0959cef2'</span>                                    <span class="token string">'a9b3625f7174e0aa15dbd830?pictype=scale&amp;from='</span>                                    <span class="token string">'30113&amp;version=3.3.3.3&amp;uin=1170398847&amp;fname='</span>                                    <span class="token string">'httpi0.hdslb.combfsarticledc607d09ad1347811af3fdb.'</span>                                    <span class="token string">'jpg&amp;size=750miui.com%2Fforum%2F201311%2F27%2F222526bjdipmjgzj1ibim7.jpg'</span><span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//对图像进行缩放 一般使用fill调整</span>                            scale<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//图像重复平铺整个容器 X、Y表示只用于横、纵向</span>                            <span class="token comment" spellcheck="true">//repeat: ImageRepeat.repeat,</span>                            <span class="token comment" spellcheck="true">//填充整个容器</span>                            <span class="token comment" spellcheck="true">//fit: BoxFit.fill,</span>                            <span class="token comment" spellcheck="true">//全图显示</span>                            <span class="token comment" spellcheck="true">//fit: BoxFit.contain,</span>                            <span class="token comment" spellcheck="true">//按比例放大填充整个容器</span>                            fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//高度充满</span>                            <span class="token comment" spellcheck="true">//fit: BoxFit.fitHeight,</span>                            <span class="token comment" spellcheck="true">//宽度充满</span>                            <span class="token comment" spellcheck="true">//fit: BoxFit.fitWidth,</span>                            <span class="token comment" spellcheck="true">//和contain类似，但是不允许显示超过原图片大小</span>                            <span class="token comment" spellcheck="true">//fit: BoxFit.scaleDown,</span>                            <span class="token comment" spellcheck="true">//要混合的颜色</span>                            color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>greenAccent<span class="token punctuation">,</span>                            <span class="token comment" spellcheck="true">//图片颜色混合模式</span>                            colorBlendMode<span class="token punctuation">:</span> BlendMode<span class="token punctuation">.</span>exclusion<span class="token punctuation">,</span>                        <span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//容器尺寸 可以从context中动态获取以适应不同设备</span>                        width<span class="token punctuation">:</span> <span class="token number">450.0</span> <span class="token punctuation">,</span>                        height<span class="token punctuation">:</span> <span class="token number">610.0</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//容器 颜色</span>                        color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>                    <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><pre><code>**未开启图片颜色混合：**</code></pre><p><img src="https://i.loli.net/2020/10/21/kU78jEalWZpXtCQ.png" alt="XF8J3OKY_@I_QHL_H7@J2DI.png"></p><pre><code>**开启图片颜色混合：**</code></pre><p><img src="https://i.loli.net/2020/10/21/izDm56LYqBMfgec.png" alt="DZN18~V7H@JT_XC__BH9TBI.png"></p><h2 id="纵向ListView列表组件"><a href="#纵向ListView列表组件" class="headerlink" title="纵向ListView列表组件:"></a>纵向ListView列表组件:</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">myApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">myApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"myApp"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"ListView"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//定义listview</span>        body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>          children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>            <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>              <span class="token comment" spellcheck="true">//图表类型</span>              leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>access_time<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//名称</span>              title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"access_time"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>              leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_balance<span class="token punctuation">)</span><span class="token punctuation">,</span>              title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"account_balance"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图片</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span>              <span class="token string">'https://picabstract-preview-ftn.weiyun.com/'</span>                  <span class="token string">'ftn_pic_abs_v3/6d37e151e59ca439abe2654102a31'</span>                  <span class="token string">'63bee41ca67113bb3add51aa2fc9e16f27d0959cef2'</span>                  <span class="token string">'a9b3625f7174e0aa15dbd830?pictype=scale&amp;from='</span>                  <span class="token string">'30113&amp;version=3.3.3.3&amp;uin=1170398847&amp;fname='</span>                  <span class="token string">'httpi0.hdslb.combfsarticledc607d09ad1347811af3fdb.'</span>                  <span class="token string">'jpg&amp;size=750miui.com%2Fforum%2F201311%2F27%2F222526bjdipmjgzj1ibim7.jpg'</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p>![64KDKJ__O2PXL7B`796GEFC.png](<a href="https://i.loli.net/2020/10/25/arUEo5vGuxVRY1s.png">https://i.loli.net/2020/10/25/arUEo5vGuxVRY1s.png</a>)</p><h2 id="横向ListView列表组件"><a href="#横向ListView列表组件" class="headerlink" title="横向ListView列表组件:"></a>横向ListView列表组件:</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">myApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">myApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'myApp'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>       body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>         child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>           height<span class="token punctuation">:</span> <span class="token number">200.0</span><span class="token punctuation">,</span>           child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ListView</span><span class="token punctuation">(</span>             <span class="token comment" spellcheck="true">//滚动方式 横向：Axis.horizontal  纵向：Axis.vertical</span>             scrollDirection<span class="token punctuation">:</span> Axis<span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>             children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>               <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                 width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>                 color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>                 child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>                    child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"lightBlue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                 width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>                 color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>amber<span class="token punctuation">,</span>                 child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>                   child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"amber"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                 width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>                 color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>deepOrange<span class="token punctuation">,</span>                 child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>                   child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"deepOrange"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>                 width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>                 color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>deepOrangeAccent<span class="token punctuation">,</span>                 child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>                   child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"deepAccent"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p>![3R_I~_6U___WJH_YWO`7YGV.png](<a href="https://i.loli.net/2020/10/25/YkpBQLlwoFsNWnU.png">https://i.loli.net/2020/10/25/YkpBQLlwoFsNWnU.png</a>)</p><p>​    <strong>代码优化</strong></p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">myApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">myApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"ListView Widget"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>            height<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//引用定义的组件</span>            child<span class="token punctuation">:</span> <span class="token function">MyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新建一个类继承StatelessWidget 返回一个ListView</span><span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">ListView</span><span class="token punctuation">(</span>      scrollDirection<span class="token punctuation">:</span> Axis<span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>      children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>          width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>          color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"lightBlue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>amber<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"amber"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>deepOrange<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"deepOrange"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>deepOrangeAccent<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"deepAccent"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/X6h4D2vOxEWbc9o.png" alt="WI_7BR_S_KTH3Y2WP_I_8OV.png"></p><h2 id="动态ListView列表"><a href="#动态ListView列表" class="headerlink" title="动态ListView列表:"></a>动态ListView列表:</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//传入一个数组</span>    items<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"item $index"</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> items<span class="token punctuation">;</span>  <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span><span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//构建列表</span>        body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ListView<span class="token punctuation">.</span>builder</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">//取出列表的容量</span>          itemCount<span class="token punctuation">:</span> items<span class="token punctuation">.</span>length<span class="token punctuation">,</span>          itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListTile</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"${items[index]}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/j6EehdSZvl5HcKI.png" alt="E__VHL01_ER8WS1L__R6UKE.png"></p><h2 id="GridView网格列表"><a href="#GridView网格列表" class="headerlink" title="GridView网格列表:"></a>GridView网格列表:</h2><h3 id="文字网格："><a href="#文字网格：" class="headerlink" title="文字网格："></a>文字网格：</h3><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        body<span class="token punctuation">:</span> GridView<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">//内边距</span>          padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">50.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//网格的数量（一行放几个元素）</span>          crossAxisCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//网格间的间隙</span>          crossAxisSpacing<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Stack Overflow is an open community"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"for anyone that codes. We help you get"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"answers to your toughest coding questions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"share knowledge with your coworkers in private"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"and find your next dream job"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Don't give up,you can make a difference!"</span><span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/ew2f3xtOvjsXNLW.png" alt="LOOUZZL_Q~CG8UXF_8P6_BA.png"></p><h2 id="网格图片列表："><a href="#网格图片列表：" class="headerlink" title="网格图片列表："></a>网格图片列表：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"电影列表"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          backgroundColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span> <span class="token function">GridView</span><span class="token punctuation">(</span>          gridDelegate<span class="token punctuation">:</span> <span class="token function">SliverGridDelegateWithFixedCrossAxisCount</span><span class="token punctuation">(</span>              crossAxisCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//网格之间的距离</span>              mainAxisSpacing<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//横轴的间距</span>              crossAxisSpacing<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//childAspectRatio:宽高比，宽是高的2倍就写2.0，如果高是宽的2倍就写0.5。</span>              childAspectRatio<span class="token punctuation">:</span> <span class="token number">0.68</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/10/22/104316.77318635_180X260X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/10/10/112514.30587089_180X260X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/13/093605.61422332_180X260X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/07/092515.55805319_180X260X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/21/090246.16772408_135X190X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/17/162028.94879602_135X190X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/19/165350.52237320_135X190X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/16/115256.24365160_180X260X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Image<span class="token punctuation">.</span>network</span><span class="token punctuation">(</span><span class="token string">'http://img5.mtime.cn/mt/2018/11/20/141608.71613590_135X190X4.jpg'</span><span class="token punctuation">,</span>fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/j4T839ZiUmte61W.png" alt="_1VKHD`~6`1FIRO7OF_3HF4.png"></p><h2 id="Row-水平（横向）布局："><a href="#Row-水平（横向）布局：" class="headerlink" title="Row 水平（横向）布局："></a>Row 水平（横向）布局：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"水平方向布局"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//横向布局</span>        body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Row</span><span class="token punctuation">(</span>          children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//不灵活的横向布局</span>            <span class="token keyword">new</span> <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>              color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"row1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//灵活的横向布局</span>            <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span>            <span class="token keyword">new</span> <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>              color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightGreen<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"row2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span>            <span class="token keyword">new</span> <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>              color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightGreenAccent<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"row3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span>            <span class="token keyword">new</span> <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>              color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightGreenAccent<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"row3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span>            <span class="token keyword">new</span> <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>              color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlueAccent<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"row4"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">RaisedButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>              color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>red<span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"row5"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/cuHoOJw3DyEdSYW.png" alt="R~OFE1XHH0__@_6W835W_~T.png"></p><h2 id="Column-垂直（纵向）布局："><a href="#Column-垂直（纵向）布局：" class="headerlink" title="Column 垂直（纵向）布局："></a>Column 垂直（纵向）布局：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/cupertino.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"垂直方向布局"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//纵向布局</span>       body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>         child<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>           <span class="token comment" spellcheck="true">//文字 副轴对齐方式</span>           crossAxisAlignment<span class="token punctuation">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//文字 主轴对齐方式</span>           mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>           children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>             <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Stack Overflow is an open community"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"answers to your toughest coding questions"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"share knowledge with your coworkers in private"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token function">Expanded</span><span class="token punctuation">(</span>child<span class="token punctuation">:</span>  <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"and find your next dream job"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Don't give up,you can make a difference!"</span><span class="token punctuation">)</span>           <span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/o1xQ6ZCb8ayvGqH.png" alt="_YTU_E9T8E5_LFV87_WN9AK.png"></p><h2 id="Stack层叠布局："><a href="#Stack层叠布局：" class="headerlink" title="Stack层叠布局："></a>Stack层叠布局：</h2><h3 id="使用container的方式："><a href="#使用container的方式：" class="headerlink" title="使用container的方式："></a>使用container的方式：</h3><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/cupertino.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//层叠布局</span>    <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">//对齐方式, 主轴和副轴</span>      alignment<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">FractionalOffset</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//头像</span>        <span class="token keyword">new</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>          backgroundImage<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">NetworkImage</span><span class="token punctuation">(</span><span class="token string">'https://picabstract-preview-ftn.weiyun.com/'</span>                                            <span class="token string">'ftn_pic_abs_v3/6d37e151e59ca439abe2654102a31'</span>                                            <span class="token string">'63bee41ca67113bb3add51aa2fc9e16f27d0959cef2'</span>                                            <span class="token string">'a9b3625f7174e0aa15dbd830?pictype=scale&amp;from='</span>                                            <span class="token string">'30113&amp;version=3.3.3.3&amp;uin=1170398847&amp;fname='</span>                                            <span class="token string">'httpi0.hdslb.combfsarticledc607d09ad1347811af3fdb.'</span>                                            <span class="token string">'jpg&amp;size=750miui.com%2Fforum%2F201311%2F27%2F22252'</span>                                            <span class="token string">'6bjdipmjgzj1ibim7.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//弧度</span>          radius<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//容器</span>        <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>          decoration<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>            color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//边距</span>          padding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"层叠布局"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>       body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>         <span class="token comment" spellcheck="true">//引入变量</span>        child<span class="token punctuation">:</span> stack<span class="token punctuation">,</span>       <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/3JaSbxOpoKWkl1g.png" alt="I@_7AC2_N~XHE_3__HLGPIW.png"></p><h3 id="使用Positioned的方式："><a href="#使用Positioned的方式：" class="headerlink" title="使用Positioned的方式："></a>使用Positioned的方式：</h3><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/cupertino.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//层叠布局</span>    <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">//对齐方式, 主轴和副轴</span>      alignment<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token function">FractionalOffset</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//头像</span>        <span class="token keyword">new</span> <span class="token class-name">CircleAvatar</span><span class="token punctuation">(</span>          backgroundImage<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">NetworkImage</span><span class="token punctuation">(</span><span class="token string">'https://picabstract-preview-ftn.weiyun.com/'</span>                                            <span class="token string">'ftn_pic_abs_v3/6d37e151e59ca439abe2654102a31'</span>                                            <span class="token string">'63bee41ca67113bb3add51aa2fc9e16f27d0959cef2'</span>                                            <span class="token string">'a9b3625f7174e0aa15dbd830?pictype=scale&amp;from='</span>                                            <span class="token string">'30113&amp;version=3.3.3.3&amp;uin=1170398847&amp;fname='</span>                                            <span class="token string">'httpi0.hdslb.combfsarticledc607d09ad1347811af3fdb.'</span>                                            <span class="token string">'jpg&amp;size=750miui.com%2Fforum%2F201311%2F27%2F22252'</span>                                            <span class="token string">'6bjdipmjgzj1ibim7.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//弧度</span>          radius<span class="token punctuation">:</span> <span class="token number">100.0</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Positioned</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">//顶部</span>          top<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>          left<span class="token punctuation">:</span> <span class="token number">85.0</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Positioned</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">//底部</span>          bottom<span class="token punctuation">:</span> <span class="token number">10.0</span><span class="token punctuation">,</span>          right<span class="token punctuation">:</span> <span class="token number">85.0</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"头像"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"层叠布局"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>       body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>         <span class="token comment" spellcheck="true">//引入变量</span>        child<span class="token punctuation">:</span> stack<span class="token punctuation">,</span>       <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/sYnxMjTyRkudqa2.png" alt="3TI7_N_@9KU~D~WOHY2M8_Q.png"></p><h2 id="卡片式布局："><a href="#卡片式布局：" class="headerlink" title="卡片式布局："></a>卡片式布局：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/cupertino.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">app</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//卡片布局</span>    <span class="token keyword">var</span> card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Card</span><span class="token punctuation">(</span>      child<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>        children<span class="token punctuation">:</span><span class="token operator">&lt;</span>Widget<span class="token operator">></span> <span class="token punctuation">[</span>          <span class="token function">ListTile</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//主标题</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"重庆市夔牛科技有限公司"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w500<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//副标题</span>            subtitle<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"陈先生:12345678911"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图标</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_box<span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//分割线</span>          <span class="token keyword">new</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">ListTile</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//主标题</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"重庆市夔牛科技有限公司"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w500<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//副标题</span>            subtitle<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"陈先生:12345678911"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图标</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_box<span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//分割线</span>          <span class="token keyword">new</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">ListTile</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//主标题</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"重庆市夔牛科技有限公司"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w500<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//副标题</span>            subtitle<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"陈先生:12345678911"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图标</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_box<span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//分割线</span>          <span class="token keyword">new</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">ListTile</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//主标题</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"重庆市夔牛科技有限公司"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w500<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//副标题</span>            subtitle<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"陈先生:12345678911"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图标</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_box<span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//分割线</span>          <span class="token keyword">new</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">ListTile</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//主标题</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"重庆市夔牛科技有限公司"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w500<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//副标题</span>            subtitle<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"陈先生:12345678911"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图标</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_box<span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//分割线</span>          <span class="token keyword">new</span> <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">ListTile</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">//主标题</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"重庆市夔牛科技有限公司"</span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>w500<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//副标题</span>            subtitle<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"陈先生:12345678911"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//图标</span>            leading<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>account_box<span class="token punctuation">,</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>lightBlue<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"卡片式布局"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>       body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>         <span class="token comment" spellcheck="true">//引入变量</span>        child<span class="token punctuation">:</span> card<span class="token punctuation">,</span>       <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><p><img src="https://i.loli.net/2020/10/25/znV2R6QlhJAqSuD.png" alt="0NHQ56_6_WDKVY__KBPY1TP.png"></p><h2 id="RaisedButton按钮组件（页面跳转）"><a href="#RaisedButton按钮组件（页面跳转）" class="headerlink" title="RaisedButton按钮组件（页面跳转）:"></a>RaisedButton按钮组件（页面跳转）:</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/cupertino.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>    title<span class="token punctuation">:</span> <span class="token string">"navigator"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//这里需要一个Scaffold</span>    home<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">FirstSreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FirstSreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所以这里返回一个Scaffold</span>    <span class="token keyword">return</span> <span class="token keyword">new</span>  <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"导航页"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//使用RaisedButton</span>        child<span class="token punctuation">:</span> <span class="token function">RaisedButton</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">//设置按钮的名称</span>          child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"查看详情"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//绑定点击事件</span>          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MaterialPageRoute</span><span class="token punctuation">(</span>              <span class="token comment" spellcheck="true">//点击后去创建一个SecondScreen</span>              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SecondScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SecondScreen</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"详情页"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token function">RaisedButton</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"返回"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Navigator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><h5 id="导航页："><a href="#导航页：" class="headerlink" title="导航页："></a>导航页：</h5><p><img src="https://i.loli.net/2020/10/25/nC2GxMYlryg7E4W.png" alt="J4R7YOIGO@GAVXK`~NZ_`QO.png"></p><h5 id="详情页："><a href="#详情页：" class="headerlink" title="详情页："></a>详情页：</h5><p>![TUGVHTKQZ~1_E_@`A_ECS@A.png](<a href="https://i.loli.net/2020/10/25/WZ6NYiLPnDrEwHF.png">https://i.loli.net/2020/10/25/WZ6NYiLPnDrEwHF.png</a>)</p><h2 id="导航参数的传递："><a href="#导航参数的传递：" class="headerlink" title="导航参数的传递："></a>导航参数的传递：</h2><pre class="line-numbers language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">{</span>  <span class="token keyword">final</span> String title<span class="token punctuation">;</span>  <span class="token keyword">final</span> String description<span class="token punctuation">;</span>  <span class="token function">Product</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MaterialApp</span><span class="token punctuation">(</span>    title<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>    home<span class="token punctuation">:</span> <span class="token function">ProductList</span><span class="token punctuation">(</span>      products<span class="token punctuation">:</span>List<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Product</span><span class="token punctuation">(</span><span class="token string">'商品 $i'</span><span class="token punctuation">,</span> <span class="token string">'这是一个商品详情页，标号为$i'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProductList</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> products<span class="token punctuation">;</span>  <span class="token function">ProductList</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span><span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>products<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">"商品列表"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> ListView<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>        itemCount<span class="token punctuation">:</span> products<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">ListTile</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>products<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>                builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ProductDetail</span><span class="token punctuation">(</span>product<span class="token punctuation">:</span> products<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProductDetail</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span><span class="token punctuation">{</span>  <span class="token keyword">final</span> Product product<span class="token punctuation">;</span>  <span class="token function">ProductDetail</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span><span class="token metadata symbol">@required</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">'${product.description}'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">'${product.description}'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><h5 id="导航页：-1"><a href="#导航页：-1" class="headerlink" title="导航页："></a>导航页：</h5><p><img src="https://i.loli.net/2020/10/26/VIugYDXtUZMe3dz.png" alt="_LGP_I_XLJW2_L8KY3__AM5.png"></p><p><strong>详情页：</strong></p><p><img src="https://i.loli.net/2020/10/26/dHgSq1rWiNzbKe5.png" alt="RRNR_PM_R_1F_XMQRP_7_G5.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> flutter </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OOM实例</title>
      <link href="2020/09/20/OOM%E5%AE%9E%E4%BE%8B/"/>
      <url>2020/09/20/OOM%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h4 id="java引用-："><a href="#java引用-：" class="headerlink" title="java引用 ："></a>java引用 ：</h4><ul><li><p>强 普通引用 </p><pre class="line-numbers language-java"><code class="language-java">M m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> null<span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>软 当堆内存不够用时才回收 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置最大堆大小为20</span><span class="token comment" spellcheck="true">//m指向强引用SoftReference SoftReference指向软引用10m的数组</span>SoftReference<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//还能拿到值</span><span class="token comment" spellcheck="true">//当堆内存不够用时才回收</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//为null </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>弱 （当他不存在）gc时立即回收</p><pre class="line-numbers language-java"><code class="language-java">WeakReference<span class="token operator">&lt;</span>M<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>虚 跟踪gc回收 管理直接内存（堆外内存）零拷贝</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//gc时查询引用队列 发出通知此对象要被回收了</span>PhantomReference<span class="token operator">&lt;</span>M<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span>M<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span><span class="token comment" spellcheck="true">//堆外缓冲区</span>ByteBuffer b <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="ThreadLocal-底层是一个map-set时-key为当前线程，v为值"><a href="#ThreadLocal-底层是一个map-set时-key为当前线程，v为值" class="headerlink" title="ThreadLocal 底层是一个map set时 key为当前线程，v为值"></a>ThreadLocal 底层是一个map set时 key为当前线程，v为值</h5><pre class="line-numbers language-java"><code class="language-java">ThreadLocal<span class="token operator">&lt;</span>Persion<span class="token operator">></span> t  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//t指向的ThreadLocal是强引用 当t = null时 ThreadLocal里的map对象需要被回收 </span><span class="token comment" spellcheck="true">//如果map为强引用则 map不会被回收 会造成oom</span><span class="token comment" spellcheck="true">//k为null时 v访问不到但是不会被回收 所以ThreadLocal必须使用remove方法</span>t<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对于线程池来说 如果不执行remove()方法线程归还后v的值还在 再次获取线程会复用旧值造成值错乱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="程序、进程、线程："><a href="#程序、进程、线程：" class="headerlink" title="程序、进程、线程："></a>程序、进程、线程：</h5><p><strong>程序：</strong> qq.exe</p><p><strong>进程：</strong> 程序启动分配内存 资源分配的基本单位</p><p><strong>线程：</strong> 程序执行的基本单位</p><p><strong>程序的执行顺序：</strong>a = 2+3</p><ol><li><p>通过总线读取数据到寄存器里</p></li><li><p>使用ALU计算单元完成计算返回到内存</p></li><li><p>pc寄存器指向下一个指令</p><p>CPU的运行顺序：读指令–pc，读数据–register ，计算–AlU，会写–内存，下一条指令</p></li></ol><h5 id="CAS："><a href="#CAS：" class="headerlink" title="CAS："></a>CAS：</h5><p><strong>操作流程</strong>：</p><p>拿到旧值old1–执行计算v = old1+1–再次读取old2–进行比较old1==old2，相等就写回，不相等就再次读取一直重试</p><p><img src="https://i.loli.net/2020/09/10/jPiG21S8cRTpfaE.png" alt="W_U9_Y__ND__QJ8_446~4YG.png"></p><p><strong>ABA问题：</strong></p><p>​     读取的旧值为0，操作完成后再次读取还是为0，但是执行了0-8-0这个过程</p><p>​     解决方法 加上版本号，每次执行时版本号增加，写回时读取并比较版本号</p><p><strong>CAS原子性问题</strong>：</p><p>​     在操作数据时必须保证原子性，不能被其他线程修改；</p><p>​     底层使用汇编指令保证 lock（锁总线） cmpxchg</p><p><strong>AtomicInteger</strong>实现自旋锁：</p><pre><code>private static AtomicInteger m = new AtomicInteger(0);//m++m.incrementAndGet(); //底层调用 unsafe.getAndAddInt(this,valueOffset,1)+1;//getAndAddInt()调用this.compareAndSwapInt(var1,var2,var5,var5+var4);</code></pre><p><strong>Synchronize实现原理：</strong></p><p>（对象锁）通过monitorenter和monitorexit来实现的</p><p>（方法锁）使用ACC_SYNCHRONIZED修饰，。它会在常量池中增加一个标识符，获取它的monitor。</p><p>锁的四种状态：一个线程偏向锁–多个线程轻度竞争–多个线程重度竞争（或自旋次数过多）重量锁</p><p><strong>new：</strong></p><p><strong>轻量级锁：</strong></p><p>​    用户解决的锁</p><p>​    cas自旋while（） 竞争很激烈时cpu上下文切换频繁消耗资源</p><p><strong>重量级锁：</strong></p><p>​    需要操作系统调度的锁</p><p>​    加入等待队列由操作系统调度</p><p><strong>偏向锁：</strong></p><p>​    偏向于第一个访问锁的线程，如果在运行过程中，同步锁只有一个线程访问，不存在多线程争用的情况，则线程是不需要触发同步的，这种情况下，就会给线程加一个偏向锁。 </p><p>![UQ_Y3I0_IULC@Y__4RP`M_K.png](<a href="https://i.loli.net/2020/09/10/s1oRtKhraJlXkFO.png">https://i.loli.net/2020/09/10/s1oRtKhraJlXkFO.png</a>)</p><p><strong>寄存器的层次结构</strong>：</p><p>cache line一次加载64个字节</p><p>pc寄存器的指令计算需要x的值 首先会按序加载L1–&gt;L2–&gt;L3–&gt;内存 寄存器将x交给ALU计算 然后写回 pc寄存器读取下一个指令<br>内核2需要y的值直接从L3中读取</p><p><img src="https://i.loli.net/2020/09/10/QheuWkdCc3yMz6O.png" alt="V_BMVR@QU_AOB_SL@UURIMX.png"></p><p>缓存行对齐：</p><p>​    xy处于同一行 当并发修改时，内核c1修改完x会通知内核c2，c2去内存中再次读取修改y，再通知c1这个过程很耗时</p><p>   假设xy都为long（占用8个字节）类型，在x的前面填充7个long类型对象，在其后添加8个long对象，再执行操作，由于xy不处于同一缓存行，省去通知、读取的时间</p><h5 id="缓存一致性协议：MESI-Cache（一致性协议）"><a href="#缓存一致性协议：MESI-Cache（一致性协议）" class="headerlink" title="缓存一致性协议：MESI Cache（一致性协议）"></a>缓存一致性协议：MESI Cache（一致性协议）</h5><p><strong>Modified：修改</strong></p><p><strong>Exclusive：独占</strong></p><p><strong>Shared：共享</strong></p><p><strong>Invalid：失效</strong></p><p>假设缓存行在两个核心中使用，当c1修改后会通知c2，c2将该行数据标记为Invalid，c2需要重新从内存中读取。</p><h5 id="volatile："><a href="#volatile：" class="headerlink" title="volatile："></a>volatile：</h5><p><strong>线程间通信</strong></p><ul><li>volatile修饰的变量被当前线程修改后其他线程会感知到    </li></ul><p><strong>禁止指令重排序</strong></p><ul><li><p>如果不用volatile修饰可能发生指令重排序，<strong>invokespecial</strong>在<strong>astore_1</strong>之后执行，o拿到的时一个半初始化状态的对象</p></li><li><h5 id="Object-o-new-Object-的初始化过程："><a href="#Object-o-new-Object-的初始化过程：" class="headerlink" title="Object o  = new Object()的初始化过程："></a>Object o  = new Object()的初始化过程：</h5></li></ul><ol><li><strong>new</strong>：申请一块内存空间用来存放对象</li><li><strong>invokespecial</strong>：调用构造方法对属性赋值（半初始化对象)</li><li><strong>astore_1</strong>：建立o和对象的关联（指针指向堆内存）</li></ol><h5 id="单例模式为什么需要dlc操作："><a href="#单例模式为什么需要dlc操作：" class="headerlink" title="单例模式为什么需要dlc操作："></a>单例模式为什么需要dlc操作：</h5><p>如果不用volatile修饰可能发生指令重排序，<strong>invokespecial</strong>在<strong>astore_1</strong>之后执行，INSTACE拿到的时一个半初始化状态的对象</p><p>细化锁的力度将锁加载在方法内部时，当线程T1执行到第17行时被暂停，T2执行创建、返回对象，T1再次执行创建、返回对象</p><p><img src="https://i.loli.net/2020/09/10/F9pB75xCHKscm38.png" alt="Q_S`@`U82B8_G8_Z_KCM_ID.png"></p><p><strong>解决方法：dcl(double check lock):</strong></p><p>加锁前检查一次（减少并发下的竞争），加锁后再检查一次</p><p><img src="https://i.loli.net/2020/09/10/OT9kEtDHJNG2XfB.png" alt="M2_KX7_BNP3IISU1S_~F_CF.png"></p><h5 id="内存屏障："><a href="#内存屏障：" class="headerlink" title="内存屏障："></a>内存屏障：</h5><p><strong>JVM层面</strong>：（happens-before原则）</p><ul><li>写操作 在前面添加StoreStore 在后面添加StoreLoad</li><li>读操作  在之后添加LoadLoad LoadStore</li></ul><p><strong>Hotspot实现：</strong></p><ul><li><strong>lock addl</strong>总线锁定 <ul><li>对共享内存的独占使用</li><li>将当前处理器的缓存刷新到内存，使其他处理器的缓存失效</li><li>指令无法越过这个内存屏障</li></ul></li></ul><h5 id="jvm如何确定一个对象是垃圾："><a href="#jvm如何确定一个对象是垃圾：" class="headerlink" title="jvm如何确定一个对象是垃圾："></a>jvm如何确定一个对象是垃圾：</h5><ul><li><p>引用计数 reference count</p></li><li><p>根可达性 root searching</p></li></ul><h5 id="GC算法有哪些："><a href="#GC算法有哪些：" class="headerlink" title="GC算法有哪些："></a>GC算法有哪些：</h5><ul><li><strong>mark-sweep 标记清除</strong>（效率高 会产生碎片化问题）</li><li><strong>copying 复制</strong>（浪费空间 Eden区 8:1:1 使用此算法，每次使用一半的空间，有用的拷贝到to，清除from区）</li><li><strong>mark-compact标记压缩</strong>（效率低节约空间 老年代使用此算法）</li></ul><h5 id="垃圾回收器："><a href="#垃圾回收器：" class="headerlink" title="垃圾回收器："></a>垃圾回收器：</h5><p>分代：将内存分为两大块</p><p>分区：将内存分为一片一片</p><p><img src="https://s1.ax1x.com/2020/09/11/wYghWR.png" alt="wYghWR.png"></p><h5 id="堆内存的逻辑分区："><a href="#堆内存的逻辑分区：" class="headerlink" title="堆内存的逻辑分区："></a>堆内存的逻辑分区：</h5><p>![LB0I_1AC2`VEA_M0_3_DA50.png](<a href="https://i.loli.net/2020/09/11/NxmGJP8M43v5Tph.png">https://i.loli.net/2020/09/11/NxmGJP8M43v5Tph.png</a>)</p><h5 id="对象的生命周期："><a href="#对象的生命周期：" class="headerlink" title="对象的生命周期："></a>对象的生命周期：</h5><p>new对象 </p><ul><li><p>进入栈？（逃逸分析和标量替换）出栈消亡</p><p>JVM通过逃逸分析确定该对象不会被外部访问。那就通过标量替换将该对象分解在栈上分配内存</p><ul><li><p><strong>逃逸分析</strong>：分析在程序的哪些地方可以访问到该指针，避免野指针</p></li><li><p><strong>标量替换：</strong>A中数据都为基本数据类型，可以用两个int数据替代</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>进入老年代（对象很大） 发生FullGC</p></li><li><p>进入TLAB （Thread Local Allocation Buffer）线程本地内存分配缓冲区</p><ul><li>进入 Eden  发生YoungGC</li></ul></li></ul><p>对象创建后进入Eden区，第一次GC时存活的对象（包括to区的）拷贝到from区，将from和to交换，清空Eden和from区，对象年龄+1，当年龄大于15后进入老年代</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java面试题</title>
      <link href="2020/09/12/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2020/09/12/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="一、java基础："><a href="#一、java基础：" class="headerlink" title="一、java基础："></a>一、java基础：</h2><h4 id="面向对象和面向过程的区别："><a href="#面向对象和面向过程的区别：" class="headerlink" title="面向对象和面向过程的区别："></a>面向对象和面向过程的区别：</h4><ul><li><p><strong>面向过程</strong>： 性能高  没有面向对象易维护、易扩展</p></li><li><p><strong>面向对象</strong>：性能比面向对象低 易维护、易扩展、易复用</p></li></ul><h4 id="Java-语言有哪些特点："><a href="#Java-语言有哪些特点：" class="headerlink" title="Java** 语言有哪些特点："></a>Java** 语言有哪些特点：</h4><ol><li><p>简单易学；</p></li><li><p>面向对象（封装，继承，多态）；</p></li><li><p>平台无关性（ Java 虚拟机实现平台无关性）；</p></li><li><p>可靠性；</p></li><li><p>安全性；</p></li><li><p>支持多线程</p></li><li><p>支持网络编程并且很方便</p></li><li><p>编译与解释并存；</p></li></ol><h4 id="构造器-Constructor-是否可被-override"><a href="#构造器-Constructor-是否可被-override" class="headerlink" title="构造器 Constructor 是否可被 override"></a><strong>构造器</strong> <strong>Constructor</strong> <strong>是否可被</strong> <strong>override</strong></h4><p>父类的私有属性和构造方法并不能被继承，所以Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以一个类中有多个构造函数。</p><h4 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a><strong>重载和重写的区别</strong></h4><p><strong>重载：</strong> 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序</p><p>不同，方法返回值和访问修饰符可以不同，发生在编译时。</p><p><strong>重写：</strong> 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父</p><p>类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类</p><p>方法访问修饰符为 private 则子类就不能重写该方法</p><p><strong>Java</strong> <strong>面向对象编程三大特性**</strong>:** <strong>封装 继承 多态</strong></p><p><strong>封装</strong>：把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法</p><p><strong>多态</strong>：程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定</p><pre><code>Person p = new Teacher();</code></pre><p><strong>继承</strong>：使用已存在的类的定义作为基础建立新类，方便代码复用</p><ul><li>子类拥有父类非 private 的属性和方法。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li></ul><p><strong>String</strong> <strong>为什么是不可变的</strong></p><p>String 类中使用 final 关键字字符数组保存字符串，所以 String 对象是不可变的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="String-StringBuffer-和-StringBuilder-的区别-是什么"><a href="#String-StringBuffer-和-StringBuilder-的区别-是什么" class="headerlink" title="String StringBuffer 和 StringBuilder 的区别**是什么"></a><strong>String StringBuffer</strong> <strong>和</strong> <strong>StringBuilder</strong> <strong>的区别**</strong>是什么</h4><p> 他们都继承自<strong>AbstractStringBuilder</strong></p><table><thead><tr><th align="center"></th><th align="center">StringBuilder</th><th align="center">StringBuffer</th></tr></thead><tbody><tr><td align="center"><strong>线程安全性</strong></td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center"><strong>性能</strong></td><td align="center">比sb快10%</td><td align="center">好</td></tr></tbody></table><h4 id="在-Java-中定义一个不做事的无惨构造-方法的作用"><a href="#在-Java-中定义一个不做事的无惨构造-方法的作用" class="headerlink" title="在 Java 中定义一个不做事的无惨构造**方法的作用**"></a><strong>在</strong> <strong>Java</strong> <strong>中定义一个不做事的无惨构造**</strong>方法的作用**</h4><p>Java 程序在执行子类的构造方法之前，如果没有用 super() 来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。</p><h4 id="对象的相等与指向他们的引用相等，两者有什么不同？"><a href="#对象的相等与指向他们的引用相等，两者有什么不同？" class="headerlink" title="对象的相等与指向他们的引用相等，两者有什么不同？"></a><strong>对象的相等与指向他们的引用相等，两者有什么不同？</strong></h4><p><strong>对象相等</strong>：是内存中存放的内容是否相等。</p><p><strong>引用相等</strong>：指向的内存地址是否相等</p><h4 id="与-equals"><a href="#与-equals" class="headerlink" title="== 与 equals"></a><strong>==</strong> <strong>与</strong> <strong>equals</strong></h4><p><strong>==</strong> : 判断地址是否相等，是否为同一对象（基本数据类型比较的是值，引用数据类型比较的是内存地址)</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li><p>情况 1：没有重写 equals() 方法时，等价于通过“==”比较这两个对象。</p></li><li><p>情况 2：类重写equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p></li></ul><h4 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode 与 equals"></a><strong>hashCode</strong> <strong>与</strong> <strong>equals</strong></h4><ul><li><p><strong>hashCode()</strong> ：获取哈希码，返回一个 int 整数。</p></li><li><p><strong>为什么要有</strong> <strong>hashCode</strong>：对于HashSet 而言，需要检查重复元素，在添加元素前会根据hashcode计算位置，再次添加时先判断hashcode是否是否相等，减少<strong>equals</strong>的次数提升了效率。</p></li><li><p><strong>hashCode**</strong>（）与** <strong>equals**</strong>（）的相关规定**</p><ol><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等,对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li><li>重写equals时必须重写hashcode</li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该 class 的两个对象无论如何都不会相等</li></ol></li></ul><h4 id="final-关键字的一些总结"><a href="#final-关键字的一些总结" class="headerlink" title="final 关键字的一些总结"></a><strong>final</strong> <strong>关键字的一些总结</strong></h4><ol><li><p>对于一个 final 变量，如果是基本数据类型，则其数值在初始化之后不能更改；如果是引用类型，则在对其初始化之后便不能再让其指向另一个对象。</p></li><li><p>当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。</p></li><li><p>使用 final 方法的原因有两个:</p><ul><li>第一个原因是把方法锁定，以防任何继承类修改它的含义；</li><li>第二个原因是效率。在早期的 Java 实现版本中，会将final 方法转为内嵌调用。</li></ul></li></ol><p><strong>在以下</strong> <strong>4</strong> <strong>种特殊情况下，finally 块不会被执行：</strong></p><ol><li><p>在 finally 语句块中发生了异常。</p></li><li><p>在前面的代码中用了 System.exit()退出程序。</p></li><li><p>程序所在的线程死亡。</p></li><li><p>关闭 CPU。</p></li></ol><hr><h2 id="二、集合框架"><a href="#二、集合框架" class="headerlink" title="二、集合框架"></a>二、集合框架</h2><p><strong>ArrayList 和 Vector 的区别</strong></p><p>这两个类都实现了 List 接口，存储的元素的是有序可重复的</p><ul><li><strong>ArrayList</strong>：线程不安全 适合多线程 扩容为原来的1.5倍</li><li><strong>Vector</strong>：线程安全 单线程效率高 默认扩容为原来的2倍</li></ul><h4 id="ArrayList-Vector-LinkedList-的存储性能和特性。"><a href="#ArrayList-Vector-LinkedList-的存储性能和特性。" class="headerlink" title="ArrayList,Vector, LinkedList 的存储性能和特性。"></a><strong>ArrayList,Vector, LinkedList 的存储性能和特性。</strong></h4><ul><li><strong>ArrayList 和 Vector</strong> ：Object数组实现 查询快 增删慢</li><li><strong>LinkedList</strong> ：使用双向链表实现 增删快 查询慢</li></ul><h4 id="快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？" class="headerlink" title="快速失败 (fail-fast) 和安全失败 (fail-safe) 的区别是什么？"></a><strong>快速失败 (fail-fast) 和安全失败 (fail-safe) 的区别是什么？</strong></h4><p>快速失败的迭代器会抛出ConcurrentModificationException 异常，而安全失败的迭代器永远不会抛出这样的异常。</p><h4 id="hashmap-的数据结构"><a href="#hashmap-的数据结构" class="headerlink" title="hashmap 的数据结构"></a><strong>hashmap 的数据结构</strong></h4><p>Hashmap 实际上是一个数组和链表的结合体</p><h4 id="HashMap-的工作原理是什么"><a href="#HashMap-的工作原理是什么" class="headerlink" title="HashMap 的工作原理是什么?"></a><strong>HashMap 的工作原理是什么?</strong></h4><p>以键值对 (key-value) 的形式存储元素的。使用 hashCode()和 equals()方法来添加和检索元素。当调用 put() 方法的时候，HashMap 会计算 key 的 hash 值，然后把键值对存储在集合中合适的索引上。 如果 key 已经存在了，value 会被更新成新值。HashMap 的一些重要的特性是它的容量 (capacity)，负载因子 (load factor) 和扩容极限(threshold resizing）</p><h4 id="Hashmap-什么时候进行扩容呢？"><a href="#Hashmap-什么时候进行扩容呢？" class="headerlink" title="Hashmap 什么时候进行扩容呢？"></a><strong>Hashmap 什么时候进行扩容呢？</strong></h4><p>当 hashmap 中的元素个数超过数组大小 *0.75 时，就会进行数组扩容</p><h4 id="两个对象值相同-x-equals-y-true-，但却可有不同的-hash-code，这句话对不对"><a href="#两个对象值相同-x-equals-y-true-，但却可有不同的-hash-code，这句话对不对" class="headerlink" title="两个对象值相同 (x.equals(y) == true)，但却可有不同的 hash code，这句话对不对?"></a><strong>两个对象值相同 (x.equals(y) == true)，但却可有不同的 hash code，这句话对不对?</strong></h4><p>对。如果对象保存在 HashSet 或 HashMap 中，它们的 equals 相等，hashcode 值就必须相等。</p><p>如果不是要保存在 HashSet 或 HashMap，则与 hashcode 没有什么关系了，这时候 hashcode 不等是可以的，</p><h4 id="Java-集合类框架的基本接口有哪些"><a href="#Java-集合类框架的基本接口有哪些" class="headerlink" title="Java 集合类框架的基本接口有哪些"></a><strong>Java 集合类框架的基本接口有哪些</strong></h4><ul><li><p><strong>Collection：</strong>代表一组对象，每一个对象都是它的子元素。</p></li><li><p><strong>Set：</strong>不包含重复元素的 Collection。</p></li><li><p><strong>List：</strong>有顺序的 collection，并且可以包含重复元素。</p></li><li><p><strong>Map：</strong>可以把键 (key) 映射到值 (value) 的对象，键不能重复。</p></li></ul><p><strong>HashSet</strong> ：</p><p>由一个 hash 表来实现，它的元素是无序的， 值是作为 HashMap 的 key 存储在HashMap 中，</p><h4 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器 (Iterator)？"></a><strong>什么是迭代器 (Iterator)？</strong></h4><p>Iterator 接口提供了很多对集合元素进行迭代的方法，可以在迭代的过程中删除底层集合的元素, 但是不可以直接调用集合的 remove(Object Obj) 删除，可以通过迭代器的 remove() 方法删除</p><h4 id="Iterator-和-ListIterator-的区别是什么？"><a href="#Iterator-和-ListIterator-的区别是什么？" class="headerlink" title="Iterator 和 ListIterator 的区别是什么？"></a><strong>Iterator 和 ListIterator 的区别是什么？</strong></h4><ul><li><p>Iterator：</p><p>可用来遍历 Set 和 List 前向遍历</p></li><li><p>ListIterator ：</p><p>只能遍历 List 前向、后向遍历</p></li></ul><h4 id="Java-集合类框架的最佳实践有哪些？"><a href="#Java-集合类框架的最佳实践有哪些？" class="headerlink" title="Java 集合类框架的最佳实践有哪些？"></a><strong>Java 集合类框架的最佳实践有哪些？</strong></h4><ul><li><p>假如元素的大小是固 定的，而且能事先知道，我们就应该用 Array 而不是ArrayList。 </p></li><li><p>有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置 初始容量来避免重新计算 hash 值或者是扩容。</p></li><li><p>为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的 ClassCastException。 </p></li><li><p>使用 JDK 提供的不变类 (immutable class) 作为 Map 的键可以避免为我们自己的类实现 hashCode()和 equals()方法。</p></li><li><p>编程的时候接口优于实现。</p></li><li><p>底层的集合实际上是空的情况下，返回长度是 0 的集合或者是数组，不要返回 null。</p></li></ul><h2 id="三、并发编程"><a href="#三、并发编程" class="headerlink" title="三、并发编程"></a>三、并发编程</h2><h2 id="Synchronized-相-关-问-题："><a href="#Synchronized-相-关-问-题：" class="headerlink" title="Synchronized 相 关 问 题："></a><strong>Synchronized 相 关 问 题</strong>：</h2><h4 id="问-题-一-：-Synchronized-用-过-吗-，-其-原-理-是-什-么-？"><a href="#问-题-一-：-Synchronized-用-过-吗-，-其-原-理-是-什-么-？" class="headerlink" title="问 题 一 ： Synchronized 用 过 吗 ， 其 原 理 是 什 么 ？"></a><strong>问 题 一 ：</strong> Synchronized 用 过 吗 ， 其 原 理 是 什 么 ？</h4><p>Synchronized 是 由 JVM 实 现 的 一 种 实 现 互 斥 同 步 的 一 种 方 式 ， 会 发 现 ，被 Synchronized 修 饰 过 的 程 序 块 ， 在 编 译 前 后 被 编 译 器 生 成 了monitorenter 和 monitorexit 两 个 字 节 码 指 令 。</p><p><strong>monitorenter</strong> ：尝试获 取 对 象 的 锁 ，成功计数+1，失败就阻塞等待</p><p><strong>monitorexit</strong>： 计数-1</p><p>当计数器为0，锁释放</p><h4 id="问-题-二-：-你-刚-才-提-到-获-取-对-象-的-锁-，-这-个-“-锁-”-到-底-是-什-么-？-如-何-确-定对-象-的-锁-？"><a href="#问-题-二-：-你-刚-才-提-到-获-取-对-象-的-锁-，-这-个-“-锁-”-到-底-是-什-么-？-如-何-确-定对-象-的-锁-？" class="headerlink" title="问 题 二 ： 你 刚 才 提 到 获 取 对 象 的 锁 ， 这 个 “ 锁 ” 到 底 是 什 么 ？ 如 何 确 定对 象 的 锁 ？"></a><strong>问 题 二 ：</strong> 你 刚 才 提 到 获 取 对 象 的 锁 ， 这 个 “ 锁 ” 到 底 是 什 么 ？ 如 何 确 定对 象 的 锁 ？</h4><p>在并发编程中，经常会遇到多个线程访问同一个共享变量，当同时对共享变量进行读写操作时，就会产生数据不一致的情况。JVM为了保证同一时刻只有一个线程执行对应的代码块就引入了锁的概念。</p><h5 id="“-锁-”-的-本-质-其-实-是-monitorenter-和-monitorexit-字-节-码-指-令-的-一个-Reference-类-型-的-参-数-，-即-要-锁-定-和-解-锁-的-对-象-。"><a href="#“-锁-”-的-本-质-其-实-是-monitorenter-和-monitorexit-字-节-码-指-令-的-一个-Reference-类-型-的-参-数-，-即-要-锁-定-和-解-锁-的-对-象-。" class="headerlink" title="“ 锁 ” 的 本 质 其 实 是 monitorenter 和 monitorexit 字 节 码 指 令 的 一个 Reference 类 型 的 参 数 ， 即 要 锁 定 和 解 锁 的 对 象 。"></a>“ 锁 ” 的 本 质 其 实 是 monitorenter 和 monitorexit 字 节 码 指 令 的 一个 Reference 类 型 的 参 数 ， 即 要 锁 定 和 解 锁 的 对 象 。</h5><ol><li><p>如 果 Synchronized 明 确 指 定 了 锁 对 象 ， 比 如 Synchronized（ 变 量名 ） 、 Synchronized(this) 等 ， 说 明 加 解 锁 对 象 为 该 对 象 。</p></li><li><p>如 果 没 有 明 确 指 定 ：</p><ul><li>若 Synchronized 修 饰 的 方 法 为 非 静 态 方 法 ， 表 示 此 方 法 对 应 的 对 象 为锁 对 象 ；</li><li>若 Synchronized 修 饰 的 方 法 为 静 态 方 法 ， 则 表 示 此 方 法 对 应 的 类 对 象为 锁 对 象 。</li></ul></li></ol><ul><li><strong>注 意 ， 当 一 个 对 象 被 锁 住 时 ， 对 象 里 面 所 有 用 Synchronized 修 饰 的方 法 都 将 产 生 堵 塞 ， 而 对 象 里 非 Synchronized 修 饰 的 方 法 可 正 常 被调 用 ， 不 受 锁 影 响</strong> </li></ul><h4 id="问-题-三-：-什-么-是-可-重-入-性-，-为-什-么-说-Synchronized-是-可-重-入-锁-？"><a href="#问-题-三-：-什-么-是-可-重-入-性-，-为-什-么-说-Synchronized-是-可-重-入-锁-？" class="headerlink" title="问 题 三 ： 什 么 是 可 重 入 性 ， 为 什 么 说 Synchronized 是 可 重 入 锁 ？"></a><strong>问 题 三 ：</strong> 什 么 是 可 重 入 性 ， 为 什 么 说 Synchronized 是 可 重 入 锁 ？</h4><p><strong>可 重 入 性</strong> ：当前线程已经拥有了该锁的前提下，还能继续的获取该锁</p><ul><li>在 执 行monitorenter 指 令 时 ， 如 果 这 个 对 象 没 有 锁 定 ， 或 者 当 前 线 程 已 经 拥有 了 这 个 对 象 的 锁 （ 而 不 是 已 拥 有 了 锁 则 不 能 继 续 获 取 ） ， 就 把 锁 的 计数 器 +1， 其 实 本质 上 就 通 过 这 种 方 式 实 现 了 可 重 入 性 </li></ul><h4 id="问-题-四-：-JVM-对-Java-的-原-生-锁-做-了-哪-些-优-化-？"><a href="#问-题-四-：-JVM-对-Java-的-原-生-锁-做-了-哪-些-优-化-？" class="headerlink" title="问 题 四 ： JVM 对 Java 的 原 生 锁 做 了 哪 些 优 化 ？"></a><strong>问 题 四 ：</strong> JVM 对 Java 的 原 生 锁 做 了 哪 些 优 化 ？</h4><p>锁升级：</p><p><strong>锁的四种状态：</strong></p><ul><li><p><strong>new：</strong></p></li><li><p><strong>轻量级锁：</strong></p><ul><li>用户解决的锁cas自旋while（） 竞争很激烈时cpu上下文切换频繁消耗资源</li></ul></li><li><p><strong>重量级锁：</strong></p><ul><li>需要操作系统调度的锁，加入等待队列由操作系统调度</li></ul></li><li><p><strong>偏向锁：</strong></p><ul><li>偏向于第一个访问锁的线程，如果在运行过程中，同步锁只有一个线程访问，不存在多线程争用的情况，则线程是不需要触发同步的，这种情况下，就会给线程加一个偏向锁。</li></ul></li></ul><p><img src="https://i.loli.net/2020/09/10/s1oRtKhraJlXkFO.png" alt=""></p><h4 id="问-题-五-：-为-什-么-说-Synchronized-是-非-公-平-锁-？"><a href="#问-题-五-：-为-什-么-说-Synchronized-是-非-公-平-锁-？" class="headerlink" title="问 题 五 ： 为 什 么 说 Synchronized 是 非 公 平 锁 ？"></a><strong>问 题 五 ：</strong> 为 什 么 说 Synchronized 是 非 公 平 锁 ？</h4><p>非公平主要表现在获取锁的行为上，并非是按照申请锁的时间前后给等待线程分配锁的，每当锁被释放后，任何一个线程都有机会竞争到锁，这样做的目的是为了提高执行性能，缺点是可能会产生线程饥饿现象。</p><h4 id="问-题-六-：-什-么-是-锁-消-除-和-锁-粗-化-？"><a href="#问-题-六-：-什-么-是-锁-消-除-和-锁-粗-化-？" class="headerlink" title="问 题 六 ： 什 么 是 锁 消 除 和 锁 粗 化 ？"></a><strong>问 题 六 ：</strong> 什 么 是 锁 消 除 和 锁 粗 化 ？</h4><ul><li><p>锁 消 除 ： 指 虚 拟 机 即 时 编 译 器 在 运 行 时 ， 对 一 些 代 码 上 要 求 同 步 ， 但 被 检 测 到 不 可 能 存 在 共 享 数 据 竞 争 的 锁 进 行 消 除 。 主 要 根 据 逃 逸 分 析 。 </p></li><li><p>锁消除：指虚拟机即时编译器在运行时，对一些代码上要求同步，但被检测到不可能存在共享数据竞争的锁进行消除。主要根据逃逸分析。</p></li></ul><p><strong>.为 什 么 说 Synchronized 是 一 个 悲 观 锁 ？ 乐 观 锁 的 实 现 原 理 又 是 什 么 ？ 什 么 是 CAS， 它 有 什 么 特 性 ？</strong></p><ul><li><p>Synchronized的并发策略是悲观的：不管是否产生竞争，任何的数据操作都必须加锁</p></li><li><p>乐观锁的核心算法是CAS，它涉及到三个操作数：内存值、预期值、新值。当且仅当预期值和内存值相等时才将内存值修改为新值。</p></li><li><p>CAS具有原子性，在操作数据时必须保证原子性，不能被其他线程修改；它的原子性由编指令保证</p><pre class="line-numbers language-cmd"><code class="language-cmd">lock（锁总线） cmpxchg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="问-题-八-：-乐-观-锁-一-定-就-是-好-的-吗-？"><a href="#问-题-八-：-乐-观-锁-一-定-就-是-好-的-吗-？" class="headerlink" title="问 题 八 ： 乐 观 锁 一 定 就 是 好 的 吗 ？"></a><strong>问 题 八 ：</strong> 乐 观 锁 一 定 就 是 好 的 吗 ？</h4><p>乐观锁避免了悲观锁独占对象的现象 ，同时也提高了并发性能</p><p><strong>缺点</strong>：</p><ol><li><p>乐观锁只能保证一个共享变量的原子操作。如果多一个或几个变量，乐观锁将变得力不从心，但互斥锁能轻易解决，不管对象数量多少及对象颗粒度大小。</p></li><li><p>长时间自旋可能导致开销大。假如CAS长时间不成功而一直自旋，会给CPU带来很大的开销。</p></li><li><p>ABA问题。CAS的核心思想是通过比对内存值与预期值是否一样而判断内存值是否被改过，但这个判断逻辑不严谨，假如内存值原来是A，后来被一条线程改为B，最后又被改成了A，则CAS认为此内存值并没有发生改变，但实际上是有被其他线程改过的，这种情况对依赖过程值的情景的运算结果影响很大。解决的思路是引入版本号，每次变量更新都把版本号加一。</p></li></ol><h2 id="可-重-入-锁-ReentrantLock-及-其-他-显-式-锁-相-关-问-题"><a href="#可-重-入-锁-ReentrantLock-及-其-他-显-式-锁-相-关-问-题" class="headerlink" title="可 重 入 锁 ReentrantLock 及 其 他 显 式 锁 相 关 问 题"></a><strong>可 重 入 锁 ReentrantLock 及 其 他 显 式 锁 相 关 问 题</strong></h2><h4 id="问-题-一-：-跟-Synchronized-相-比-，-可-重-入-锁-ReentrantLock-其-实-现-原-理-有-什-么-不-同-？"><a href="#问-题-一-：-跟-Synchronized-相-比-，-可-重-入-锁-ReentrantLock-其-实-现-原-理-有-什-么-不-同-？" class="headerlink" title="问 题 一 ： 跟 Synchronized 相 比 ， 可 重 入 锁 ReentrantLock 其 实 现 原 理 有 什 么 不 同 ？"></a><strong>问 题 一 ：</strong> 跟 Synchronized 相 比 ， 可 重 入 锁 ReentrantLock 其 实 现 原 理 有 什 么 不 同 ？</h4><p>其实锁的实现原理基本是为了达到一个目的：让所有的线程都能看到某种标记</p><ul><li><strong>Synchronized</strong>：通过在对象头中设置标记实现了这一目的，是一种JVM原生的锁实现方式</li><li><strong>ReentrantLock</strong>：通过用一个volitile修饰的int型变量，并保证每个线程都能拥有对该int的可见性和原子修改，其本质是基于AQS框架。</li></ul><h4 id="问-题-二-：-那-么-请-谈-谈-AQS-框-架-是-怎-么-回-事-儿-？"><a href="#问-题-二-：-那-么-请-谈-谈-AQS-框-架-是-怎-么-回-事-儿-？" class="headerlink" title="问 题 二 ： 那 么 请 谈 谈 AQS 框 架 是 怎 么 回 事 儿 ？"></a><strong>问 题 二 ：</strong> 那 么 请 谈 谈 AQS 框 架 是 怎 么 回 事 儿 ？</h4><ol><li><p>AQS在内部定义了一个volatileintstate变量，表示同步状态：当线程调用lock方法时，如果state=0，说明没有任何线程占有共享资源的锁，可以获得锁并将state=1；如果state=1，则说明有线程目前正在使用共享变量，其他线程必须加入同步队列进行等待。</p></li><li><p>2.AQS通过Node内部类构成的一个双向链表结构的同步队列，来完成线程获取锁的排队工作，当有线程获取锁失败后，就被添加到队列末尾。Node类是对要访问同步代码的线程的封装，包含了线程本身及其状态叫waitStatus（有五种不同取值，分别表示是否被阻塞，是否等待唤醒，是否已经被取消），每个Node结点关联其prev结点和next结点，方便线程释放锁后快速唤醒下一个在等待的线程，是一个FIFO的过程。</p></li></ol><ul><li>-Node类有两个常量，SHARED和EXCLUSIVE，分别代表共享模式和独占模式。所谓共享模式是一个锁允许多条线程同时操作（信号量Semaphore就是基于AQS的共享模式实现的），独占模式是同一个时间段只能有一个线程对共享资源进行操作，多余的请求线程需要排队等待（如ReentranLock）。</li></ul><ol start="3"><li><p>AQS通过内部类ConditionObject构建等待队列（可有多个），当Condition调用wait()方法后，线程将会加入等待队列中，而当Condition调用signal()方法后，线程将从等待队列转移动同步队列中进行锁竞争。</p></li><li><p>AQS和Condition各自维护了不同的队列，在使用Lock和Condition的时候，其实就是两个队列的互相移动。</p></li></ol><h4 id="问题三：请尽可能详尽地对比下Synchronized和ReentrantLock的异同。"><a href="#问题三：请尽可能详尽地对比下Synchronized和ReentrantLock的异同。" class="headerlink" title="问题三：请尽可能详尽地对比下Synchronized和ReentrantLock的异同。"></a><strong>问题三：</strong>请尽可能详尽地对比下Synchronized和ReentrantLock的异同。</h4><p>ReentrantLock是Lock的实现类，是一个互斥的同步锁。从功能角度，ReentrantLock比Synchronized的同步操作更精细（因为可以像普通对象一样使用），甚至实现Synchronized没有的高级功能，如：</p><ul><li>等待可中断：当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，对处理执行时间非常长的同步块很有用。</li><li>带超时的获取锁尝试：在指定的时间范围内获取锁，如果时间到了仍然无法获取则返回。</li><li>可以判断是否有线程在排队等待获取锁。</li><li>可以响应中断请求：与Synchronized不同，当获取到锁的线程被中断时，能够响应中断，中断异常将会被抛出，同时锁会被释放。</li><li>可以实现公平锁。</li></ul><ol><li>从锁释放角度，Synchronized在JVM层面上实现的，不但可以通过一些监控工具监控Synchronized的锁定，而且在代码执行出现异常时，JVM会自动释放锁定；但是使用Lock则不行，Lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中。</li><li>从性能角度，Synchronized早期实现比较低效，对比ReentrantLock，大多数场景性能都相差较大。但是在Java6中对其进行了非常多的改进，在竞争不激烈时，Synchronized的性能要优于ReetrantLock；在高竞争情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态。</li></ol><h4 id="问题四：ReentrantLock是如何实现可重入性的？"><a href="#问题四：ReentrantLock是如何实现可重入性的？" class="headerlink" title="问题四：ReentrantLock是如何实现可重入性的？"></a><strong>问题四：</strong>ReentrantLock是如何实现可重入性的？</h4><p>加锁的时候通过CAS算法，将线程对象放到一个双向链表中，每次获取锁的时候，看下当前维护的那个线程ID和当前请求的线程ID是否一样，一样就可重入了。</p><h4 id="问题五：除了ReetrantLock，你还接触过JUC中的哪些并发工具"><a href="#问题五：除了ReetrantLock，你还接触过JUC中的哪些并发工具" class="headerlink" title="问题五：除了ReetrantLock，你还接触过JUC中的哪些并发工具"></a>问题五：除了ReetrantLock，你还接触过JUC中的哪些并发工具</h4><ul><li>CountDownLatch、CyclicBarrier、Semaphore等，比Synchronized更加高级，可以实现更加丰富多线程操作的同步结构。</li><li>ConcurrentHashMap、有序的ConcunrrentSkipListMap，或者通过类似快照机制实现线程安全的动态数组CopyOnWriteArrayList等，各种线程安全的容器。</li><li>ArrayBlockingQueue、SynchorousQueue或针对特定场景的PriorityBlockingQueue等，各种并发队列实现。</li><li>Executor框架，可以创建各种不同类型的线程池，调度任务运行等。</li></ul><p>问题六：请谈谈ReadWriteLock、StampedLock。</p><ul><li>ReadWriteLock 代表了一对锁，能够对读写操作单独加锁,比起Synchronized粒度更细</li></ul><pre class="line-numbers language-java"><code class="language-java">ReentrantReadWriteLock l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lock r <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Lock w <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>    r<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>finaly<span class="token punctuation">{</span>      r<span class="token punctuation">.</span>unlock    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>String v<span class="token punctuation">)</span><span class="token punctuation">{</span>    w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">pyt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>finaly<span class="token punctuation">{</span>      r<span class="token punctuation">.</span>unlock    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>StampedLock，在提供类似读写锁的同时，还支持优化读模式。优化读基于假设，大多数情况下读操作并不会和写操作冲突，其逻辑是先试着修改，然后通过validate方法确认是否进入了写模式，如果没有进入，就成功避免了开销；如果进入，则尝试获<br>取读锁。</li></ul><h4 id="问题七：如何让Java的线程彼此同步？你了解过哪些同步器？请分别介绍下"><a href="#问题七：如何让Java的线程彼此同步？你了解过哪些同步器？请分别介绍下" class="headerlink" title="问题七：如何让Java的线程彼此同步？你了解过哪些同步器？请分别介绍下"></a><strong>问题七：</strong>如何让Java的线程彼此同步？你了解过哪些同步器？请分别介绍下</h4><p><strong>CountDownLatch</strong>：倒计数 ，允许一个或多个线程等待某些操作完成</p><ul><li><p>图书馆管理员：等到所有人全都离开后开关门</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author: saber * @description: 模拟关门 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置计数器为6</span>        CountDownLatch latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"已经离开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//等待计数器归零</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有人都已离开，管理员关门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>CyclicBarrier</strong>：叫循环栅栏，它实现让一组线程等待至某个状态之后再全部同时执行</p><ul><li><p>​    聚会吃饭</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author: saber * @description: 聚会吃饭 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//6人到齐之后开饭</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有人都已到齐，开饭"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"到了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//等待所有人到齐</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>Semaphore</strong>：版本的信号量实现，用于控制同时访问的线程个数，来达到限制通用资源访问的目的，通过<strong>acquire()</strong>获取一个许可，如果没有就等待，而<strong>release()</strong>释放一个许可。</p><ul><li><p>车位停车：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span><span class="token operator">:</span> saber <span class="token operator">*</span> <span class="token annotation punctuation">@description</span><span class="token operator">:</span> 抢车位 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到了车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"离开了车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>问题八：CyclicBarrier和CountDownLatch区别在哪儿？</strong></p><ul><li><p>CountDownLatch是不可以重置，CyclicBarrier可以重置（reset()方法）。</p></li><li><p>CountDownLatch的基本操作组合是countDown/await，线程阻塞等待足够的次数，</p><p>CyclicBarrier的基本操作组合是await，当所有的伙伴都调用了await，才会继续进行任务，并自动进行重置。</p></li><li><p>CountDownLatch目的是让一个线程等待其他N个线程达到某个条件后，自己再去做某个事。</p><p>CyclicBarrier的目的是让N多程互相等待直到所有的都达到某个状态，再继续执行各自后续</p></li></ul><h2 id="Java线程池相关问题"><a href="#Java线程池相关问题" class="headerlink" title="Java线程池相关问题"></a><strong>Java线程池相关问题</strong></h2><h4 id="问题一：Java中的线程池是如何实现的？"><a href="#问题一：Java中的线程池是如何实现的？" class="headerlink" title="问题一：Java中的线程池是如何实现的？"></a>问题一：Java中的线程池是如何实现的？</h4><ul><li>线程池中的“线程”，其实是一个静态内部类Worker，它基于AQS实现，存放在线程池的HashSet<worker>workers成员变量中；</worker></li><li>而需要执行的任务则存放在成员变量workQueue（BlockingQueue<runnable>workQueue）中。</runnable></li><li>基本实现：从workQueue中不断取出需要执行的任务，放在Workers中进行处理。</li></ul><h4 id="问题二：创建线程池的几个核心构造参数？"><a href="#问题二：创建线程池的几个核心构造参数？" class="headerlink" title="问题二：创建线程池的几个核心构造参数？"></a>问题二：创建线程池的几个核心构造参数？</h4><p>七大参数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span><span class="token operator">:</span> saber <span class="token operator">*</span> <span class="token annotation punctuation">@description</span><span class="token operator">:</span> 线程池 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolExecutor pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//核心线程池大小</span>                <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最大线程池大小</span>                <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//超时释放等待时间</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//时间单位</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//阻塞队列 当最大线程池满了就进入这个队列 多余的按照拒绝策略处理</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程工程</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拒绝策略</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----ok"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题三：线程池中的线程是怎么创建的？是一开始就随着线程池的启动创建好的吗？"><a href="#问题三：线程池中的线程是怎么创建的？是一开始就随着线程池的启动创建好的吗？" class="headerlink" title="问题三：线程池中的线程是怎么创建的？是一开始就随着线程池的启动创建好的吗？"></a><strong>问题三：</strong>线程池中的线程是怎么创建的？是一开始就随着线程池的启动创建好的吗？</h4><p>显然不是的。线程池默认初始化后不启动Worker，等待有请求时才启动。每当我们调用execute()方法添加一个任务时，线程池会做如下判断：</p><ul><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；</li><li>如果这时候队列满了，而且正在运行的线程数量小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li><li>如果队列满了，而且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会抛出异常RejectExecutionException。</li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行。当一个<br>线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判<br>断超时。</li><li>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。<br>所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大<br>小</li></ul><h4 id="问题四：既然提到可以通过配置不同参数创建出不同的线程池，那么Java中默认实现好的线程池又有哪些呢？请比较它们的异同。"><a href="#问题四：既然提到可以通过配置不同参数创建出不同的线程池，那么Java中默认实现好的线程池又有哪些呢？请比较它们的异同。" class="headerlink" title="问题四：既然提到可以通过配置不同参数创建出不同的线程池，那么Java中默认实现好的线程池又有哪些呢？请比较它们的异同。"></a><strong>问题四：既然提到可以通过配置不同参数创建出不同的线程池，那么Java中默认实现好的线程池又有哪些呢？请比较它们的异同。</strong></h4><p><strong>1. SingleThreadExecutor 线程池</strong></p><ul><li>只有一个核心线程的线程池，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</li></ul><p><strong>2. FixedThreadPool 线程池</strong></p><ul><li>固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</li><li>FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器。</li></ul><p><strong>3. CachedThreadPool 线程池</strong></p><ul><li>无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</li></ul><p><strong>4. ScheduledThreadPool 线程池</strong></p><ul><li>核心线程池固定，大小无限的线程池。用于定时以及周期性执行任务。</li></ul><h4 id="问题五：如何在Java线程池中提交线程？"><a href="#问题五：如何在Java线程池中提交线程？" class="headerlink" title="问题五：如何在Java线程池中提交线程？"></a><strong>问题五：</strong>如何在Java线程池中提交线程？</h4><ol><li><p><strong>execute()</strong>：接收一个Runable实例，它用来执行一个任务：</p></li><li><p><strong>submit()</strong>：方法返回的是Future对象。可以用isDone()来查询Future是否已经完成，当任务完成时，它具有一个结果，可以调用get()来获取结果。也可以不用isDone()进行检查就直接调用get()，在这种情况下，get()将阻塞，直至结果准备就绪。</p></li></ol><h2 id="四、JVM"><a href="#四、JVM" class="headerlink" title="四、JVM"></a>四、JVM</h2><h4 id="Java-内-存-模-型-相-关-问-题"><a href="#Java-内-存-模-型-相-关-问-题" class="headerlink" title="Java 内 存 模 型 相 关 问 题"></a><strong>Java 内 存 模 型 相 关 问 题</strong></h4><h4 id="问题一：什么是Java的内存模型，Java中各个线程是怎么彼此看到对方的变量的？"><a href="#问题一：什么是Java的内存模型，Java中各个线程是怎么彼此看到对方的变量的？" class="headerlink" title="问题一：什么是Java的内存模型，Java中各个线程是怎么彼此看到对方的变量的？"></a><strong>问题一：</strong>什么是Java的内存模型，Java中各个线程是怎么彼此看到对方的变量的？</h4><ul><li>所有的变量都存储在主内存，</li><li>每条线程还有自己的工作内存，保存了被该线程使用到的变量的主内存副本拷贝。</li><li>线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，不能直接读写主内存的变量。</li><li>不同的线程之间也无法直接访问对方工作内存的变量，线程间变量值的传递需要通过主内存。</li></ul><h4 id="问题二：请谈谈volatile有什么特点，为什么它能保证变量对所有线程的可见性？"><a href="#问题二：请谈谈volatile有什么特点，为什么它能保证变量对所有线程的可见性？" class="headerlink" title="问题二：请谈谈volatile有什么特点，为什么它能保证变量对所有线程的可见性？"></a>问题二：请谈谈volatile有什么特点，为什么它能保证变量对所有线程的可见性？</h4><ul><li><p><strong>线程间通信</strong></p></li><li><p>volatile修饰的变量被当前线程修改后其他线程会感知到</p></li><li><p><strong>禁止指令重排序</strong></p><ul><li><p>如果不用volatile修饰可能发生指令重排序，<strong>invokespecial</strong>在<strong>astore_1</strong>之后执行，o拿到的时一个半初始化状态的对象</p></li><li><h5 id="Object-o-new-Object-的初始化过程："><a href="#Object-o-new-Object-的初始化过程：" class="headerlink" title="Object o = new Object()的初始化过程："></a>Object o = new Object()的初始化过程：</h5><pre><code>new：申请一块内存空间用来存放对象invokespecial：调用构造方法对属性赋值（半初始化对象)astore_1：建立o和对象的关联（指针指向堆内存）</code></pre></li></ul></li></ul><h4 id="问题三：基于volatile变量的运算是并发安全的？"><a href="#问题三：基于volatile变量的运算是并发安全的？" class="headerlink" title="问题三：基于volatile变量的运算是并发安全的？"></a>问题三：基于volatile变量的运算是并发安全的？</h4><ul><li>基于volatile变量的运算在并发下不一定是安全的。虽然volatile变量在各个线程的工作内存，不存在一致性问题，但是Java里面的运算并非原子操作，导致volatile变量的运算在并发下一样是不安全的。</li></ul><h4 id="问题四：请对比下volatile对比Synchronized的异同。"><a href="#问题四：请对比下volatile对比Synchronized的异同。" class="headerlink" title="问题四：请对比下volatile对比Synchronized的异同。"></a>问题四：请对比下volatile对比Synchronized的异同。</h4><ul><li>Synchronized既能保证可见性，又能保证原子性，而volatile只能<br>保证可见性，无法保证原子性。</li></ul><h4 id="问题五：请谈谈ThreadLocal是怎么解决并发安全的？"><a href="#问题五：请谈谈ThreadLocal是怎么解决并发安全的？" class="headerlink" title="问题五：请谈谈ThreadLocal是怎么解决并发安全的？"></a>问题五：请谈谈ThreadLocal是怎么解决并发安全的？</h4><ul><li>ThreadLocal这是Java提供的一种保存线程私有信息的机制，因为其在整个线程生命周期内有效，所以可以方便地在一个线程关联的不同业务模块之间传递信息，比如事务ID、Cookie等上下文相关信息。</li><li>ThreadLocal为每一个线程维护变量的副本，把共享数据的可见范围限制在同一个线程之内，其实现原理是，在ThreadLocal类中有一个Map，用于存储每一个线程的变量的副本。</li></ul><h4 id="问题六：很多人都说要慎用ThreadLocal，谈谈你的理解，使用ThreadLocal需要注意些什么？"><a href="#问题六：很多人都说要慎用ThreadLocal，谈谈你的理解，使用ThreadLocal需要注意些什么？" class="headerlink" title="问题六：很多人都说要慎用ThreadLocal，谈谈你的理解，使用ThreadLocal需要注意些什么？"></a><strong>问题六：</strong>很多人都说要慎用ThreadLocal，谈谈你的理解，使用ThreadLocal需要注意些什么？</h4><ul><li>ThreadLocal的实现是基于一个的ThreadLocalMap，它的key是一个弱引用。在回收时不会清除数据，再次的调用线程池就会导致值错乱、oom</li><li>remove()；</li></ul><h4 id="JVM内存："><a href="#JVM内存：" class="headerlink" title="JVM内存："></a>JVM内存：</h4><h4 id="问题一：内存模型以及分区，需要详细到每个区放什么？"><a href="#问题一：内存模型以及分区，需要详细到每个区放什么？" class="headerlink" title="问题一：内存模型以及分区，需要详细到每个区放什么？"></a>问题一：内存模型以及分区，需要详细到每个区放什么？</h4><ul><li>方法区：主要是存储类信息，常量池（static常量和static变量），编译后的代码（字节码）等数据</li><li>堆：初始化的对象，成员变量（那种非static的变量），所有的对象实例和数组都要在堆上分配</li><li>栈：栈的结构是栈帧组成的，调用一个方法就压入一帧，帧上面存储局部变量表，操作数栈，方法出口等信息，局部变量表存放的是8大基础类型加上一个应用类型，所以还是一个指向地址的指针</li><li>本地方法栈：主要为Native方法服务</li><li>程序计数器：记录当前线程执行的行号</li></ul><h4 id="问题二：堆里面的分区，各自的特点。"><a href="#问题二：堆里面的分区，各自的特点。" class="headerlink" title="问题二：堆里面的分区，各自的特点。"></a>问题二：堆里面的分区，各自的特点。</h4><ul><li><strong>新生代</strong>： 复制算法<ul><li>Eden区   8</li><li>Survivor区<ul><li>form  1</li><li>to      1</li></ul></li></ul></li><li><strong>老年代</strong>：标记压缩、清除</li><li><strong>元空间</strong>：</li></ul><h4 id="问题三：jvm如何确定一个对象是垃圾？"><a href="#问题三：jvm如何确定一个对象是垃圾？" class="headerlink" title="问题三：jvm如何确定一个对象是垃圾？"></a>问题三：jvm如何确定一个对象是垃圾？</h4><ul><li><strong>引用计数 reference count</strong></li><li><strong>根可达性 root searching</strong></li></ul><h4 id="问题四：GC算法有哪些？"><a href="#问题四：GC算法有哪些？" class="headerlink" title="问题四：GC算法有哪些？"></a>问题四：GC算法有哪些？</h4><ul><li><strong>mark-sweep 标记清除</strong>（效率高 会产生碎片化问题）</li><li><strong>copying 复制</strong>（浪费空间 Eden区 8:1:1 使用此算法，每次使用一半的空间，有用的拷贝到to，清除from区）</li><li><strong>mark-compact标记压缩</strong>（效率低节约空间 老年代使用此算法）</li></ul><h4 id="问题五：GC-收集器有哪些？"><a href="#问题五：GC-收集器有哪些？" class="headerlink" title="问题五：GC 收集器有哪些？"></a>问题五：GC 收集器有哪些？</h4><p><img src="https://s1.ax1x.com/2020/09/11/wYghWR.png" alt=""></p><h4 id="问题六-几种常用的内存调试工具"><a href="#问题六-几种常用的内存调试工具" class="headerlink" title="问题六. 几种常用的内存调试工具"></a>问题六. 几种常用的内存调试工具</h4><ul><li>jstack 可以看当前栈的情况，</li><li>jmap 查看内存</li><li>hat 进行 dump 堆的信息</li></ul><h4 id="问题七：java-类加载过程"><a href="#问题七：java-类加载过程" class="headerlink" title="问题七：java 类加载过程?"></a>问题七：java 类加载过程?</h4><ul><li><strong>加载</strong></li></ul><ol><li><p>通过一个类的全限定名获取该类的二进制流。</p></li><li><p>将该二进制流中的静态存储结构转化为方法去运行时数据结构。</p></li><li><p>在内存中生成该类的 Class 对象，作为该类的数据访问入口。</p></li></ol><ul><li><strong>验证</strong></li></ul><ol><li><p>文件格式验证：验证字节流是否符合 Class 文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.</p></li><li><p>元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。</p></li><li><p>字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。4. 符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。</p></li></ol><ul><li><p><strong>准备</strong>：为类的静态变量分配内存并将其初始化为默认值</p></li><li><p><strong>解析</strong>：完成符号引用到直接引用的转换</p></li><li><p><strong>初始化</strong>：开始执行类中定义的 Java 程序代码。</p></li><li><p><strong>使用</strong></p></li><li><p><strong>卸载</strong></p></li></ul><h4 id="问题八：简述-java-类加载机制"><a href="#问题八：简述-java-类加载机制" class="headerlink" title="问题八：简述 java 类加载机制"></a>问题八：<strong>简述 java 类加载机制</strong></h4><ul><li>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的 java 类型</li></ul><h4 id="问题九：类加载器双亲委派模型机制？"><a href="#问题九：类加载器双亲委派模型机制？" class="headerlink" title="问题九：类加载器双亲委派模型机制？"></a>问题九：<strong>类加载器双亲委派模型机制？</strong></h4><ul><li>当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。</li></ul><h4 id="问题十-什么是类加载器，类加载器有哪些"><a href="#问题十-什么是类加载器，类加载器有哪些" class="headerlink" title="问题十.什么是类加载器，类加载器有哪些?"></a>问题十<strong>.什么是类加载器，类加载器有哪些?</strong></h4><ol><li><p>启动类加载器(Bootstrap ClassLoader)用来加载 java 核心类库，无法被 java 程序直接引用。</p></li><li><p>扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。</p></li><li><p>系统类加载器（system class loader）：根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。</p></li><li><p>用户自定义类加载器，通过继承 java.lang.ClassLoader 类的方式实现</p></li></ol><h2 id="五、Tomcat"><a href="#五、Tomcat" class="headerlink" title="五、Tomcat"></a>五、<strong>Tomcat</strong></h2><h4 id="问题一：Tomcat-的缺省端口是多少，怎么修改？"><a href="#问题一：Tomcat-的缺省端口是多少，怎么修改？" class="headerlink" title="问题一：Tomcat 的缺省端口是多少，怎么修改？"></a>问题一：<strong>Tomcat</strong> <strong>的缺省端口是多少，怎么修改？</strong></h4><ul><li>8080</li><li>修改conf文件夹下的server.xml</li></ul><h4 id="问题二：tomcat-有哪几种-Connector-运行模式？"><a href="#问题二：tomcat-有哪几种-Connector-运行模式？" class="headerlink" title="问题二：tomcat 有哪几种 Connector 运行模式？"></a>问题二：<strong>tomcat</strong> <strong>有哪几种</strong> <strong>Connector</strong> 运行模式？</h4><ul><li>bio：传统的 Java I/O 操作，同步且阻塞 IO。</li><li>nio：JDK1.4 开始支持，同步阻塞或同步非阻塞 IO。</li><li>aio(nio.2)：JDK7 开始支持，异步非阻塞 IO。</li></ul><h4 id="问题三：Tomcat-有几种部署方式？"><a href="#问题三：Tomcat-有几种部署方式？" class="headerlink" title="问题三：Tomcat 有几种部署方式？"></a>问题三：<strong>Tomcat</strong> <strong>有几种部署方式</strong>？</h4><ol><li>直接把 Web 项目放在 webapps 下，Tomcat 会自动将其部署</li><li>在 server.xml 文件上配置<context>节点，设置相关的属性即可</context></li><li>通过 Catalina 来进行配置:进入到 conf\Catalina\localhost 文件下，创建一个xml 文件，该文件的名字就是站点的名字。编写 XML 的方式来进行设置。</li></ol><h4 id="问题四：tomcat-容器是如何创建-servlet-类实例？用到了什么原理？"><a href="#问题四：tomcat-容器是如何创建-servlet-类实例？用到了什么原理？" class="headerlink" title="问题四：tomcat 容器是如何创建 servlet 类实例？用到了什么原理？"></a>问题四：<strong>tomcat</strong> <strong>容器是如何创建</strong> <strong>servlet</strong> <strong>类实例？用到了什么原理？</strong></h4><ul><li>读取在 webapps 目录下所有的 web 应用中的 web.xml 文件</li><li>解析xml文件，读取 servlet 注册信息。</li><li>将每个应用中注册的 servlet 类都进行加载，</li><li>并通过反射的方式实例化。（有时候也是在第一次请求时实例化）在 servlet 注册时加上如果为正数，在一开始就实例化，如果不写或为负数，则第一次请求实例化。</li></ul><h4 id="问题五：tomcat-如何优化？"><a href="#问题五：tomcat-如何优化？" class="headerlink" title="问题五：tomcat 如何优化？"></a>问题五：<strong>tomcat</strong> <strong>如何优化？</strong></h4><ul><li>优化连接配置.这里以 tomcat7 的参数配置为例，需要修改 conf/server.xml文件，修改连接数，关闭客户端 dns 查询</li><li>给 Tomcat 配置 gzip 压缩(HTTP 压缩)功能</li></ul><h4 id="问题六：内存调优垃圾回收策略调优"><a href="#问题六：内存调优垃圾回收策略调优" class="headerlink" title="问题六：内存调优垃圾回收策略调优"></a>问题六：<strong>内存调优垃圾回收策略调优</strong></h4><ul><li>catalina.sh 中，调整 JAVA_OPTS 变量</li></ul><h4 id="问题六：一次请求的完整过程"><a href="#问题六：一次请求的完整过程" class="headerlink" title="问题六：一次请求的完整过程"></a>问题六：一次请求的完整过程</h4><ol><li>请求被发送到本机端口 8080，被在那里侦听的 Coyote HTTP/1.1Connector 获得</li><li>Connector 把该请求交给它所在的 Service 的 Engine 来处理，并等待来自Engine 的回应</li><li>Engine 获得请求 localhost/yy/index.jsp，匹配它所拥有的所有虚拟主机 Host</li><li>Engine 匹配到名为 localhost 的 Host（即使匹配不到也把请求交给该 Host处理，因为该 Host 被定义为该 Engine 的默认主机）</li><li>localhost Host 获得请求/yy/index.jsp，匹配它所拥有的所有 Context</li><li>Host 匹配到路径为/yy 的 Context（如果匹配不到就把该请求交给路径名为”“的 Context 去处理）</li><li>path=”/yy”的 Context 获得请求/index.jsp，在它的 mapping table 中寻找对应的 servlet</li><li>Context 匹配到 URL PATTERN 为*.jsp 的 servlet，对应于 JspServlet 类</li><li>构造 HttpServletRequest 对象和 HttpServletResponse 对象，作为参数调用JspServlet 的 doGet 或 doPost 方法</li><li>Context 把执行完了之后的 HttpServletResponse 对象返回给 Host</li><li>Host 把 HttpServletResponse 对象返回给 Engine</li><li>Engine 把 HttpServletResponse 对象返回给 Connector</li><li>Connector 把 HttpServletResponse 对象返回给客户 browser</li></ol><h4 id="问题七：Tomcat-工作模式？"><a href="#问题七：Tomcat-工作模式？" class="headerlink" title="问题七：Tomcat 工作模式？"></a>问题七：<strong>Tomcat</strong> <strong>工作模式？</strong></h4><ul><li>Tomcat 作为应用程序服务器：请求来自于前端的 web 服务器，这可能是Apache, IIS, Nginx 等</li><li>Tomcat 作为独立服务器：请求来自于 web 浏览器；</li></ul><h2 id="六、Nginx"><a href="#六、Nginx" class="headerlink" title="六、Nginx"></a>六、Nginx</h2><h4 id="1、请解释一下什么是-Nginx"><a href="#1、请解释一下什么是-Nginx" class="headerlink" title="1、请解释一下什么是 Nginx?"></a><strong>1、请解释一下什么是 Nginx?</strong></h4><ul><li>Nginx 是一个 web 服务器和反向代理服务器，用于 HTTP、HTTPS、SMTP、POP3和 IMAP 协议。</li></ul><h4 id="2、请列举-Nginx-的一些特性。"><a href="#2、请列举-Nginx-的一些特性。" class="headerlink" title="2、请列举 Nginx 的一些特性。"></a><strong>2、请列举 Nginx 的一些特性。</strong></h4><ul><li><p>反向代理/L7 负载均衡器</p></li><li><p>嵌入式 Perl 解释器</p></li><li><p>动态二进制升级</p></li><li><p>可用于重新编写 URL，具有非常好的 PCRE 支持</p></li></ul><h4 id="3、请列举-Nginx-和-Apache-之间的不同点"><a href="#3、请列举-Nginx-和-Apache-之间的不同点" class="headerlink" title="3、请列举 Nginx 和 Apache 之间的不同点"></a><strong>3、请列举 Nginx 和 Apache 之间的不同点</strong></h4><ul><li>Apache是同步多进程模型，一个连接对应一个进程</li><li>Nginx是异步的，多个连接（万级别）可以对应一个进程。</li></ul><h4 id="4、请解释-Nginx-如何处理-HTTP-请求。"><a href="#4、请解释-Nginx-如何处理-HTTP-请求。" class="headerlink" title="4、请解释 Nginx 如何处理 HTTP 请求。"></a><strong>4、请解释 Nginx 如何处理 HTTP 请求。</strong></h4><ul><li>Nginx 使用反应器模式。主事件循环等待操作系统发出准备事件的信号，这样数据就可以从套接字读取，在该实例中读取到缓冲区并进行处理。单个线程可以提供数万个并发连接。</li></ul><h4 id="5、在-Nginx-中，如何使用未定义的服务器名称来阻止处理请求"><a href="#5、在-Nginx-中，如何使用未定义的服务器名称来阻止处理请求" class="headerlink" title="5、在 Nginx 中，如何使用未定义的服务器名称来阻止处理请求?"></a><strong>5、在 Nginx 中，如何使用未定义的服务器名称来阻止处理请求?</strong></h4><ul><li>只需将请求删除的服务器就可以定义为：</li></ul><pre><code>Server {    listen 80;    server_name “ “ ;    return 444;}</code></pre><ul><li>服务器名被保留为一个空字符串，它将在没有“主机”头字段的情况下匹配请求，而一个特殊的 Nginx 的非标准代码 444 被返回，从而终止连接。</li></ul><h4 id="6、-使用“反向代理服务器”的优点是什么"><a href="#6、-使用“反向代理服务器”的优点是什么" class="headerlink" title="6、 使用“反向代理服务器”的优点是什么?"></a><strong>6、 使用“反向代理服务器”的优点是什么?</strong></h4><ul><li>反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和 web 服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用 web 托管服务时。</li></ul><h4 id="7、请列举-Nginx-服务器的最佳用途。"><a href="#7、请列举-Nginx-服务器的最佳用途。" class="headerlink" title="7、请列举 Nginx 服务器的最佳用途。"></a><strong>7、请列举 Nginx 服务器的最佳用途。</strong></h4><ul><li>Nginx 服务器的最佳用法是在网络上部署动态 HTTP 内容，使用 SCGI、WSGI 应用程序服务器、用于脚本的 FastCGI 处理程序。它还可以作为负载均衡器。</li></ul><h4 id="8、请解释-Nginx-服务器上的-Master-和-Worker-进程分别是什么"><a href="#8、请解释-Nginx-服务器上的-Master-和-Worker-进程分别是什么" class="headerlink" title="8、请解释 Nginx 服务器上的 Master 和 Worker 进程分别是什么?"></a><strong>8、请解释 Nginx 服务器上的 Master 和 Worker 进程分别是什么?</strong></h4><ul><li><p>Master 进程：读取及评估配置和维持</p></li><li><p>Worker 进程：处理请求</p></li></ul><h4 id="9、请解释你如何通过不同于-80-的端口开启-Nginx"><a href="#9、请解释你如何通过不同于-80-的端口开启-Nginx" class="headerlink" title="9、请解释你如何通过不同于 80 的端口开启 Nginx?"></a><strong>9、请解释你如何通过不同于 80 的端口开启 Nginx?</strong></h4><ul><li><p>进入/etc/Nginx/sitesenabled/，如果这是默认文件，那么你打开名为“default”的文件。放置在你想要的端口：</p><pre><code>Like server { listen 81; }</code></pre></li></ul><h4 id="10、请解释是否有可能将-Nginx-的错误替换为-502-错误、503"><a href="#10、请解释是否有可能将-Nginx-的错误替换为-502-错误、503" class="headerlink" title="10、请解释是否有可能将 Nginx 的错误替换为 502 错误、503?"></a><strong>10、请解释是否有可能将 Nginx 的错误替换为 502 错误、503?</strong></h4><ul><li>fastcgi_intercept_errors 被设置为 ON，并使用错误页面指令。</li></ul><pre><code>Location / {    fastcgi_pass 127.0.01:9001;    fastcgi_intercept_errors on;e    rror_page 502 =503/error_page.html;    # …}</code></pre><h4 id="11、在-Nginx-中，解释如何在-URL-中保留双斜线"><a href="#11、在-Nginx-中，解释如何在-URL-中保留双斜线" class="headerlink" title="11、在 Nginx 中，解释如何在 URL 中保留双斜线?"></a><strong>11、在 Nginx 中，解释如何在 URL 中保留双斜线?</strong></h4><ul><li>使用 merge_slashes_off;</li></ul><h4 id="12、请解释-ngx-http-upstream-module-的作用是什么"><a href="#12、请解释-ngx-http-upstream-module-的作用是什么" class="headerlink" title="12、请解释 ngx_http_upstream_module 的作用是什么?"></a><strong>12、请解释 ngx_http_upstream_module 的作用是什么?</strong></h4><ul><li>定义可通过 fastcgi 传递、proxy 传递、uwsgi传递递、memcached 传递和 scgi 传递指令来引用的服务器组。</li></ul><h4 id="13、请解释什么是-C10K-问题"><a href="#13、请解释什么是-C10K-问题" class="headerlink" title="13、请解释什么是 C10K 问题?"></a><strong>13、请解释什么是 C10K 问题?</strong></h4><ul><li>C10K 问题是指无法同时处理大量客户端(10,000)的网络套接字。</li></ul><h4 id="14、请陈述-stub-status-和-sub-filter-指令的作用是什么"><a href="#14、请陈述-stub-status-和-sub-filter-指令的作用是什么" class="headerlink" title="14、请陈述 stub_status 和 sub_filter 指令的作用是什么?"></a><strong>14、请陈述 stub_status 和 sub_filter 指令的作用是什么?</strong></h4><ul><li><p>Stub_status 指令：该指令用于了解 Nginx 当前状态的当前状态，如当前的活动连接，接受和处理当前读/写/等待连接的总数</p></li><li><p>Sub_filter 指令：它用于搜索和替换响应中的内容，并快速修复陈旧的数据</p></li></ul><h4 id="15、解释-Nginx-是否支持将请求压缩到上游"><a href="#15、解释-Nginx-是否支持将请求压缩到上游" class="headerlink" title="15、解释 Nginx 是否支持将请求压缩到上游?"></a><strong>15、解释 Nginx 是否支持将请求压缩到上游?</strong></h4><ul><li>使用 Nginx 模块 gunzip 将请求压缩到上游。它可以对不支持“gzip”编码方法的客户机或服务器使用“内容编码:gzip”来解压缩响应。</li></ul><h4 id="16、解释如何在-Nginx-中获得当前的时间"><a href="#16、解释如何在-Nginx-中获得当前的时间" class="headerlink" title="16、解释如何在 Nginx 中获得当前的时间?"></a><strong>16、解释如何在 Nginx 中获得当前的时间?</strong></h4><ul><li>使用 SSI 模块、$date_gmt 和$date_local 的变量。</li></ul><pre><code>Proxy_set_header THE-TIME $date_gmt;</code></pre><h4 id="17、用-Nginx-服务器解释-s-的目的是什么"><a href="#17、用-Nginx-服务器解释-s-的目的是什么" class="headerlink" title="17、用 Nginx 服务器解释-s 的目的是什么?"></a><strong>17、用 Nginx 服务器解释-s 的目的是什么?</strong></h4><ul><li>用于运行 Nginx -s 参数的可执行文件。</li></ul><h4 id="七、数据库"><a href="#七、数据库" class="headerlink" title="七、数据库"></a>七、数据库</h4><h4 id="请简洁描述-MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐级之间的区别？："><a href="#请简洁描述-MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐级之间的区别？：" class="headerlink" title="请简洁描述 MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？："></a><strong>请简洁描述 MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？</strong>：</h4><ul><li><p><strong>read uncommited ：</strong>读到未提交数据</p></li><li><p><strong>read committed：</strong>脏读，不可重复读</p></li><li><p><strong>repeatable read：</strong>可重读</p></li><li><p><strong>serializable ：</strong>串行事物</p></li></ul><h4 id="在-MySQL-中-ENUM-的用法是什么？"><a href="#在-MySQL-中-ENUM-的用法是什么？" class="headerlink" title="在 MySQL 中 ENUM 的用法是什么？"></a><strong>在 MySQL 中 ENUM 的用法是什么？</strong></h4><ul><li>ENUM 是一个字符串对象，用于指定一组预定义的值，并可在创建表时使用。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">Create</span> <span class="token keyword">table</span> size<span class="token punctuation">(</span>name <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">'Smail,'</span>Medium<span class="token string">','</span>Large'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CHAR-和-VARCHAR-的区别？"><a href="#CHAR-和-VARCHAR-的区别？" class="headerlink" title="CHAR 和 VARCHAR 的区别？"></a><strong>CHAR 和 VARCHAR 的区别？</strong></h4><ul><li><p>CHAR 和 VARCHAR 类型在存储和检索方面有所不同。</p></li><li><p>CHAR 列长度固定为创建表时声明的长度，长度值范围是 1 到 255。 </p></li><li><p>当 CHAR 值被存储时，它们被用空格填充到特定长度，检索 CHAR 值时需删除尾随空格。</p></li></ul><h4 id="列的字符串类型可以是什么？"><a href="#列的字符串类型可以是什么？" class="headerlink" title="列的字符串类型可以是什么？"></a><strong>列的字符串类型可以是什么？</strong></h4><ul><li><p>SET</p></li><li><p>BLOB</p></li><li><p>ENUM</p></li><li><p>CHAR</p></li><li><p>TEXT</p></li><li><p>VARCHAR</p></li></ul><h4 id="MySQL-中使用什么存储引擎？"><a href="#MySQL-中使用什么存储引擎？" class="headerlink" title="MySQL 中使用什么存储引擎？"></a><strong>MySQL 中使用什么存储引擎？</strong></h4><ul><li><p>存储引擎称为表类型，数据使用各种技术存储在文件中。</p></li><li><p>技术涉及：</p><ul><li>Storage mechanism</li><li>Locking levels</li><li>Indexing</li><li>Capabilities and functions.</li></ul></li></ul><h4 id="TIMESTAMP-在-UPDATE-CURRENT-TIMESTAMP-数据类型上做什么？"><a href="#TIMESTAMP-在-UPDATE-CURRENT-TIMESTAMP-数据类型上做什么？" class="headerlink" title="TIMESTAMP 在 UPDATE CURRENT_TIMESTAMP 数据类型上做什么？"></a><strong>TIMESTAMP 在 UPDATE CURRENT_TIMESTAMP 数据类型上做什么？</strong></h4><ul><li>创建表时 TIMESTAMP 列用 Zero 更新。只要表中的其他字段发生更改，UPDATECURRENT_TIMESTAMP 修饰符就将时间戳字段更新为当前时间。</li></ul><h4 id="主键和候选键有什么区别？"><a href="#主键和候选键有什么区别？" class="headerlink" title="主键和候选键有什么区别？"></a><strong>主键和候选键有什么区别？</strong></h4><ul><li>表格的每一行都由主键唯一标识, 一个表只有一个主键。主键也是候选键。按照惯例，候选键可以被指定为主键，并且可以用于任何外键引用。</li></ul><p><strong>MySQL 数据库服务器性能分析的方法命令有哪些?</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 列出MySQL服务器运行各种状态值：</span><span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 慢查询</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 连接数</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'max_connections'</span><span class="token punctuation">;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> ‘key_buffer_size’<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BLOB 和 TEXT 有什么区别？</strong></p><ul><li><p><strong>BLOB</strong> 是一个二进制对象，可以容纳可变数量的数据。有四种类型的 BLOB</p><ul><li>TINYBLOB</li><li>BLOB</li><li>MEDIUMBLOB 和</li><li>LONGBLOB</li></ul></li><li><p>TEXT 是一个不区分大小写的 BLOB。四种 TEXT 类型</p><ul><li>TINYTEXT</li><li>TEXT</li><li>MEDIUMTEXT 和 </li><li>LONGTEXT</li></ul></li><li><p>BLOB 和 TEXT 类型之间的唯一区别在于对 BLOB 值进行排序和比较时区分大小写，对 TEXT 值不区分大小写。</p></li></ul><h4 id="数据库的三范式？"><a href="#数据库的三范式？" class="headerlink" title="数据库的三范式？"></a><strong>数据库的三范式？</strong></h4><ul><li><p>第一范式：数据库表的每一个字段都是不可分割的。</p></li><li><p>第二范式：数据库表中的非主属性只依赖于主键。</p></li><li><p>第三范式：不存在非主属性对关键字的传递函数依赖关系。</p></li></ul><p><strong>MySQL 表中允许有多少个 TRIGGERS？</strong> </p><ul><li>在 MySQL 表中允许有六个触发器，如下：<ul><li>BEFORE INSERT</li><li>AFTER INSERT</li><li>BEFORE UPDATE</li><li>AFTER UPDATE</li><li>BEFORE DELETE </li><li>AFTER DELETE</li></ul></li></ul><h4 id="什么是通用-SQL-函数？"><a href="#什么是通用-SQL-函数？" class="headerlink" title="什么是通用 SQL 函数？"></a><strong>什么是通用 SQL 函数？</strong></h4><h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><ul><li>Abs（num）求绝对值</li></ul><ul><li>floor（num）向下取整</li></ul><ul><li>ceil（num）向上取整</li></ul><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><ul><li>insert (s1,index,length,s2) 替换函数</li></ul><ul><li>upper（str），ucase（str）将字母改为大写</li></ul><ul><li>lower（str），lcase（str）将字母改为小写</li></ul><ul><li>left（str，length）返回 str 字符串的前 length 个字符</li></ul><ul><li>right（str，length）返回 str 字符串的后 length 个字符</li></ul><ul><li>substring（str，index，length）返回 str 字符串从 index 位开始长度为</li><li>length 个字符（index 从 1 开始）</li><li>reverse（str）将 str 字符串倒序输出</li></ul><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><ul><li><p>curdate（）、current_date( ) 获取当前日期</p></li><li><p>curtime（）、current_time( ) 获取当前日期</p></li><li><p>now（）获取当前日期和时间</p></li><li><p>datediff（d1、d2）d1 和 d2 之间的天数差</p></li></ul><ul><li>adddate（date，num）返回 date 日期开始，之后 num 天的日期</li></ul><ul><li><p>subdate（date，num）返回 date 日期开始，之前 num 天的日期</p></li><li></li><li><p>日期函数</p></li><li><p>Count（字段）根据某个字段统计总记录数（当前数据库保存到多少条数据）</p></li></ul><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><ul><li>sum（字段）计算某个字段的数值总和</li></ul><ul><li>avg（字段）计算某个字段的数值的平均值</li></ul><ul><li>Max（字段）、min（字段）求某个字段最大或最小值</li></ul><h4 id="MySQL-中有哪几种锁？"><a href="#MySQL-中有哪几种锁？" class="headerlink" title="MySQL 中有哪几种锁？"></a><strong>MySQL 中有哪几种锁？</strong></h4><ul><li><p>MyISAM 支持表锁，</p></li><li><p>InnoDB 支持表锁和行锁，默认为行锁。</p></li><li><p>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。</p></li><li><p>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</p></li></ul><h4 id="MySQL-数据优化。"><a href="#MySQL-数据优化。" class="headerlink" title="MySQL 数据优化。"></a><strong>MySQL 数据优化。</strong></h4><ul><li><p><strong>优化数据类型</strong></p><ul><li>避免使用 NULL，NULL 需要特殊处理, 大多数时候应该使用 NOTNULL，或者使用一个特殊的值，如 0，-1 作为默认值。 </li><li>仅可能使用更小的字段，MySQL 从磁盘读取数据后是存储到内存中的，然后使用 cpu 周期和磁盘 I/O 读取它，这意味着越小的数据类型占用的空间越小. </li></ul></li><li><p><strong>小心字符集转换</strong></p><ul><li>客户端或应用程序使用的字符集可能和表本身的字符集不一样，这需要MySQL 在运行过程中隐含地进行转换，此外，要确定字符集如 UTF-8 是否支持多字节字符，因此它们需要更多的存储空间。</li></ul></li><li><p><strong>_优化 count(mycol) 和 count()**</strong> </p></li><li><p><strong>优化子查询</strong></p><ul><li>遇到子查询时，MySQL 查询优化引擎并不是总是最有效的，这就是为什么经常将子查询转换为连接查询的原因了，优化器已经能够正确处理连接查询了，当然要注意的一点是，确保连接表 (第二个表) 的连接列是有索引的，在第一个表上 MySQL 通常会相对于第二个表的查询子集进行一次全表扫描，这是嵌套循环算法的一部分。</li></ul></li><li><p><strong>优化 UNION</strong></p><ul><li>在跨多个不同的数据库时使用 UNION 是一个有趣的优化方法，UNION 从两个互不关联的表中返回数据，这就意味着不会出现重复的行，同时也必须对数据进行排序，我们知道排序是非常耗费资源的，特别是对大表的排序。</li><li>UNION ALL 可以大大加快速度，如果你已经知道你的数据不会包括重复行，或者你不在乎是否会出现重复的行，在这两种情况下使用UNION ALL 更适合。此外，还可以在应用程序逻辑中采用某些方法避免出现重复的行，这样 UNION ALL 和 UNION 返回的结果都是一样的，但 UNION ALL 不会进行排序。</li></ul></li></ul><h4 id="MySQL-的关键字。"><a href="#MySQL-的关键字。" class="headerlink" title="MySQL 的关键字。"></a><strong>MySQL 的关键字。</strong></h4><h5 id="添加索引："><a href="#添加索引：" class="headerlink" title="添加索引："></a>添加索引：</h5><pre><code>alter table** tableName **add** 索引（索引字段）主键：primary key唯一：unique全局：fulltext普通：index多列： index index_name页级: 引擎 BDB。次锁定相邻的一组记录。表级: 引擎 MyISAM ， 理解为锁住整个表，可以同时读，写不行。 行级: 引擎INNODB ， 单独的一行记录加锁，对指定的记录进行加锁，这样其它进程还是可以对同一个表中的其它记录进行操作。 表级锁速度快，但冲突多，行级冲突少，但速度慢。</code></pre><h4 id="存储引擎。"><a href="#存储引擎。" class="headerlink" title="存储引擎。"></a><strong>存储引擎。</strong></h4><ul><li><p>存储引擎说白了就是如何存储数据、如何为存储的数据建立索引和如何更新、查询数据等技术的实现方法。</p></li><li><p>MyISAM：这种引擎是 mysql 最早提供的。</p><ul><li>静态 MyISAM：如果数据表中的各数据列的长度都是预先固定好的，服务器将自动选择这种表类型。因为数据表中每一条记录所占用的空间都是一样的，所以这种表存取和更新的效率非常高。当数据受损时，恢复工作也比较容易做。</li><li>动态 MyISAM：如果数据表中出现 varchar、text 或 BLOB 字段时，服务器将自动选择这种表类型。相对于静态 MyISAM，这种表存储空间比较小，但由于每条记录的长度不一，所以多次修改数据后，数据表中的数据就可能离散的存储在内存中，进而导致执行效率下降。同时，内存中也可能会出现很多碎片。因此，这种类型的表要经常用optimize table 命令或优化工具来进行碎片整理。</li><li>压缩 MyISAM：以上说到的两种类型的表都可以用 myisamchk 工具压缩。这种类型的表进一步减小了占用的存储，但是这种表压缩之后不能再被修改。另外，因为是压缩数据，所以这种表在读取的时候要先时行解压缩。但是，不管是何种 MyISAM 表，目前它都不支持事务，行级锁和外键约束的功能。</li></ul></li><li><p>MyISAM Merge 引擎：这种类型是 MyISAM 类型的一种变种。合并表是将几个相同的 MyISAM 表合并为一个虚表。常应用于日志和数据仓库。 InnoDB：InnoDB 表类型可以看作是对 MyISAM 的进一步更新产品，它提供了事务、行级锁机制和外键约束的功能。</p></li><li><p>memory(heap)：这种类型的数据表只存在于内存中。它使用散列索引，所以数据的存取速度非常快。因为是存在于内存中，所以这种类型常应用于临时表中。</p></li><li><p>archive：这种类型只支持 select 和 insert 语句，而且不支持索引。</p></li><li><p>Desc[ribe] tablename：查看数据表的结构。</p></li><li><p>show engines：命令可以显示当前数据库支持的存储引擎情况。</p></li></ul><h4 id="数据库备份。"><a href="#数据库备份。" class="headerlink" title="数据库备份。"></a><strong>数据库备份。</strong></h4><h5 id="必须要在未登录状态下"><a href="#必须要在未登录状态下" class="headerlink" title="必须要在未登录状态下"></a>必须要在未登录状态下</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 导出整个数据库</span>mysqldump <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p 数据库名 <span class="token operator">></span> 导出的文件名<span class="token comment" spellcheck="true">-- 导出一个表</span>mysqldump <span class="token operator">-</span>u 用户名 <span class="token operator">-</span>p 数据库名 表名<span class="token operator">></span> 导出的文件名<span class="token comment" spellcheck="true">-- 导出一个数据库结构</span>mysqldump <span class="token operator">-</span>u dbuser <span class="token operator">-</span>p <span class="token operator">-</span><span class="token number">d</span> <span class="token comment" spellcheck="true">--add-drop-table</span>dbname <span class="token operator">></span><span class="token number">d</span>:<span class="token operator">/</span>dbname_db<span class="token punctuation">.</span>sql<span class="token operator">-</span><span class="token number">d</span> 没有数据 <span class="token comment" spellcheck="true">--add-drop-table 在每个 create 语句之前增加一个 drop table</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="truncate-delete-drop-的区别。"><a href="#truncate-delete-drop-的区别。" class="headerlink" title="truncate delete drop 的区别。"></a><strong>truncate delete drop 的区别。</strong></h4><ul><li><strong>drop(DDL 语句)：</strong>是不可逆操作，会将表所占用空间全部释放掉；</li><li><strong>truncate(DDL 语句)：</strong>只针对于删除表的操作，在删除过程中不会激活与表有关的删除触发器并且不会把删除记录放在日志中；当表被 truncate 后，这个表和索引会恢复到初始大小；</li><li><strong>delete(DML 语句)：</strong>可以删除表也可以删除行，但是删除记录会被计入日志保存，而且表空间大小不会恢复到原来；</li></ul><h5 id="执行速度：drop-gt-truncate-gt-delete。"><a href="#执行速度：drop-gt-truncate-gt-delete。" class="headerlink" title="执行速度：drop>truncate>delete。"></a>执行速度：drop&gt;truncate&gt;delete。</h5><h4 id="Redis-是什么？两句话做一下概括。"><a href="#Redis-是什么？两句话做一下概括。" class="headerlink" title="Redis 是什么？两句话做一下概括。"></a><strong>Redis 是什么？两句话做一下概括。</strong></h4><ul><li><p>是一个完全开源免费的 key-value 内存数据库  通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets。 </p></li><li><p>Redis 使用最佳方式是全部数据 in-memory。 </p></li><li><p>Redis 更多场景是作为 Memcached 的替代者来使用。</p></li><li><p>当需要除 key/value 之外的更多数据类型支持时，使用 Redis 更合适。</p></li><li><p>当存储的数据不能被剔除时，使用 Redis 更合适。</p></li></ul><h4 id="Redis（管道，哈希）。"><a href="#Redis（管道，哈希）。" class="headerlink" title="Redis（管道，哈希）。"></a><strong>Redis（管道，哈希）。</strong></h4><ul><li><p>Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。</p></li><li><p>Redis 支持数据的备份，即 master-slave 模式的数据备份。</p></li><li><p>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。<strong>Redis 实现原理或机制。</strong></p></li><li><p>Redis 是一个 key-value 存储系统。支持更多无化的 value 类型，除了和 string 外，还支持lists（链表）、sets（集合）和 zsets（有序集合）几种数据类型。这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</p></li><li><p>Redis 是一种基于客户端 - 服务端模型以及请求 / 响应协议的 TCP 服务。这意味着通常情况下一个请求会遵循以下步骤：</p><ul><li>客户端向服务端发送一个查询请求，并监听 Socket 返回，通常是以阻塞模式，等待服务端响应。服务端处理命令，并将结果返回给客户端。</li><li>在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。</li></ul></li><li><p><strong>Redis 管道技术</strong>最显著的优势是提高了 Redis 服务的性能。</p></li></ul><h4 id="Resis分区"><a href="#Resis分区" class="headerlink" title="Resis分区:"></a>Resis分区:</h4><p>将数据分割到多个 Redis 实例的处理过程，每个实例只保存 key 的一个子集。</p><p>通过利用多台计算机内存的和值，允许我们构造更大的数据库。</p><p><strong>Redis 有两种类型分区。</strong></p><ul><li><p>按范围分区，映射一定范围的对象到特定的 Redis 实例。</p></li><li><p>哈希分区：这对任何 key 都适用，用一个 hash 函数将 key 转换为一个数字，比如使用 crc32 hash 函数。对 keyfoobar 执行 crc32(foobar) 会输出类似 93024922 的整数。对这个整数取模，将其转化为 0-3 之间的数字，就可以将这个整数映射到 4 个Redis 实例中的一个了。93024922 % 4 = 2，就是说 key foobar 应该被存到 R2实例中。注意：取模操作是取除的余数，通常在多种编程语言中用 % 操作符实现。</p></li><li><p>实际上，上面的集群模式还存在两个问题：</p><ul><li>扩容问题：因为使用了一致性哈稀进行分片，那么不同的 key 分布到不同的 RedisServer 上，当我们需要扩容时，需要增加机器到分片列表中，这时候会使得同样的 key 算出来落到跟原来不同的机器上，这样如果要取某一个值，会出现取不到的情况，对于这种情况，</li><li>单点故障问题：<ul><li>还是用到 Redis 主从复制的功能，两台物理主机上分别都运行有 RedisServer，其中一个 Redis-Server 是另一个的从库，采用双机热备技术，客户端通过虚拟 IP 访问主库的物理 IP，当主库宕机时，切换到从库的物理 IP。只是事后修复主库时，应该将之前的从库改为主库（使用命令 slaveof noone），主库变为其从库（使命令 slaveof IP PORT），这样才能保证修复期间新增数据的一致性。</li></ul></li></ul></li></ul><h4 id="这里对-Redis-数据库做下小结。"><a href="#这里对-Redis-数据库做下小结。" class="headerlink" title="这里对 Redis 数据库做下小结。"></a><strong>这里对 Redis 数据库做下小结。</strong></h4><ol><li><p>提高了 DB 的可扩展性，只需要将新加的数据放到新加的服务器上就可以了</p></li><li><p>提高了 DB 的可用性，只影响到需要访问的 shard 服务器上的数据的用户</p></li><li><p>提高了 DB 的可维护性，对系统的升级和配置可以按 shard 一个个来搞，对服务产生的影响较小</p></li><li><p>小的数据库存的查询压力小，查询更快，性能更好</p></li></ol><h2 id="八、MySQL数据库"><a href="#八、MySQL数据库" class="headerlink" title="八、MySQL数据库"></a>八、MySQL数据库</h2><h4 id="1-数据库三范式是什么"><a href="#1-数据库三范式是什么" class="headerlink" title="1.数据库三范式是什么?"></a>1.数据库三范式是什么?</h4><ol><li><p>第一范式（1NF）：字段具有原子性,不可再分。(所有关系型数据库系统都满足第一范式数据库表中的字段都是单一属性的，不可再分)</p></li><li><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。要求数据库表中的每个实例或行必须可以被惟一地区分。通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键。</p></li><li><p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。 &gt;所以第三范式具有如下特征：</p><ul><li>每一列只有一个值 </li><li>每一行都能区分。 </li><li>每一个表都不包含其他表已经包含的非主关键字信息。</li></ul></li></ol><h4 id="2-有哪些数据库优化方面的经验"><a href="#2-有哪些数据库优化方面的经验" class="headerlink" title="2.有哪些数据库优化方面的经验?"></a><strong>2.有哪些数据库优化方面的经验</strong>?</h4><ol><li><p>用 PreparedStatement， 一般来说比 Statement 性能高：一个 sql发给服务器去执行，涉及步骤：语法检查、语义分析， 编译，缓存。</p></li><li><p>有外键约束会影响插入和删除性能，如果程序能够保证数据的完整性，那在设计数据库时就去掉外键。</p></li><li><p>表中允许适当冗余，譬如，主题帖的回复数量和最后回复时间等</p></li><li><p>UNION ALL 要比 UNION 快很多，所以，如果可以确认合并的两个结果集中不包含重复数据且不需要排序时的话，那么就使用 UNIONALL。 </p></li></ol><h4 id="3-请简述常用的索引有哪些种类"><a href="#3-请简述常用的索引有哪些种类" class="headerlink" title="3.请简述常用的索引有哪些种类?"></a><strong>3.</strong>请简述常用的索引有哪些种类?</h4><ol><li><p>普通索引: 即针对数据库表创建索引</p></li><li><p>唯一索引: 与普通索引类似，不同的就是：MySQL 数据库索引列的值必须唯一，但允许有空值</p></li><li><p>主键索引: 它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引</p></li><li><p>组合索引: 为了进一步榨取 MySQL 的效率，就要考虑建立组合索引。将数据库表中的多个字段联合起来作为一个组合索引。</p></li></ol><h4 id="4-在-mysql-数据库中索引的工作机制是什么？"><a href="#4-在-mysql-数据库中索引的工作机制是什么？" class="headerlink" title="4.在 mysql **数据库中索引的工作机制是什么？"></a><strong>4.在</strong> <strong>mysql</strong> **数据库中索引的工作机制是什么？</h4><ul><li>数据库索引是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B 树及其变种 B+树</li></ul><h4 id="5-MySQL-的基础操作命令"><a href="#5-MySQL-的基础操作命令" class="headerlink" title="5.MySQL 的基础操作命令:"></a><strong>5.MySQL</strong> <strong>的基础操作命令</strong>:</h4><ol><li><p>MySQL 是否处于运行状态:Debian 上运行命令 service mysql status，在 RedHat 上运行命令 service mysqld status</p></li><li><p>开启或停止 MySQL 服务 :运行命令 service mysqld start 开启服务；运行命令 service mysqld stop 停止服务</p></li><li><p>Shell 登入 MySQL: 运行命令 mysql -u root -p</p></li><li><p>列出所有数据库:运行命令 show databases;</p></li><li><p>切换到某个数据库并在上面工作:运行命令 use database<em>name;</em> <em>进入</em>名为<em>database</em>name 的数据库</p></li><li><p>列出某个数据库内所有表: show tables;</p></li><li><p>获取表内所有 Field 对象的名称和类型 :describe table_name;</p></li></ol><h4 id="6-mysql-的复制原理以及流程。"><a href="#6-mysql-的复制原理以及流程。" class="headerlink" title="6.mysql 的复制原理以及流程。"></a><strong>6.mysql</strong> <strong>的复制原理以及流程。</strong></h4><ul><li>将 Mysql 的数据分布到多个系统上去，通过将 Mysql 的某一台主机的数据复制到其它主机（slaves）上，并重新执行一遍来实现的。 </li><li>复制过程中一个服务器充当主服务器，而一个或多个其它服务器充当从服务器。主服务器将更新写入二进制日志文件，并维护文件的一个索引以跟踪日志循环。这些日志可以记录发送到从服务器的更新。 当一个从服务器连接主服务器时，它通知主服务器在日志中读取的最后一次成功更新的位置。从服务器接收从那时起发生的任何更新，然后封锁并等待主服务器通知新的更新。 </li><li>过程如下 <ul><li><ol><li>主服务器把更新记录到二进制日志文件中。 </li><li>从服务器把主服务器的二进制日志拷贝到自己的中继日志（replay log）中。 、</li><li>从服务器重做中继日志中的时间，把更新应用到自己的数据库上。</li></ol></li></ul></li></ul><h4 id="7-mysql-支持的复制类型"><a href="#7-mysql-支持的复制类型" class="headerlink" title="7.mysql 支持的复制类型?"></a><strong>7.mysql</strong> <strong>支持的复制类型</strong>?</h4><ol><li><p>基于语句的复制： 在主服务器上执行的 SQL 语句，在从服务器上执行同样的语句。MySQL 默认采用基于语句的复制，效率比较高。 一旦发现没法精确复制时，会自动选着基于行的复制。</p></li><li><p>基于行的复制：把改变的内容复制过去，而不是把命令在从服务器上执行一遍. 从 mysql5.0 开始支持</p></li><li><p>混合类型的复制: 默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</p></li></ol><h4 id="8-mysql-中-myisam-与-innodb-的区别？"><a href="#8-mysql-中-myisam-与-innodb-的区别？" class="headerlink" title="8.mysql 中 myisam 与 innodb 的区别？"></a><strong>8.mysql</strong> <strong>中</strong> <strong>myisam</strong> <strong>与</strong> <strong>innodb</strong> <strong>的区别？</strong></h4><ul><li><p>MyISAM<strong>：强调的是性能，每次查询具有原子性</strong>,执行速度比 InnoDB 类型更快，但是不提供事务支持。 </p></li><li><p>InnoDB：提供事务支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。</p></li><li><p>InnoDB 支持行级锁，而 MyISAM 支持表级锁. </p><ul><li>用户在操作myisam 表时，select，update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。</li></ul></li><li><p>InnoDB 支持 MVCC, 而 MyISAM 不支持</p></li><li><p>InnoDB 支持外键，而 MyISAM 不支持</p></li><li><p>MyISAM：允许没有任何索引和主键的表存在，索引都是保存行的地址。 </p></li><li><p>InnoDB：如果没有设定主键或者非空唯一索引，就会自动生成一个 6 字节的主键(用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值。</p></li><li><p>InnoDB 不支持全文索引，而 MyISAM 支持。</p></li><li><p>MyISAM**：数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作。 </p></li><li><p>InnoDB：免费的方案可以是拷贝数据文件、备份binlog，或者用 mysqldump，在数据量达到几十 G 的时候就相对痛苦了</p></li><li><p>每个 MyISAM 在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。<strong>.frm 文件存储表定义。数据文件的扩展名为*.MYD (MYData)。索引文件的扩展名</strong>是<strong>.MYI (MYIndex)</strong>。</p></li><li><p>nnoDB：所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB。</p></li></ul><h4 id="9-mysql-中-varchar-与-char-的区别以及-varchar-50-中的-50-代表的涵义？"><a href="#9-mysql-中-varchar-与-char-的区别以及-varchar-50-中的-50-代表的涵义？" class="headerlink" title="9.mysql 中 varchar 与 char 的区别以及 varchar(50)中的 50 代表的涵义？"></a><strong>9.mysql</strong> <strong>中</strong> <strong>varchar</strong> <strong>与</strong> <strong>char</strong> <strong>的区别以及</strong> <strong>varchar(50)</strong>中的 <strong>50</strong> <strong>代表的涵</strong>义？</h4><ol><li><p>varchar 与 char 的区别: char 是一种固定长度的类型，varchar 则是一种可变长度的类型.</p></li><li><p>varchar(50)中 50 的涵义 : 最多存放 50 个字节</p></li><li><p>int（20）中 20 的涵义: int(M)中的 M indicates the maximumdisplay width (最大显示宽度)for integer types. The maximumlegal display width is 255.</p></li></ol><h4 id="10-MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐级之间的区别？"><a href="#10-MySQL-中-InnoDB-支持的四种事务隔离级别名称，以及逐级之间的区别？" class="headerlink" title="10.MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？"></a><strong>10.MySQL</strong> <strong>中</strong> <strong>InnoDB</strong> <strong>支持的四种事务隔离级别名称，以及逐级之间的区</strong>别？</h4><ol><li><strong>Read Uncommitted（读取未提交）</strong> </li></ol><ul><li>在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。读取未提交的数据，也被称之为脏读（Dirty Read）。</li></ul><ol start="2"><li><p><strong>Read Committed（读已提交）</strong> </p><p>一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持所谓的</p></li><li><p><strong>Repeatable Read（可重复读）</strong> </p><ul><li>这是 MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。</li></ul></li><li><p><strong>Serializable（可串行化）</strong> </p><ul><li>通过强制事务排序，在每个读的数据行上加上共享锁。使之不可能相互冲突，从而解决幻读问题。</li></ul></li></ol><h4 id="11-表中有大字段X，且字段-X-不会经常更新，以读为为主，将该字段拆成子表好处是什么？"><a href="#11-表中有大字段X，且字段-X-不会经常更新，以读为为主，将该字段拆成子表好处是什么？" class="headerlink" title="11.表中有大字段X，且字段 X 不会经常更新，以读为为主，将该字段拆成子表好处是什么？"></a><strong>11.表中有大字段X，且字段</strong> <strong>X</strong> <strong>不会经常更新，以读为为主，将该字段拆成子表好处是什么？</strong></h4><ul><li>MYSQL 数据库的记录存储是按行存储的，数据块大小是固定的16K，每条记录越小，相同的块存储的记录就越多。此时把大字段拆走，，就能提高效率。</li></ul><p><strong>12.MySQL</strong> <strong>中</strong> <strong>InnoDB</strong> <strong>引擎的行锁是通过加在什么上完成（或称实现）的？</strong></p><ul><li>InnoDB 行锁是通过给索引上的索引项加锁来实现的，InnoDB 这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB 才使用行级锁，否则，InnoDB 将使用表锁！</li></ul><h4 id="13-MySQL-中控制内存分配的全局参数，有哪些？"><a href="#13-MySQL-中控制内存分配的全局参数，有哪些？" class="headerlink" title="13.MySQL 中控制内存分配的全局参数，有哪些？"></a><strong>13.MySQL</strong> <strong>中控制内存分配的全局参数，有哪些？</strong></h4><ol><li><p>Key<em>buffer</em>size： 指定索引缓冲区的大小，它决定索引处理的速度，尤其是索引读的速度。</p></li><li><p>innodb<em>buffer</em>pool_size ：表示缓冲池字节大小，InnoDB缓存</p></li><li><p>query<em>cache</em>size ：查询结果缓存</p></li><li><p>read<em>buffer</em>size &gt;是 MySQL 读入缓冲区大小。</p></li></ol><h4 id="14-若一张表中只有一个字段-VARCHAR-N-类型，utf8编码，则N最大值为多少"><a href="#14-若一张表中只有一个字段-VARCHAR-N-类型，utf8编码，则N最大值为多少" class="headerlink" title="14.若一张表中只有一个字段 VARCHAR(N)类型，utf8编码，则N最大值为多少"></a><strong>14.若一张表中只有一个字段 VARCHAR(N)类型，utf8编码，则N最大值为多少</strong></h4><ul><li>由于 utf8 的每个字符最多占用 3 个字节。而 MySQL 定义行的长度不能超过65535，因此 N 的最大值计算方法为：(65535-1-2)/3。减去 1 的原因是实际存储从第二个字节开始，减去 2 的原因是因为要在列表长度存储实际的字符长度，除以 3 是因为 utf8 限制：每个字符最多占用 3 个字节。</li></ul><h4 id="15-SELECT-和-SELECT-全部字段-的-2-种写法有何优缺点"><a href="#15-SELECT-和-SELECT-全部字段-的-2-种写法有何优缺点" class="headerlink" title="15. [SELECT *] 和[SELECT** 全部字段**]的 2 种写法有何优缺点?"></a><strong>15. [SELECT *]</strong> 和[SELECT** <strong>全部字段**</strong>]的 <strong>2</strong> <strong>种写法有何优缺点?</strong></h4><ol><li><p>前者要解析数据字典，后者不需要</p></li><li><p>结果输出顺序，前者与建表列顺序相同，后者按指定字段顺序。</p></li><li><p>表字段改名，前者不需要修改，后者需要改</p></li><li><p>后者可以建立索引进行优化，前者无法优化</p></li><li><p>后者的可读性比前者要高</p></li></ol><h4 id="16-HAVNG-子句-和-WHERE-的异同点"><a href="#16-HAVNG-子句-和-WHERE-的异同点" class="headerlink" title="16.HAVNG 子句 和 WHERE 的异同点?"></a><strong>16.HAVNG</strong> <strong>子句 和</strong> <strong>WHERE</strong> <strong>的异同点?</strong></h4><ol><li><p>语法上：where 用表中列名，having 用 select 结果别名</p></li><li><p>影响结果范围：where 从表读出数据的行数，having 返回客户端的行数</p></li><li><p>索引：where 可以使用索引，having 不能使用索引，只能在临时结果集操作</p></li><li><p>where 后面不能使用聚集函数，having 是专门使用聚集函数的。</p></li></ol><h4 id="17-MySQL-当记录不存在时-insert-当记录存在时-update语句怎么写？"><a href="#17-MySQL-当记录不存在时-insert-当记录存在时-update语句怎么写？" class="headerlink" title="17.MySQL **当记录不存在时 insert,当记录存在时 **update语句怎么写？"></a><strong>17.MySQL **当记录不存在时</strong> <strong>insert,当记录存在时 **update语句怎么写？</strong></h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE KEY</span><span class="token keyword">UPDATE</span> <span class="token number">c</span><span class="token operator">=</span><span class="token number">c</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>18.MySQL</strong> <strong>的</strong> <strong>insert</strong> <strong>和</strong> <strong>update</strong> <strong>的</strong> <strong>select</strong> <strong>语句语法</strong></p><pre class="line-numbers language-sql"><code class="language-sql">SQL <span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>stuid<span class="token punctuation">,</span>stuname<span class="token punctuation">,</span>deptid<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'xzm'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token keyword">from</span> student <span class="token keyword">where</span> stuid <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">update</span> student <span class="token number">a</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> student <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>stuID<span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">set</span><span class="token number">a</span><span class="token punctuation">.</span>stuname<span class="token operator">=</span>concat<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>stuname<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>stuID<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>stuID<span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、Redis"><a href="#九、Redis" class="headerlink" title="九、Redis"></a>九、Redis</h2><h4 id="问题一：Redis-支持哪几种数据类型？"><a href="#问题一：Redis-支持哪几种数据类型？" class="headerlink" title="问题一：Redis 支持哪几种数据类型？"></a>问题一：Redis 支持哪几种数据类型？</h4><ul><li>String、List、Set、Sorted Set、hashes</li></ul><h4 id="问题二：Redis-有哪几种数据淘汰策略？"><a href="#问题二：Redis-有哪几种数据淘汰策略？" class="headerlink" title="问题二：Redis 有哪几种数据淘汰策略？"></a>问题二：Redis 有哪几种数据淘汰策略？</h4><ol><li>noeviction:返回错误当内存限制达到，并且客户端尝试执行会让更多内存被使用的命令。</li><li>allkeys-lru: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</li><li>volatile-lru: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</li><li>allkeys-random: 回收随机的键使得新添加的数据有空间存放。</li><li>volatile-random: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</li><li>volatile-ttl: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</li></ol><h4 id="问题三：Redis-集群方案应该怎么做？都有哪些方案？"><a href="#问题三：Redis-集群方案应该怎么做？都有哪些方案？" class="headerlink" title="问题三：Redis 集群方案应该怎么做？都有哪些方案？"></a>问题三：Redis 集群方案应该怎么做？都有哪些方案？</h4><ul><li><strong>官方cluster方案</strong><ul><li>采用无中心结构，每个节点保存数据和整个集群状态，每个节点都和其他节点连接。</li></ul></li><li><strong>twemproxy代理方案</strong><ul><li>利用**twemproxy做分片的技术。twemproxy处于客户端和服务器的中间，将客户端发来的请求，进行一定的处理后（sharding），再转发给后端真正的redis服务器。</li></ul></li><li><strong>Sentinel哨兵模式</strong><ul><li>每个Sentinel以每秒钟一次的频率向它所知的Master、Slave以及其他Sentinel实例发送一个PING命令。并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。</li></ul></li><li><strong>codis</strong></li><li><strong>客户端分片</strong><ul><li>分区的逻辑在客户端实现，由客户端自己选择请求到哪个节点。方案可参考一致性哈希，这种方案通常适用于用户对客户端的行为有完全控制能力的场景。</li></ul></li></ul><h4 id="问题四：Redis-集群方案什么情况下会导致整个集群不可用？"><a href="#问题四：Redis-集群方案什么情况下会导致整个集群不可用？" class="headerlink" title="问题四：Redis 集群方案什么情况下会导致整个集群不可用？"></a>问题四：Redis 集群方案什么情况下会导致整个集群不可用？</h4><ul><li>有 A，B，C 三个节点的集群,在没有复制模型的情况下,如果节点 B 失败了，那么整个集群就会以为缺少5501-11000 这个范围的槽（slot）而不可用</li></ul><h4 id="问题五：如何保证-redis-中的数据都是热点数据？"><a href="#问题五：如何保证-redis-中的数据都是热点数据？" class="headerlink" title="问题五：如何保证 redis 中的数据都是热点数据？"></a>问题五：如何保证 redis 中的数据都是热点数据？</h4><ul><li>限定 Redis 占用的内存，Redis 会根据自身数据淘汰策略，留下热数据到内存。所以，数据大约占用的内存，然后设置一下 Redis 内存限制即可，并将淘汰策略为volatile-lru或者allkeys-lru。 </li></ul><h4 id="问题六：Redis-有哪些适合的场景？"><a href="#问题六：Redis-有哪些适合的场景？" class="headerlink" title="问题六：Redis 有哪些适合的场景？"></a>问题六：Redis 有哪些适合的场景？</h4><ul><li>会话缓存（Session Cache）</li><li>全页缓存（FPC）</li><li>队列</li><li>排行榜/计数器</li><li>发布/订阅</li></ul><h4 id="问题七：Redis-和-Redisson-有什么关系？"><a href="#问题七：Redis-和-Redisson-有什么关系？" class="headerlink" title="问题七：Redis 和 Redisson 有什么关系？"></a>问题七：Redis 和 Redisson 有什么关系？</h4><ul><li>Redisson 是一个高级的分布式协调 Redis 客服端，实现了分布式和可扩展的 Java 数据结构。</li></ul><h4 id="问题八：说说-Redis-哈希槽？"><a href="#问题八：说说-Redis-哈希槽？" class="headerlink" title="问题八：说说 Redis 哈希槽？"></a>问题八：说说 Redis 哈希槽？</h4><ul><li>Redis 集群没有使用一致性 hash,而是引入了哈希槽的概念，Redis 集群有 16384 个哈希槽，每个 key 通 过 CRC16 校验后对 16384 取模来决定放置哪个槽，集群的每个节点负责一部分 hash 槽。</li></ul><h4 id="问题九：Redis-集群的主从复制模型是怎样的？"><a href="#问题九：Redis-集群的主从复制模型是怎样的？" class="headerlink" title="问题九：Redis 集群的主从复制模型是怎样的？"></a>问题九：Redis 集群的主从复制模型是怎样的？</h4><ul><li>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有 N-1 个复制品</li></ul><h4 id="问题十：Redis-集群会有写操作丢失吗？为什么？"><a href="#问题十：Redis-集群会有写操作丢失吗？为什么？" class="headerlink" title="问题十：Redis 集群会有写操作丢失吗？为什么？"></a>问题十：Redis 集群会有写操作丢失吗？为什么？</h4><ul><li>会，因为redis不保证数据的强一致性。</li></ul><h4 id="问题十一：Redis-中的管道有什么用？"><a href="#问题十一：Redis-中的管道有什么用？" class="headerlink" title="问题十一：Redis 中的管道有什么用？"></a>问题十一：Redis 中的管道有什么用？</h4><ul><li>在旧的请求还未被响应时，能够处理新的请求，而不用等待回复。最后在一个步骤中读取该回复。<ul><li>比如邮件的pop3服务</li></ul></li></ul><h4 id="问题十二：怎么理解-Redis-事务？"><a href="#问题十二：怎么理解-Redis-事务？" class="headerlink" title="问题十二：怎么理解 Redis 事务？"></a>问题十二：怎么理解 Redis 事务？</h4><ul><li>一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行，事务在执行的过程中，不会被其他客户端发送来的命令请求所打断</li></ul><h4 id="问题十三：使用过-Redis-分布式锁么，它是怎么实现的？"><a href="#问题十三：使用过-Redis-分布式锁么，它是怎么实现的？" class="headerlink" title="问题十三：使用过 Redis 分布式锁么，它是怎么实现的？"></a>问题十三：使用过 Redis 分布式锁么，它是怎么实现的？</h4><ul><li>某个客户端要加锁。首先根据hash节点选择一台机器（互斥锁），然后就会发送一段 lua 脚本到 redis 上，通过这个命令设置一个 hash 数据结构，存储锁的标记以及释放时间。</li><li>当客户端二尝试加锁时先判断锁是否存在，然后再判断这个标记的value里是否存在客户端2的id，由于存储的时第一个客户端的id，于是客户端二开始自旋等待。</li><li>假设客户端设置30s的超时时间，但是30s后业务还未完成，后台启动的watch dog会不断的自动延期<ul><li>watch dog：一旦加锁成功后台就会启动一个线程，每隔10s检查一下，如果上锁的客户端还未释放就自动延期</li></ul></li><li>代码实现：<ul><li>先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放。</li></ul></li></ul><h4 id="问题十四：Redis-分布式锁的缺点"><a href="#问题十四：Redis-分布式锁的缺点" class="headerlink" title="问题十四：Redis 分布式锁的缺点"></a>问题十四：<strong>Redis</strong> <strong>分布式锁的缺点</strong></h4><ul><li><strong>在</strong> <strong>redis master</strong> <strong>实例宕机的时候，可能导致多个客户端同时完成加锁</strong></li></ul><h4 id="问题十五：使用过-Redis-做异步队列么，你是怎么用的？有什么缺点？"><a href="#问题十五：使用过-Redis-做异步队列么，你是怎么用的？有什么缺点？" class="headerlink" title="问题十五：使用过 Redis 做异步队列么，你是怎么用的？有什么缺点？"></a>问题十五：<strong>使用过 Redis 做异步队列么，你是怎么用的？有什么缺点？</strong></h4><ul><li><p>使用 list 结构作为队列，rpush 生产消息，lpop 消费消息。当 lpop 没有消息的时候，要适当 sleep一会再重试。</p></li><li><p>缺点：</p><ul><li>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如 rabbitmq 等。</li></ul></li><li><p>能不能生产一次消费多次呢？：</p><ul><li>使用 pub/sub 主题订阅者模式，可以实现 1:N 的消息队列。</li></ul></li></ul><h4 id="问题十六：什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？"><a href="#问题十六：什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？" class="headerlink" title="问题十六：什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？"></a>问题十六：<strong>什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？</strong></h4><ul><li><p><strong>缓存穿透</strong>：大量请求携带不存在的id发起查询，由于缓存中不存在就会打到数据库，造成数据库服务器宕机。</p><ul><li>解决：<ul><li>不存在的id也缓存</li><li>参数过滤</li><li>ip禁止</li><li>布隆过滤器</li></ul></li></ul></li><li><p><strong>缓存雪崩</strong>：大量的热点数据在同一时间失效，请求打到数据库，造成服务器宕机</p><ul><li>解决：<ul><li>使用随机过期时间</li><li>分节点缓存数据</li><li>定时任务刷新缓存</li><li>设置永不过期</li></ul></li></ul></li><li><p><strong>缓存击穿</strong>：某个热点数据失效，请求打到数据库，造成服务器宕机</p><ul><li>解决：<ul><li>定时器刷新</li><li>永不过期</li><li>使用互斥锁：使用如 Redis 的 setnx 去设置一个互斥锁，当操作成功返回时查询数据库会写缓存</li></ul></li></ul></li></ul><h4 id="问题十七：知道-redis-的持久化吗？底层如何实现的？有什么优点缺点？"><a href="#问题十七：知道-redis-的持久化吗？底层如何实现的？有什么优点缺点？" class="headerlink" title="问题十七：知道 redis 的持久化吗？底层如何实现的？有什么优点缺点？"></a>问题十七：<strong>知道</strong> <strong>redis</strong> <strong>的持久化吗？底层如何实现的？有什么优点缺点？</strong></h4><ul><li>RDB：基于时间段的数据快照磁盘同步</li><li>AOF：记录redis执行过的指令</li></ul><h2 id="十二、mybatis"><a href="#十二、mybatis" class="headerlink" title="十二、mybatis"></a>十二、mybatis</h2><h4 id="MyBatis-的缓存"><a href="#MyBatis-的缓存" class="headerlink" title="MyBatis 的缓存"></a>MyBatis 的缓存</h4><ul><li><p>MyBatis 的缓存分为一级缓存和二级缓存,</p><ul><li><p>一级缓存放在 session 里面,默认就有,</p></li><li><p>二级缓存放在它的命名空间里,默认是不打开的,使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache></cache></p></li></ul></li></ul><h4 id="Mybatis-是如何进行分页的？分页插件的原理是什么？"><a href="#Mybatis-是如何进行分页的？分页插件的原理是什么？" class="headerlink" title="Mybatis 是如何进行分页的？分页插件的原理是什么？"></a>Mybatis 是如何进行分页的？分页插件的原理是什么？</h4><ol><li>Mybatis 使用 RowBounds 对象进行分页，也可以直接编写 sql 实现分页，也可以使用Mybatis 的分页插件。</li><li>分页插件的原理：实现 Mybatis 提供的接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql。</li></ol><h4 id="简述-Mybatis-的插件运行原理"><a href="#简述-Mybatis-的插件运行原理" class="headerlink" title="简述 Mybatis 的插件运行原理"></a>简述 Mybatis 的插件运行原理</h4><ul><li>Mybatis 仅可以编写针对 ParameterHandler、ResultSetHandler、StatementHandler、Executor 这 4 种接口的插件，Mybatis 通过动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler 的 invoke()方法，</li></ul><h4 id="Mybatis-动态-sql-怎么实现的"><a href="#Mybatis-动态-sql-怎么实现的" class="headerlink" title="Mybatis 动态 sql 怎么实现的"></a>Mybatis 动态 sql 怎么实现的</h4><ul><li>使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。</li></ul><h4 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="# {}和${}的区别是什么？"></a># {}和${}的区别是什么？</h4><ol><li><h1 id="是预编译处理，-是字符串替换为变量值。"><a href="#是预编译处理，-是字符串替换为变量值。" class="headerlink" title="{}是预编译处理，${}是字符串替换为变量值。"></a>{}是预编译处理，${}是字符串替换为变量值。</h1></li><li>Mybatis 在处理# {}时，会将 sql 中的# {}替换为?号，调用 PreparedStatement 的 set 方法来赋值；</li><li>使用# {}可以有效的防止 SQL 注入，提高系统安全性。</li></ol><h4 id="Mybatis-是如何将-sql-执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#Mybatis-是如何将-sql-执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="Mybatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>Mybatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？</h4><ol><li>使用<resultmap>标签，逐一定义列名和对象属性名之间的映射关系。</resultmap></li><li>是使用 sql 列的别名功能，将列别名书写为对象属性名</li></ol><h4 id="Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？"><a href="#Mybatis-都有哪些-Executor-执行器？它们之间的区别是什么？" class="headerlink" title="Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？"></a>Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？</h4><ol><li><strong>SimpleExecutor</strong>：每执行一次 update 或 select，就开启一个 Statement 对象，用完立刻关闭 Statement 对象。</li><li><strong>ReuseExecutor</strong>：执行 update 或 select，以 sql 作为key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map</li><li><strong>BatchExecutor</strong>：完成批处理。</li></ol><h4 id="在-mapper-中如何传递多个参数？"><a href="#在-mapper-中如何传递多个参数？" class="headerlink" title="在 mapper 中如何传递多个参数？"></a>在 mapper 中如何传递多个参数？</h4><ol><li>直接在方法中传递参数，xml 文件用# {0} # {1}来获取</li><li>使用 @param 注解:这样可以直接在 xml 文件中通过# {name}来获取</li></ol><h2 id="十三、SpringCloud"><a href="#十三、SpringCloud" class="headerlink" title="十三、SpringCloud"></a>十三、SpringCloud</h2><p><img src="https://i.loli.net/2020/09/09/u1ctq9lkRCaJUET.png" alt=""></p><h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><h4 id="CAP-理论："><a href="#CAP-理论：" class="headerlink" title="CAP 理论："></a>CAP 理论：</h4><ul><li>C：一致性</li><li>A :可用性</li><li>P：分区容错性 (一定时间内完成一致性，避免造成分区数据不一致)</li></ul><h4 id="eureka："><a href="#eureka：" class="headerlink" title="eureka："></a>eureka：</h4><h4 id="微服务概述："><a href="#微服务概述：" class="headerlink" title="微服务概述："></a>微服务概述：</h4><ul><li>微服务是一种用于构建应用的架构方案，将应用拆分成多个核心功能。每个功能都被称为一项服务，可以单独构建和部署，这意味着各项服务在工作（和出现故障）时不会相互影响。</li></ul><h4 id="Eureka的服务注册与发现："><a href="#Eureka的服务注册与发现：" class="headerlink" title="Eureka的服务注册与发现："></a>Eureka的服务注册与发现：</h4><ul><li>没有服务注册中心,也可以服务间调用,为什么还要服务注册?<ul><li>当服务很多时,单靠代码手动管理是很麻烦的,需要一个公共组件,统一管理多服务,包括服务是否正常运行等</li></ul></li></ul><h4 id="spring-cloud-的核心组件有哪些？"><a href="#spring-cloud-的核心组件有哪些？" class="headerlink" title="spring cloud 的核心组件有哪些？"></a><strong>spring cloud 的核心组件有哪些？</strong></h4><ul><li>Eureka：服务注册于发现。</li><li>Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。</li><li>Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。</li><li>Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。</li><li>Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。</li><li>config：配置中心</li></ul><h4 id="SpringCloud和Dubbo-："><a href="#SpringCloud和Dubbo-：" class="headerlink" title="SpringCloud和Dubbo ："></a>SpringCloud和Dubbo ：</h4><ol><li><strong>SpringCloud</strong>是Apache旗下的Spring体系下的微服务解决方案 使用RestApi<ul><li>使用Netflix Eureka实现注册中心</li><li>REST是轻量级的接口,服务的提供和调用不存在代码之间的耦合</li></ul></li><li><strong>Dubbo</strong>是阿里系的分布式服务治理框架 使用RPC远程调用<ul><li>Dubbo使用了第三方的ZooKeeper作为其底层的注册中心</li><li>服务提供方和调用方式之间依赖太强,我们需要为每一个微服务进行接口的定义,并通过持续继承发布</li></ul></li></ol><h4 id="什么是服务雪崩、服务熔断-什么是服务降级"><a href="#什么是服务雪崩、服务熔断-什么是服务降级" class="headerlink" title="什么是服务雪崩、服务熔断?什么是服务降级"></a>什么是服务雪崩、服务熔断?什么是服务降级</h4><ul><li><p>服务雪崩：</p><ul><li>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C有调用其他的微服务，这就是所谓的”扇出”，如扇出的链路上某个微服务的调用响应式过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统雪崩，所谓的”雪崩效应”。</li></ul></li><li><p>为了解决某个微服务的调用响应时间过长或者不可用进而占用越来越多的系统资源引起雪崩效应就要进行服务熔断和服务降级处理。</p></li><li><p><strong>服务熔断</strong>：</p><ul><li>指的是某个服务故障或异常一起类似显示世界中的“保险丝”当某个异常条件被触发就直接熔断整个服务，而不是一直等到此服务超时。</li><li>主启动类标注<strong>@EnableCircuitBreaker</strong>开启Hystrix支持</li><li>在controller标注<strong>@HystrixCommand(fallbackMethod = “”)</strong>指定兜底方法</li><li>定义兜底方法 方法签名和返回值与接口保持一致</li></ul></li><li><p><strong>服务降级</strong>：</p><ul><li><p>在客户端完成，与服务端没有关系。当某个服务熔断之后，服务器将不再被调用，此刻客户端可以自己准备一个本地的fallback回调，返回一个缺省值，这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强</p></li><li><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 开启服务熔断</span><span class="token attr-name">feign.hystrix.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 设置超时时间</span><span class="token attr-name">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds</span><span class="token punctuation">=</span><span class="token attr-value">6000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写远程调用接口标注注解</p><pre><code>@FeignClient(name = "service-vod",fallback = xxx.class) </code></pre></li><li><p>编写实现类完成逻辑代码</p></li></ul></li></ul><h4 id="eureka自我保护机制是什么"><a href="#eureka自我保护机制是什么" class="headerlink" title="eureka自我保护机制是什么?"></a>eureka自我保护机制是什么?</h4><ul><li>当Eureka Server 节点在短时间内丢失了过多实例的连接时（比如网络故障或频繁启动关闭客户端）节点会进入自我保护模式，保护注册信息，不再删除注册数据，故障恢复时，自动退出自我保护模式。</li></ul><h4 id="什么是Ribbon？"><a href="#什么是Ribbon？" class="headerlink" title="什么是Ribbon？"></a>什么是Ribbon？</h4><ul><li>ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。feign默认集成了ribbon。</li></ul><h4 id="什么是feigin？它的优点是什么？"><a href="#什么是feigin？它的优点是什么？" class="headerlink" title="什么是feigin？它的优点是什么？"></a>什么是feigin？它的优点是什么？</h4><ol><li>feign采用的是基于接口的注解</li><li>feign整合了ribbon，具有负载均衡的能力</li><li>整合了Hystrix，具有熔断的能力<ul><li>添加pom依赖。</li><li>启动类添加@EnableFeignClients</li><li>定义一个接口@FeignClient(name=“xxx”)指定调用哪个服务</li></ul></li></ol><h4 id="Ribbon和Feign的区别？"><a href="#Ribbon和Feign的区别？" class="headerlink" title="Ribbon和Feign的区别？"></a>Ribbon和Feign的区别？</h4><ol><li>启动类注解不同，Ribbon是@RibbonClient feign的是@EnableFeignClients</li><li>服务指定的位置不同，Ribbon是在@RibbonClient注解上声明，Feign则是在定义抽象方法的接口中使用@FeignClient声明。</li><li>调用方式不同，Ribbon需要自己构建http请求，模拟http请求然后使用RestTemplate发送给其他服务，步骤相当繁琐。Feign需要将调用的方法定义成抽象方法即可。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GC和GC Tuning</title>
      <link href="2020/09/11/GC%E5%92%8CGC%20Tuning/"/>
      <url>2020/09/11/GC%E5%92%8CGC%20Tuning/</url>
      <content type="html"><![CDATA[<h3 id="GC的基础知识"><a href="#GC的基础知识" class="headerlink" title="GC的基础知识"></a>GC的基础知识</h3><h4 id="1-什么是垃圾"><a href="#1-什么是垃圾" class="headerlink" title="1.什么是垃圾"></a>1.什么是垃圾</h4><blockquote><p>C语言申请内存：malloc free</p><p>C++： new delete</p><p>c/C++ 手动回收内存</p><p>Java: new ？</p><p>自动内存回收，编程上简单，系统不容易出错，手动释放内存，容易出两种类型的问题：</p><ol><li>忘记回收</li><li>多次回收</li></ol></blockquote><p>没有任何引用指向的一个对象或者多个对象（循环引用）</p><h4 id="2-如何定位垃圾"><a href="#2-如何定位垃圾" class="headerlink" title="2.如何定位垃圾"></a>2.如何定位垃圾</h4><ol><li>引用计数（ReferenceCount）</li><li>根可达算法(RootSearching)</li></ol><h4 id="3-常见的垃圾回收算法"><a href="#3-常见的垃圾回收算法" class="headerlink" title="3.常见的垃圾回收算法"></a>3.常见的垃圾回收算法</h4><ol><li>标记清除(mark sweep) - 位置不连续 产生碎片 效率偏低（两遍扫描）</li><li>拷贝算法 (copying) - 没有碎片，浪费空间</li><li>标记压缩(mark compact) - 没有碎片，效率偏低（两遍扫描，指针需要调整）</li></ol><h4 id="4-JVM内存分代模型（用于分代垃圾回收算法）"><a href="#4-JVM内存分代模型（用于分代垃圾回收算法）" class="headerlink" title="4.JVM内存分代模型（用于分代垃圾回收算法）"></a>4.JVM内存分代模型（用于分代垃圾回收算法）</h4><ol><li><p>部分垃圾回收器使用的模型</p><blockquote><p>除Epsilon ZGC Shenandoah之外的GC都是使用逻辑分代模型</p><p>G1是逻辑分代，物理不分代</p><p>除此之外不仅逻辑分代，而且物理分代</p></blockquote></li><li><p>新生代 + 老年代 + 永久代（1.7）Perm Generation/ 元数据区(1.8) Metaspace</p><ol><li>永久代 元数据 - Class</li><li>永久代必须指定大小限制 ，元数据可以设置，也可以不设置，无上限（受限于物理内存）</li><li>字符串常量 1.7 - 永久代，1.8 - 堆</li><li>MethodArea逻辑概念 - 永久代、元数据</li></ol></li><li><p>新生代 = Eden + 2个suvivor区 </p><ol><li>YGC回收之后，大多数的对象会被回收，活着的进入s0</li><li>再次YGC，活着的对象eden + s0 -&gt; s1</li><li>再次YGC，eden + s1 -&gt; s0</li><li>年龄足够 -&gt; 老年代 （15 CMS 6）</li><li>s区装不下 -&gt; 老年代</li></ol></li><li><p>老年代</p><ol><li>顽固分子</li><li>老年代满了FGC Full GC</li></ol></li><li><p>GC Tuning (Generation)</p><ol><li>尽量减少FGC</li><li>MinorGC = YGC</li><li>MajorGC = FGC</li></ol></li><li><p>对象分配过程图<br><img src="%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.png" alt=""></p></li><li><p>动态年龄：（不重要）<br><a href="https://www.jianshu.com/p/989d3b06a49d">https://www.jianshu.com/p/989d3b06a49d</a></p></li><li><p>分配担保：（不重要）<br>YGC期间 survivor区空间不够了 空间担保直接进入老年代<br>参考：<a href="https://cloud.tencent.com/developer/article/1082730">https://cloud.tencent.com/developer/article/1082730</a></p></li></ol><h4 id="5-常见的垃圾回收器"><a href="#5-常见的垃圾回收器" class="headerlink" title="5.常见的垃圾回收器"></a>5.常见的垃圾回收器</h4><p><img src="%E5%B8%B8%E7%94%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.png" alt="常用垃圾回收器"></p><ol><li>垃圾回收器的发展路线，是随着内存越来越大的过程而演进<br>从分代算法演化到不分代算法<br>Serial算法 几十兆<br>Parallel算法 几个G<br>CMS 几十个G  - 承上启下，开始并发回收 -<br>.- 三色标记 - </li><li>JDK诞生 Serial追随 提高效率，诞生了PS，为了配合CMS，诞生了PN，CMS是1.4版本后期引入，CMS是里程碑式的GC，它开启了并发回收的过程，但是CMS毛病较多，因此目前任何一个JDK版本默认是CMS<br>并发垃圾回收是因为无法忍受STW</li><li>Serial 年轻代 串行回收</li><li>PS 年轻代 并行回收</li><li>ParNew 年轻代 配合CMS的并行回收</li><li>SerialOld </li><li>ParallelOld</li><li>ConcurrentMarkSweep 老年代 并发的， 垃圾回收和应用程序同时运行，降低STW的时间(200ms)<br>CMS问题比较多，所以现在没有一个版本默认是CMS，只能手工指定<br>CMS既然是MarkSweep，就一定会有碎片化的问题，碎片到达一定程度，CMS的老年代分配对象分配不下的时候，使用SerialOld 进行老年代回收<br>想象一下：<br>PS + PO -&gt; 加内存 换垃圾回收器 -&gt; PN + CMS + SerialOld（几个小时 - 几天的STW）<br>几十个G的内存，单线程回收 -&gt; G1 + FGC 几十个G -&gt; 上T内存的服务器 ZGC<br>算法：三色标记 + Incremental Update</li><li>G1(200ms - 10ms)<br>算法：三色标记 + SATB</li><li>ZGC (10ms - 1ms) PK C++<br>   算法：ColoredPointers + LoadBarrier</li><li>Shenandoah<br>算法：ColoredPointers + WriteBarrier</li><li>Eplison</li><li>PS 和 PN区别的延伸阅读：<br>▪<a href="https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html">https://docs.oracle.com/en/java/javase/13/gctuning/ergonomics.html# GUID-3D0BB91E-9BFF-4EBB-B523-14493A860E73</a></li><li>垃圾收集器跟内存大小的关系<ol><li>Serial 几十兆</li><li>PS 上百兆 - 几个G</li><li>CMS - 20G</li><li>G1 - 上百G</li><li>ZGC - 4T - 16T（JDK13）</li></ol></li></ol><p>1.8默认的垃圾回收：PS + ParallelOld</p><h3 id="常见垃圾回收器组合参数设定：-1-8"><a href="#常见垃圾回收器组合参数设定：-1-8" class="headerlink" title="常见垃圾回收器组合参数设定：(1.8)"></a>常见垃圾回收器组合参数设定：(1.8)</h3><ul><li><p>-XX:+UseSerialGC = Serial New (DefNew) + Serial Old</p><ul><li>小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器</li></ul></li><li><p>-XX:+UseParNewGC = ParNew + SerialOld</p><ul><li>这个组合已经很少用（在某些版本中已经废弃）</li><li><a href="https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future">https://stackoverflow.com/questions/34962257/why-remove-support-for-parnewserialold-anddefnewcms-in-the-future</a></li></ul></li><li><p>-XX:+UseConc<font color="red">(urrent)</font>MarkSweepGC = ParNew + CMS + Serial Old</p></li><li><p>-XX:+UseParallelGC = Parallel Scavenge + Parallel Old (1.8默认) 【PS + SerialOld】</p></li><li><p>-XX:+UseParallelOldGC = Parallel Scavenge + Parallel Old</p></li><li><p>-XX:+UseG1GC = G1</p></li><li><p>Linux中没找到默认GC的查看方法，而windows中会打印UseParallelGC </p><ul><li>java +XX:+PrintCommandLineFlags -version</li><li>通过GC的日志来分辨</li></ul></li><li><p>Linux下1.8版本默认的垃圾回收器到底是什么？</p><ul><li>1.8.0_181 默认（看不出来）Copy MarkCompact</li><li>1.8.0_222 默认 PS + PO</li></ul></li></ul><h3 id="JVM调优第一步，了解JVM常用命令行参数"><a href="#JVM调优第一步，了解JVM常用命令行参数" class="headerlink" title="JVM调优第一步，了解JVM常用命令行参数"></a>JVM调优第一步，了解JVM常用命令行参数</h3><ul><li><p>JVM的命令行参数参考：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p></li><li><p>HotSpot参数分类</p><blockquote><p>标准： - 开头，所有的HotSpot都支持</p><p>非标准：-X 开头，特定版本HotSpot支持特定命令</p><p>不稳定：-XX 开头，下个版本可能取消</p></blockquote><p>java -version</p><p>java -X</p></li></ul><p>  java -XX:+PrintFlagsWithComments //只有debug版本能用</p><p>  试验用程序：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloGC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloGC!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>区分概念：内存泄漏memory leak，内存溢出out of memory</li><li>java -XX:+PrintCommandLineFlags HelloGC</li><li>java -Xmn10M -Xms40M -Xmx60M -XX:+PrintCommandLineFlags -XX:+PrintGC  HelloGC<br>PrintGCDetails PrintGCTimeStamps PrintGCCauses</li><li>java -XX:+UseConcMarkSweepGC -XX:+PrintCommandLineFlags HelloGC</li><li>java -XX:+PrintFlagsInitial 默认参数值</li><li>java -XX:+PrintFlagsFinal 最终参数值</li><li>java -XX:+PrintFlagsFinal | grep xxx 找到对应的参数</li><li>java -XX:+PrintFlagsFinal -version |grep GC</li><li>java -XX:+PrintFlagsFinal -version | wc -l<br>共728个参数</li></ol><h3 id="PS-GC日志详解"><a href="#PS-GC日志详解" class="headerlink" title="PS GC日志详解"></a>PS GC日志详解</h3><p>每种垃圾回收器的日志格式是不同的！</p><p>PS日志格式</p><p><img src="./GC%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3.png" alt="GC日志详解"></p><p>heap dump部分：</p><pre class="line-numbers language-java"><code class="language-java">eden space 5632K<span class="token punctuation">,</span> <span class="token number">94</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff980000</span><span class="token punctuation">,</span><span class="token number">0x00000000ffeb3e28</span><span class="token punctuation">,</span><span class="token number">0x00000000fff00000</span><span class="token punctuation">)</span>                            后面的内存地址指的是，起始地址，使用空间结束地址，整体空间结束地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="GCHeapDump.png" alt="GCHeapDump"></p><p>total = eden + 1个survivor</p><h3 id="调优前的基础概念："><a href="#调优前的基础概念：" class="headerlink" title="调优前的基础概念："></a>调优前的基础概念：</h3><ol><li>吞吐量：用户代码时间 /（用户代码执行时间 + 垃圾回收时间）</li><li>响应时间：STW越短，响应时间越好</li></ol><p>所谓调优，首先确定，追求啥？吞吐量优先，还是响应时间优先？还是在满足一定的响应时间的情况下，要求达到多大的吞吐量…</p><p>问题：</p><p>科学计算，吞吐量。数据挖掘，thrput。吞吐量优先的一般：（PS + PO）</p><p>响应时间：网站 GUI API （1.8 G1）</p><h3 id="什么是调优？"><a href="#什么是调优？" class="headerlink" title="什么是调优？"></a>什么是调优？</h3><ol><li>根据需求进行JVM规划和预调优</li><li>优化运行JVM运行环境（慢，卡顿）</li><li>解决JVM运行过程中出现的各种问题(OOM)</li></ol><h3 id="调优，从规划开始"><a href="#调优，从规划开始" class="headerlink" title="调优，从规划开始"></a>调优，从规划开始</h3><ul><li><p>调优，从业务场景开始，没有业务场景的调优都是耍流氓</p></li><li><p>无监控（压力测试，能看到结果），不调优</p></li><li><p>步骤：</p><ol><li>熟悉业务场景（没有最好的垃圾回收器，只有最合适的垃圾回收器）<ol><li>响应时间、停顿时间 [CMS G1 ZGC] （需要给用户作响应）</li><li>吞吐量 = 用户时间 /( 用户时间 + GC时间) [PS]</li></ol></li><li>选择回收器组合</li><li>计算内存需求（经验值 1.5G 16G）</li><li>选定CPU（越高越好）</li><li>设定年代大小、升级年龄</li><li>设定日志参数<ol><li>-Xloggc:/opt/xxx/logs/xxx-xxx-gc-%t.log -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCCause</li><li>或者每天产生一个日志文件</li></ol></li><li>观察日志情况</li></ol></li><li><p>案例1：垂直电商，最高每日百万订单，处理订单系统需要什么样的服务器配置？</p><blockquote><p>这个问题比较业余，因为很多不同的服务器配置都能支撑(1.5G 16G)</p><p>1小时360000集中时间段， 100个订单/秒，（找一小时内的高峰期，1000订单/秒）</p><p>经验值，</p><p>非要计算：一个订单产生需要多少内存？512K * 1000 500M内存</p><p>专业一点儿问法：要求响应时间100ms</p><p>压测！</p></blockquote></li><li><p>案例2：12306遭遇春节大规模抢票应该如何支撑？</p><blockquote><p>12306应该是中国并发量最大的秒杀网站：</p><p>号称并发量100W最高</p><p>CDN -&gt; LVS -&gt; NGINX -&gt; 业务系统 -&gt; 每台机器1W并发（10K问题） 100台机器</p><p>普通电商订单 -&gt; 下单 -&gt;订单系统（IO）减库存 -&gt;等待用户付款</p><p>12306的一种可能的模型： 下单 -&gt; 减库存 和 订单(redis kafka) 同时异步进行 -&gt;等付款</p><p>减库存最后还会把压力压到一台服务器</p><p>可以做分布式本地库存 + 单独服务器做库存均衡</p><p>大流量的处理方法：分而治之</p></blockquote></li><li><p>怎么得到一个事务会消耗多少内存？</p><blockquote><ol><li><p>弄台机器，看能承受多少TPS？是不是达到目标？扩容或调优，让它达到</p></li><li><p>用压测来确定</p></li></ol></blockquote></li></ul><h3 id="优化环境"><a href="#优化环境" class="headerlink" title="优化环境"></a>优化环境</h3><ol><li>有一个50万PV的资料类网站（从磁盘提取文档到内存）原服务器32位，1.5G<br>的堆，用户反馈网站比较缓慢，因此公司决定升级，新的服务器为64位，16G<br>的堆内存，结果用户反馈卡顿十分严重，反而比以前效率更低了<ol><li>为什么原网站慢?<br>很多用户浏览数据，很多数据load到内存，内存不足，频繁GC，STW长，响应时间变慢</li><li>为什么会更卡顿？<br>内存越大，FGC时间越长</li><li>咋办？<br>PS -&gt; PN + CMS 或者 G1</li></ol></li><li>系统CPU经常100%，如何调优？(面试高频)<br>CPU100%那么一定有线程在占用系统资源，<ol><li>找出哪个进程cpu高（top）</li><li>该进程中的哪个线程cpu高（top -Hp）</li><li>导出该线程的堆栈 (jstack)</li><li>查找哪个方法（栈帧）消耗时间 (jstack)</li><li>工作线程占比高 | 垃圾回收线程占比高</li></ol></li><li>系统内存飙高，如何查找问题？（面试高频）<ol><li>导出堆内存 (jmap)</li><li>分析 (jhat jvisualvm mat jprofiler … )</li></ol></li><li>如何监控JVM<ol><li>jstat jvisualvm jprofiler arthas top…</li></ol></li></ol><h3 id="解决JVM运行中的问题"><a href="#解决JVM运行中的问题" class="headerlink" title="解决JVM运行中的问题"></a>解决JVM运行中的问题</h3><h4 id="一个案例理解常用工具"><a href="#一个案例理解常用工具" class="headerlink" title="一个案例理解常用工具"></a>一个案例理解常用工具</h4><ol><li><p>测试代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mashibing<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>gc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ScheduledThreadPoolExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 从数据库中读取信用数据，套用模型，并把结果进行记录和传输 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T15_FullGC_Problem01</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CardInfo</span> <span class="token punctuation">{</span>        BigDecimal price <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        Date birthdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ScheduledThreadPoolExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        executor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">modelFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">modelFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>CardInfo<span class="token operator">></span> taskList <span class="token operator">=</span> <span class="token function">getAllCardInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        taskList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>info <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// do something</span>            executor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do sth with info</span>                info<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>CardInfo<span class="token operator">></span> <span class="token function">getAllCardInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>CardInfo<span class="token operator">></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CardInfo ci <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CardInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            taskList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> taskList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java -Xms200M -Xmx200M -XX:+PrintGC com.mashibing.jvm.gc.T15_FullGC_Problem01</p></li><li><p>一般是运维团队首先受到报警信息（CPU Memory）</p></li><li><p>top命令观察到问题：内存不断增长 CPU占用率居高不下</p></li><li><p>top -Hp 观察进程中的线程，哪个线程CPU和内存占比高</p></li><li><p>jps定位具体java进程<br>jstack 定位线程状况，重点关注：WAITING BLOCKED<br>eg.<br>waiting on &lt;0x0000000088ca3310&gt; (a java.lang.Object)<br>假如有一个进程中100个线程，很多线程都在waiting on <xx> ，一定要找到是哪个线程持有这把锁<br>怎么找？搜索jstack dump的信息，找<xx> ，看哪个线程持有这把锁RUNNABLE<br>作业：1：写一个死锁程序，用jstack观察 2 ：写一个程序，一个线程持有锁不释放，其他线程等待</xx></xx></p></li><li><p>为什么阿里规范里规定，线程的名称（尤其是线程池）都要写有意义的名称<br>怎么样自定义线程池里的线程名称？（自定义ThreadFactory）</p></li><li><p>jinfo pid </p></li><li><p>jstat -gc 动态观察gc情况 / 阅读GC日志发现频繁GC / arthas观察 / jconsole/jvisualVM/ Jprofiler（最好用）<br>jstat -gc 4655 500 : 每个500个毫秒打印GC的情况<br>如果面试官问你是怎么定位OOM问题的？如果你回答用图形界面（错误）<br>1：已经上线的系统不用图形界面用什么？（cmdline arthas）<br>2：图形界面到底用在什么地方？测试！测试的时候进行监控！（压测观察）</p></li><li><p>jmap - histo 4655 | head -20，查找有多少对象产生</p></li><li><p>jmap -dump:format=b,file=xxx pid ：</p><p>线上系统，内存特别大，jmap执行期间会对进程产生很大影响，甚至卡顿（电商不适合）<br>1：设定了参数HeapDump，OOM的时候会自动产生堆转储文件（不是很专业，因为多有监控，内存增长就会报警）<br>2：<font color="red">很多服务器备份（高可用），停掉这台服务器对其他服务器不影响</font><br>3：在线定位(一般小点儿公司用不到)</p><p>4：在测试环境中压测（产生类似内存增长问题，在堆还不是很大的时候进行转储）</p></li><li><p>java -Xms20M -Xmx20M -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError com.mashibing.jvm.gc.T15_FullGC_Problem01</p></li><li><p>使用MAT / jhat /jvisualvm 进行dump文件分析<br> <a href="https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html">https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html</a><br>jhat -J-mx512M xxx.dump<br><a href="http://192.168.17.11:7000">http://192.168.17.11:7000</a><br>拉到最后：找到对应链接<br>可以使用OQL查找特定问题对象</p></li><li><p>找到代码的问题</p></li></ol><h4 id="jconsole远程连接"><a href="#jconsole远程连接" class="headerlink" title="jconsole远程连接"></a>jconsole远程连接</h4><ol><li><p>程序启动加入参数：</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">java -Djava.rmi.server.hostname=192.168.17.11 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=11111 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><p>如果遭遇 Local host name unknown：XXX的错误，修改/etc/hosts文件，把XXX加入进去</p><blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">17.11</span> basic localhost localhost<span class="token punctuation">.</span>localdomain localhost4 localhost4<span class="token punctuation">.</span>localdomain4<span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span>         localhost localhost<span class="token punctuation">.</span>localdomain localhost6 localhost6<span class="token punctuation">.</span>localdomain6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p>关闭linux防火墙（实战中应该打开对应端口）</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">service iptables stopchkconfig iptables off # 永久关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p>windows上打开 jconsole远程连接 192.168.17.11:11111</p></li></ol><h4 id="jvisualvm远程连接"><a href="#jvisualvm远程连接" class="headerlink" title="jvisualvm远程连接"></a>jvisualvm远程连接</h4><p> <a href="https://www.cnblogs.com/liugh/p/7620336.html">https://www.cnblogs.com/liugh/p/7620336.html</a> （简单做法）</p><h4 id="jprofiler-收费"><a href="#jprofiler-收费" class="headerlink" title="jprofiler (收费)"></a>jprofiler (收费)</h4><h4 id="arthas在线排查工具"><a href="#arthas在线排查工具" class="headerlink" title="arthas在线排查工具"></a>arthas在线排查工具</h4><ul><li>为什么需要在线排查？<br>在生产上我们经常会碰到一些不好排查的问题，例如线程安全问题，用最简单的threaddump或者heapdump不好查到问题原因。为了排查这些问题，有时我们会临时加一些日志，比如在一些关键的函数里打印出入参，然后重新打包发布，如果打了日志还是没找到问题，继续加日志，重新打包发布。对于上线流程复杂而且审核比较严的公司，从改代码到上线需要层层的流转，会大大影响问题排查的进度。 </li><li>jvm观察jvm信息</li><li>thread定位线程问题</li><li>dashboard 观察系统情况</li><li>heapdump + jhat分析</li><li>jad反编译<br>动态代理生成类的问题定位<br>第三方的类（观察代码）<br>版本问题（确定自己最新提交的版本是不是被使用）</li><li>redefine 热替换<br>目前有些限制条件：只能改方法实现（方法已经运行完成），不能改方法名， 不能改属性<br>m() -&gt; mm()</li><li>sc  - search class</li><li>watch  - watch method</li><li>没有包含的功能：jmap</li></ul><h3 id="GC算法的基础概念"><a href="#GC算法的基础概念" class="headerlink" title="GC算法的基础概念"></a>GC算法的基础概念</h3><ul><li>Card Table<br>由于做YGC时，需要扫描整个OLD区，效率非常低，所以JVM设计了CardTable， 如果一个OLD区CardTable中有对象指向Y区，就将它设为Dirty，下次扫描时，只需要扫描Dirty Card<br>在结构上，Card Table用BitMap来实现</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><h4 id="CMS的问题"><a href="#CMS的问题" class="headerlink" title="CMS的问题"></a>CMS的问题</h4><ol><li><p>Memory Fragmentation</p><blockquote><p>-XX:+UseCMSCompactAtFullCollection<br>-XX:CMSFullGCsBeforeCompaction 默认为0 指的是经过多少次FGC才进行压缩</p></blockquote></li><li><p>Floating Garbage</p><blockquote><p>Concurrent Mode Failure<br>产生：if the concurrent collector is unable to finish reclaiming the unreachable objects before the tenured generation fills up, or if an allocation cannot be satisfiedwith the available free space blocks in the tenured generation, then theapplication is paused and the collection is completed with all the applicationthreads stopped</p><p>解决方案：降低触发CMS的阈值</p><p>PromotionFailed</p><p>解决方案类似，保持老年代有足够的空间</p><p>–XX:CMSInitiatingOccupancyFraction 92% 可以降低这个值，让CMS保持老年代足够的空间</p></blockquote></li></ol><h4 id="CMS日志分析"><a href="#CMS日志分析" class="headerlink" title="CMS日志分析"></a>CMS日志分析</h4><p>执行命令：java -Xms20M -Xmx20M -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC com.mashibing.jvm.gc.T15_FullGC_Problem01</p><p>[GC (Allocation Failure) [ParNew: 6144K-&gt;640K(6144K), 0.0265885 secs] 6585K-&gt;2770K(19840K), 0.0268035 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] </p><blockquote><p>ParNew：年轻代收集器</p><p>6144-&gt;640：收集前后的对比</p><p>（6144）：整个年轻代容量</p><p>6585 -&gt; 2770：整个堆的情况</p><p>（19840）：整个堆大小</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>CMS Initial Mark<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span> CMS<span class="token operator">-</span>initial<span class="token operator">-</span>mark<span class="token operator">:</span> <span class="token function">8511K</span><span class="token punctuation">(</span>13696K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token function">9866K</span><span class="token punctuation">(</span>19840K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0040321</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.01</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//8511 (13696) : 老年代使用（最大）</span>    <span class="token comment" spellcheck="true">//9866 (19840) : 整个堆使用（最大）</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>mark<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>mark<span class="token operator">:</span> <span class="token number">0.018</span><span class="token operator">/</span><span class="token number">0.018</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.01</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.02</span> secs<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//这里的时间意义不大，因为是并发执行</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>preclean<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>preclean<span class="token operator">:</span> <span class="token number">0.000</span><span class="token operator">/</span><span class="token number">0.000</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//标记Card为Dirty，也称为Card Marking</span><span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>CMS Final Remark<span class="token punctuation">)</span> <span class="token punctuation">[</span>YG occupancy<span class="token operator">:</span> <span class="token number">1597</span> <span class="token function">K</span> <span class="token punctuation">(</span><span class="token number">6144</span> K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">Rescan</span> <span class="token punctuation">(</span>parallel<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">0.0008396</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span>weak refs processing<span class="token punctuation">,</span> <span class="token number">0.0000138</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">class</span> <span class="token class-name">unloading</span><span class="token punctuation">,</span> <span class="token number">0.0005404</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span>scrub symbol table<span class="token punctuation">,</span> <span class="token number">0.0006169</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span>scrub string table<span class="token punctuation">,</span> <span class="token number">0.0004903</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span> CMS<span class="token operator">-</span>remark<span class="token operator">:</span> <span class="token function">8511K</span><span class="token punctuation">(</span>13696K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token function">10108K</span><span class="token punctuation">(</span>19840K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0039567</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//STW阶段，YG occupancy:年轻代占用及容量</span>    <span class="token comment" spellcheck="true">//[Rescan (parallel)：STW下的存活对象标记</span>    <span class="token comment" spellcheck="true">//weak refs processing: 弱引用处理</span>    <span class="token comment" spellcheck="true">//class unloading: 卸载用不到的class</span>    <span class="token comment" spellcheck="true">//scrub symbol(string) table: </span>        <span class="token comment" spellcheck="true">//cleaning up symbol and string tables which hold class-level metadata and </span>        <span class="token comment" spellcheck="true">//internalized string respectively</span>    <span class="token comment" spellcheck="true">//CMS-remark: 8511K(13696K): 阶段过后的老年代占用及容量</span>    <span class="token comment" spellcheck="true">//10108K(19840K): 阶段过后的堆占用及容量</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>sweep<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>sweep<span class="token operator">:</span> <span class="token number">0.005</span><span class="token operator">/</span><span class="token number">0.005</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//标记已经完成，进行并发清理</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>reset<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>CMS<span class="token operator">-</span>concurrent<span class="token operator">-</span>reset<span class="token operator">:</span> <span class="token number">0.000</span><span class="token operator">/</span><span class="token number">0.000</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//重置内部结构，为下次GC做准备</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><ol><li>▪<a href="https://www.oracle.com/technical-resources/articles/java/g1gc.html">https://www.oracle.com/technical-resources/articles/java/g1gc.html</a></li></ol><h4 id="G1日志详解"><a href="#G1日志详解" class="headerlink" title="G1日志详解"></a>G1日志详解</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>GC <span class="token function">pause</span> <span class="token punctuation">(</span>G1 Evacuation Pause<span class="token punctuation">)</span> <span class="token punctuation">(</span>young<span class="token punctuation">)</span> <span class="token punctuation">(</span>initial<span class="token operator">-</span>mark<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0015790</span> secs<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//young -> 年轻代 Evacuation-> 复制存活对象 </span><span class="token comment" spellcheck="true">//initial-mark 混合回收的阶段，这里是YGC混合老年代回收</span>   <span class="token punctuation">[</span>Parallel Time<span class="token operator">:</span> <span class="token number">1.5</span> ms<span class="token punctuation">,</span> GC Workers<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//一个GC线程</span>      <span class="token punctuation">[</span>GC Worker <span class="token function">Start</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">92635.7</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>Ext Root <span class="token function">Scanning</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">1.1</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>Update <span class="token function">RS</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">0.0</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span>Processed Buffers<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>Scan <span class="token function">RS</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">0.0</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>Code Root <span class="token function">Scanning</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">0.0</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>Object <span class="token function">Copy</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">0.1</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span><span class="token function">Termination</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">0.0</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span>Termination Attempts<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>GC Worker <span class="token function">Other</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">0.0</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>GC Worker <span class="token function">Total</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">1.2</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span>GC Worker <span class="token function">End</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token operator">:</span>  <span class="token number">92636.9</span><span class="token punctuation">]</span>   <span class="token punctuation">[</span>Code Root Fixup<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>   <span class="token punctuation">[</span>Code Root Purge<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>   <span class="token punctuation">[</span>Clear CT<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>   <span class="token punctuation">[</span>Other<span class="token operator">:</span> <span class="token number">0.1</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Choose CSet<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Ref Proc<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Ref Enq<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Redirty Cards<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Humongous Register<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Humongous Reclaim<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>      <span class="token punctuation">[</span>Free CSet<span class="token operator">:</span> <span class="token number">0.0</span> ms<span class="token punctuation">]</span>   <span class="token punctuation">[</span>Eden<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token function">0B</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">.</span>0K<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">0B</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">.</span>0K<span class="token punctuation">)</span> Survivors<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>0B<span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">.</span>0B Heap<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">.</span><span class="token function">8M</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span>0M<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">.</span><span class="token function">8M</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span>0M<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//以下是混合回收其他阶段</span><span class="token punctuation">[</span>GC concurrent<span class="token operator">-</span>root<span class="token operator">-</span>region<span class="token operator">-</span>scan<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>GC concurrent<span class="token operator">-</span>root<span class="token operator">-</span>region<span class="token operator">-</span>scan<span class="token operator">-</span>end<span class="token punctuation">,</span> <span class="token number">0.0000078</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span>GC concurrent<span class="token operator">-</span>mark<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//无法evacuation，进行FGC</span><span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span>  18M<span class="token operator">-</span><span class="token operator">></span><span class="token function">18M</span><span class="token punctuation">(</span>20M<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0719656</span> secs<span class="token punctuation">]</span>   <span class="token punctuation">[</span>Eden<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token function">0B</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">.</span>0K<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">0B</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">.</span>0K<span class="token punctuation">)</span> Survivors<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>0B<span class="token operator">-</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">.</span>0B Heap<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">.</span><span class="token function">8M</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span>0M<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">.</span><span class="token function">8M</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">.</span>0M<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Metaspace<span class="token operator">:</span> <span class="token number">38</span>76K<span class="token operator">-</span><span class="token operator">></span><span class="token function">3876K</span><span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.07</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.07</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例汇总"><a href="#案例汇总" class="headerlink" title="案例汇总"></a>案例汇总</h3><p>OOM产生的原因多种多样，有些程序未必产生OOM，不断FGC(CPU飙高，但内存回收特别少) （上面案例）</p><ol><li><p>硬件升级系统反而卡顿的问题（见上）</p></li><li><p>线程池不当运用产生OOM问题（见上）<br>不断的往List里加对象（实在太LOW）</p></li><li><p>smile jira问题<br>实际系统不断重启<br>解决问题 加内存 + 更换垃圾回收器 G1<br>真正问题在哪儿？不知道</p></li><li><p>tomcat http-header-size过大问题（Hector）</p></li><li><p>lambda表达式导致方法区溢出问题(MethodArea / Perm Metaspace)<br>LambdaGC.java     -XX:MaxMetaspaceSize=9M -XX:+PrintGCDetails</p><pre class="line-numbers language-java"><code class="language-java"><span class="token string">"C:\Program Files\Java\jdk1.8.0_181\bin\java.exe"</span> <span class="token operator">-</span>XX<span class="token operator">:</span>MaxMetaspaceSize<span class="token operator">=</span>9M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails <span class="token string">"-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.1\lib\idea_rt.jar=49316:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2019.1\bin"</span> <span class="token operator">-</span>Dfile<span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>classpath <span class="token string">"C:\Program Files\Java\jdk1.8.0_181\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_181\jre\lib\rt.jar;C:\work\ijprojects\JVM\out\production\JVM;C:\work\ijprojects\ObjectSize\out\artifacts\ObjectSize_jar\ObjectSize.jar"</span> com<span class="token punctuation">.</span>mashibing<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>gc<span class="token punctuation">.</span>LambdaGC<span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Metadata GC Threshold<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token operator">:</span> 11341K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1880K</span><span class="token punctuation">(</span>38400K<span class="token punctuation">)</span><span class="token punctuation">]</span> 11341K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1888K</span><span class="token punctuation">(</span>125952K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0022190</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>Metadata GC Threshold<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token operator">:</span> 1880K<span class="token operator">-</span><span class="token operator">></span><span class="token function">0K</span><span class="token punctuation">(</span>38400K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ParOldGen<span class="token operator">:</span> 8K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1777K</span><span class="token punctuation">(</span>35328K<span class="token punctuation">)</span><span class="token punctuation">]</span> 1888K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1777K</span><span class="token punctuation">(</span>73728K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Metaspace<span class="token operator">:</span> 8164K<span class="token operator">-</span><span class="token operator">></span><span class="token function">8164K</span><span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0100681</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.02</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token function">GC</span> <span class="token punctuation">(</span>Last ditch collection<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token operator">:</span> 0K<span class="token operator">-</span><span class="token operator">></span><span class="token function">0K</span><span class="token punctuation">(</span>38400K<span class="token punctuation">)</span><span class="token punctuation">]</span> 1777K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1777K</span><span class="token punctuation">(</span>73728K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0005698</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Full <span class="token function">GC</span> <span class="token punctuation">(</span>Last ditch collection<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token operator">:</span> 0K<span class="token operator">-</span><span class="token operator">></span><span class="token function">0K</span><span class="token punctuation">(</span>38400K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>ParOldGen<span class="token operator">:</span> 1777K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1629K</span><span class="token punctuation">(</span>67584K<span class="token punctuation">)</span><span class="token punctuation">]</span> 1777K<span class="token operator">-</span><span class="token operator">></span><span class="token function">1629K</span><span class="token punctuation">(</span>105984K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>Metaspace<span class="token operator">:</span> 8164K<span class="token operator">-</span><span class="token operator">></span><span class="token function">8156K</span><span class="token punctuation">(</span>1056768K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0124299</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.06</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>InstrumentationImpl<span class="token punctuation">.</span><span class="token function">loadClassAndStartAgent</span><span class="token punctuation">(</span>InstrumentationImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">388</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>instrument<span class="token punctuation">.</span>InstrumentationImpl<span class="token punctuation">.</span><span class="token function">loadClassAndCallAgentmain</span><span class="token punctuation">(</span>InstrumentationImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">411</span><span class="token punctuation">)</span>Caused by<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Compressed <span class="token keyword">class</span> <span class="token class-name">space</span>    at sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ClassDefiner<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>ClassDefiner<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodAccessorGenerator$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MethodAccessorGenerator<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">399</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodAccessorGenerator$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MethodAccessorGenerator<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">394</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodAccessorGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>MethodAccessorGenerator<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">393</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodAccessorGenerator<span class="token punctuation">.</span><span class="token function">generateSerializationConstructor</span><span class="token punctuation">(</span>MethodAccessorGenerator<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">112</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ReflectionFactory<span class="token punctuation">.</span><span class="token function">generateConstructor</span><span class="token punctuation">(</span>ReflectionFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">398</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ReflectionFactory<span class="token punctuation">.</span><span class="token function">newConstructorForSerialization</span><span class="token punctuation">(</span>ReflectionFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">360</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span><span class="token function">getSerializableConstructor</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1574</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span>access$<span class="token function">1500</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">79</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass$<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">519</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass$<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">494</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">494</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">391</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject0</span><span class="token punctuation">(</span>ObjectOutputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1134</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">.</span><span class="token function">defaultWriteFields</span><span class="token punctuation">(</span>ObjectOutputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1548</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">.</span><span class="token function">writeSerialData</span><span class="token punctuation">(</span>ObjectOutputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1509</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">.</span><span class="token function">writeOrdinaryObject</span><span class="token punctuation">(</span>ObjectOutputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1432</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject0</span><span class="token punctuation">(</span>ObjectOutputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1178</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectorServer<span class="token punctuation">.</span><span class="token function">encodeJRMPStub</span><span class="token punctuation">(</span>RMIConnectorServer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">727</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectorServer<span class="token punctuation">.</span><span class="token function">encodeStub</span><span class="token punctuation">(</span>RMIConnectorServer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">719</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectorServer<span class="token punctuation">.</span><span class="token function">encodeStubInAddress</span><span class="token punctuation">(</span>RMIConnectorServer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">690</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RMIConnectorServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>RMIConnectorServer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">439</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ConnectorBootstrap<span class="token punctuation">.</span><span class="token function">startLocalConnectorServer</span><span class="token punctuation">(</span>ConnectorBootstrap<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">550</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>Agent<span class="token punctuation">.</span><span class="token function">startLocalManagementAgent</span><span class="token punctuation">(</span>Agent<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">137</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接内存溢出问题（少见）<br>《深入理解Java虚拟机》P59，使用Unsafe分配直接内存，或者使用NIO的问题</p></li><li><p>栈溢出问题<br>-Xss设定太小</p></li><li><p>比较一下这两段程序的异同，分析哪一个是更优的写法：</p><pre class="line-numbers language-java"><code class="language-java">Object o <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//业务处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重写finalize引发频繁GC<br>小米云，HBase同步系统，系统通过nginx访问超时报警，最后排查，C++程序员重写finalize引发频繁GC问题<br>为什么C++程序员会重写finalize？（new delete）<br>finalize耗时比较长（200ms）</p></li><li><p>如果有一个系统，内存一直消耗不超过10%，但是观察GC日志，发现FGC总是频繁产生，会是什么引起的？<br>System.gc() (这个比较Low)</p></li><li><p>Distuptor有个可以设置链的长度，如果过大，然后对象大，消费完不主动释放，会溢出 (来自 死物风情)</p></li><li><p>用jvm都会溢出，mycat用崩过，1.6.5某个临时版本解析sql子查询算法有问题，9个exists的联合sql就导致生成几百万的对象（来自 死物风情）</p></li><li><p>new 大量线程，会产生 native thread OOM，（low）应该用线程池，<br>解决方案：减少堆空间（太TMlow了）,预留更多内存产生native thread<br>JVM内存占物理内存比例 50% - 80%</p></li></ol><h3 id="GC常用参数"><a href="#GC常用参数" class="headerlink" title="GC常用参数"></a>GC常用参数</h3><ul><li>-Xmn -Xms -Xmx -Xss<br>年轻代 最小堆 最大堆 栈空间</li><li>-XX:+UseTLAB<br>使用TLAB，默认打开</li><li>-XX:+PrintTLAB<br>打印TLAB的使用情况</li><li>-XX:TLABSize<br>设置TLAB大小</li><li>-XX:+DisableExplictGC<br>System.gc()不管用 ，FGC</li><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintHeapAtGC</li><li>-XX:+PrintGCTimeStamps</li><li>-XX:+PrintGCApplicationConcurrentTime (低)<br>打印应用程序时间</li><li>-XX:+PrintGCApplicationStoppedTime （低）<br>打印暂停时长</li><li>-XX:+PrintReferenceGC （重要性低）<br>记录回收了多少种不同引用类型的引用</li><li>-verbose:class<br>类加载详细过程</li><li>-XX:+PrintVMOptions</li><li>-XX:+PrintFlagsFinal  -XX:+PrintFlagsInitial<br>必须会用</li><li>-Xloggc:opt/log/gc.log</li><li>-XX:MaxTenuringThreshold<br>升代年龄，最大值15</li><li>锁自旋次数 -XX:PreBlockSpin 热点代码检测参数-XX:CompileThreshold 逃逸分析 标量替换 …<br>这些不建议设置</li></ul><h3 id="Parallel常用参数"><a href="#Parallel常用参数" class="headerlink" title="Parallel常用参数"></a>Parallel常用参数</h3><ul><li>-XX:SurvivorRatio</li><li>-XX:PreTenureSizeThreshold<br>大对象到底多大</li><li>-XX:MaxTenuringThreshold</li><li>-XX:+ParallelGCThreads<br>并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</li><li>-XX:+UseAdaptiveSizePolicy<br>自动选择各区大小比例</li></ul><h3 id="CMS常用参数"><a href="#CMS常用参数" class="headerlink" title="CMS常用参数"></a>CMS常用参数</h3><ul><li>-XX:+UseConcMarkSweepGC</li><li>-XX:ParallelCMSThreads<br>CMS线程数量</li><li>-XX:CMSInitiatingOccupancyFraction<br>使用多少比例的老年代后开始CMS收集，默认是68%(近似值)，如果频繁发生SerialOld卡顿，应该调小，（频繁CMS回收）</li><li>-XX:+UseCMSCompactAtFullCollection<br>在FGC时进行压缩</li><li>-XX:CMSFullGCsBeforeCompaction<br>多少次FGC之后进行压缩</li><li>-XX:+CMSClassUnloadingEnabled</li><li>-XX:CMSInitiatingPermOccupancyFraction<br>达到什么比例时进行Perm回收</li><li>GCTimeRatio<br>设置GC时间占用程序运行时间的百分比</li><li>-XX:MaxGCPauseMillis<br>停顿时间，是一个建议时间，GC会尝试用各种手段达到这个时间，比如减小年轻代</li></ul><h3 id="G1常用参数"><a href="#G1常用参数" class="headerlink" title="G1常用参数"></a>G1常用参数</h3><ul><li>-XX:+UseG1GC</li><li>-XX:MaxGCPauseMillis<br>建议值，G1会尝试调整Young区的块数来达到这个值</li><li>-XX:GCPauseIntervalMillis<br>？GC的间隔时间</li><li>-XX:+G1HeapRegionSize<br>分区大小，建议逐渐增大该值，1 2 4 8 16 32。<br>随着size增加，垃圾的存活时间更长，GC间隔更长，但每次GC的时间也会更长<br>ZGC做了改进（动态区块大小）</li><li>G1NewSizePercent<br>新生代最小比例，默认为5%</li><li>G1MaxNewSizePercent<br>新生代最大比例，默认为60%</li><li>GCTimeRatio<br>GC时间建议比例，G1会根据这个值调整堆空间</li><li>ConcGCThreads<br>线程数量</li><li>InitiatingHeapOccupancyPercent<br>启动G1的堆空间占用比例</li></ul><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><ol><li><p>-XX:MaxTenuringThreshold控制的是什么？<br>A: 对象升入老年代的年龄</p><pre><code>  B: 老年代触发FGC时的内存垃圾比例</code></pre></li><li><p>生产环境中，倾向于将最大堆内存和最小堆内存设置为：（为什么？）<br>A: 相同 B：不同</p></li><li><p>JDK1.8默认的垃圾回收器是：<br>A: ParNew + CMS</p><pre><code>  B: G1  C: PS + ParallelOld  D: 以上都不是</code></pre></li><li><p>什么是响应时间优先？</p></li><li><p>什么是吞吐量优先？</p></li><li><p>ParNew和PS的区别是什么？</p></li><li><p>ParNew和ParallelOld的区别是什么？（年代不同，算法不同）</p></li><li><p>长时间计算的场景应该选择：A：停顿时间 B: 吞吐量</p></li><li><p>大规模电商网站应该选择：A：停顿时间 B: 吞吐量</p></li><li><p>HotSpot的垃圾收集器最常用有哪些？</p></li><li><p>常见的HotSpot垃圾收集器组合有哪些？</p></li><li><p>JDK1.7 1.8 1.9的默认垃圾回收器是什么？如何查看？</p></li><li><p>所谓调优，到底是在调什么？</p></li><li><p>如果采用PS + ParrallelOld组合，怎么做才能让系统基本不产生FGC</p></li><li><p>如果采用ParNew + CMS组合，怎样做才能够让系统基本不产生FGC</p><p> 1.加大JVM内存</p><p> 2.加大Young的比例</p><p> 3.提高Y-O的年龄</p><p> 4.提高S区比例</p><p> 5.避免代码内存泄漏</p></li><li><p>G1是否分代？G1垃圾回收器会产生FGC吗？</p></li><li><p>如果G1产生FGC，你应该做什么？</p><pre><code>1. 扩内存2. 提高CPU性能（回收的快，业务逻辑产生对象的速度固定，垃圾回收越快，内存空间越大）3. 降低MixedGC触发的阈值，让MixedGC提早发生（默认是45%）</code></pre><ol start="18"><li><p>问：生产环境中能够随随便便的dump吗？<br>小堆影响不大，大堆会有服务暂停或卡顿（加live可以缓解），dump前会有FGC</p></li><li><p>问：常见的OOM问题有哪些？<br>栈 堆 MethodArea 直接内存</p></li></ol></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blogs.oracle.com/jonthecollector/our-collectors">https://blogs.oracle.com/</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors">jonthecollector</a><a href="https://blogs.oracle.com/jonthecollector/our-collectors">/our-collectors</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></li><li><a href="http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp">http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp</a></li><li>JVM调优参考文档：<a href="https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#">https://docs.oracle.com/en/java/javase/13/gctuning/introduction-garbage-collection-tuning.html#</a> GUID-8A443184-7E07-4B71-9777-4F12947C8184 </li><li><a href="https://www.cnblogs.com/nxlhero/p/11660854.html">https://www.cnblogs.com/nxlhero/p/11660854.html</a> 在线排查工具</li><li><a href="https://www.jianshu.com/p/507f7e0cc3a3">https://www.jianshu.com/p/507f7e0cc3a3</a> arthas常用命令</li><li>Arthas手册：<ol><li>启动arthas java -jar arthas-boot.jar</li><li>绑定java进程</li><li>dashboard命令观察系统整体情况</li><li>help 查看帮助</li><li>help xx 查看具体命令帮助</li></ol></li><li>jmap命令参考： <a href="https://www.jianshu.com/p/507f7e0cc3a3">https://www.jianshu.com/p/507f7e0cc3a3</a> <ol><li>jmap -heap pid</li><li>jmap -histo pid</li><li>jmap -clstats pid</li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>volatile的用途</title>
      <link href="2020/09/11/volatile%E7%9A%84%E7%94%A8%E9%80%94/"/>
      <url>2020/09/11/volatile%E7%9A%84%E7%94%A8%E9%80%94/</url>
      <content type="html"><![CDATA[<h2 id="1-线程可见性"><a href="#1-线程可见性" class="headerlink" title="1.线程可见性"></a>1.线程可见性</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mashibing<span class="token punctuation">.</span>testvolatile<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T01_ThreadVisibility</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do sth</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"server"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-防止指令重排序"><a href="#2-防止指令重排序" class="headerlink" title="2.防止指令重排序"></a>2.防止指令重排序</h2><h3 id="问题：DCL单例需不需要加volatile？"><a href="#问题：DCL单例需不需要加volatile？" class="headerlink" title="问题：DCL单例需不需要加volatile？"></a>问题：DCL单例需不需要加volatile？</h3><h3 id="CPU的基础知识"><a href="#CPU的基础知识" class="headerlink" title="CPU的基础知识"></a>CPU的基础知识</h3><ul><li><p>缓存行对齐<br>缓存行64个字节是CPU同步的基本单位，缓存行隔离会比伪共享效率要高<br>Disruptor</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mashibing<span class="token punctuation">.</span>juc<span class="token punctuation">.</span>c_028_FalseSharing<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T02_CacheLinePadding</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Padding</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">,</span> p5<span class="token punctuation">,</span> p6<span class="token punctuation">,</span> p7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Padding</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> x <span class="token operator">=</span> 0L<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 1000_0000L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 1000_0000L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span>100_0000<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MESI</p></li><li><p>伪共享</p></li><li><p>合并写<br>CPU内部的4个字节的Buffer</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mashibing<span class="token punctuation">.</span>juc<span class="token punctuation">.</span>c_029_WriteCombining<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WriteCombining</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ITERATIONS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ITEMS <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MASK <span class="token operator">=</span> ITEMS <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" SingleLoop duration (ns) = "</span> <span class="token operator">+</span> <span class="token function">runCaseOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" SplitLoop  duration (ns) = "</span> <span class="token operator">+</span> <span class="token function">runCaseTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">runCaseOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> ITERATIONS<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> slot <span class="token operator">=</span> i <span class="token operator">&amp;</span> MASK<span class="token punctuation">;</span>            <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>            arrayA<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayB<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayC<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayD<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayE<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayF<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">runCaseTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> ITERATIONS<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> slot <span class="token operator">=</span> i <span class="token operator">&amp;</span> MASK<span class="token punctuation">;</span>            <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>            arrayA<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayB<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayC<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i <span class="token operator">=</span> ITERATIONS<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> slot <span class="token operator">=</span> i <span class="token operator">&amp;</span> MASK<span class="token punctuation">;</span>            <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>            arrayD<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayE<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            arrayF<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>指令重排序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mashibing<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>c3_jmm<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T04_Disorder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Thread one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//由于线程one先启动，下面这句话让它等一等线程two. 读着可根据自己电脑的实际性能适当调整等待时间.</span>                    <span class="token comment" spellcheck="true">//shortWait(100000);</span>                    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> b<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread other <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    y <span class="token operator">=</span> a<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>other<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            one<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>other<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String result <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次 ("</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"）"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//System.out.println(result);</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>  public static void shortWait(long interval){      long start = System.nanoTime();      long end;      do{          end = System.nanoTime();      }while(start + interval &gt;= end);  }</code></pre><p>  }</p><pre><code>###  volatile如何解决指令重排序1: volatile i2: ACC_VOLATILE3: JVM的内存屏障4：hotspot实现bytecodeinterpreter.cpp```c++int field_offset = cache-&gt;f2_as_index();          if (cache-&gt;is_volatile()) {            if (support_IRIW_for_not_multiple_copy_atomic_cpu) {              OrderAccess::fence();            }</code></pre><p>orderaccess_linux_x86.inline.hpp</p><pre class="line-numbers language-c++"><code class="language-c++">inline void OrderAccess::fence() {  if (os::is_MP()) {    // always use locked addl since mfence is sometimes expensive# ifdef AMD64    __asm__ volatile ("lock; addl $0,0(%%rsp)" : : : "cc", "memory");# else    __asm__ volatile ("lock; addl $0,0(%%esp)" : : : "cc", "memory");# endif  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>杂七杂八的总结</title>
      <link href="2020/09/11/%E5%BC%95%E7%94%A8%E4%B8%8E%E9%94%81/"/>
      <url>2020/09/11/%E5%BC%95%E7%94%A8%E4%B8%8E%E9%94%81/</url>
      <content type="html"><![CDATA[<h4 id="java引用-："><a href="#java引用-：" class="headerlink" title="java引用 ："></a>java引用 ：</h4><ul><li><p>强 普通引用 </p><pre class="line-numbers language-java"><code class="language-java">M m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">=</span> null<span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>软 当堆内存不够用时才回收 </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置最大堆大小为20</span><span class="token comment" spellcheck="true">//m指向强引用SoftReference SoftReference指向软引用10m的数组</span>SoftReference<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//还能拿到值</span><span class="token comment" spellcheck="true">//当堆内存不够用时才回收</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//为null </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>弱 （当他不存在）gc时立即回收</p><pre class="line-numbers language-java"><code class="language-java">WeakReference<span class="token operator">&lt;</span>M<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>虚 跟踪gc回收 管理直接内存（堆外内存）零拷贝</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//gc时查询引用队列 发出通知此对象要被回收了</span>PhantomReference<span class="token operator">&lt;</span>M<span class="token operator">></span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span>M<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span><span class="token comment" spellcheck="true">//堆外缓冲区</span>ByteBuffer b <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="ThreadLocal-底层是一个map-set时-key为当前线程，v为值"><a href="#ThreadLocal-底层是一个map-set时-key为当前线程，v为值" class="headerlink" title="ThreadLocal 底层是一个map set时 key为当前线程，v为值"></a>ThreadLocal 底层是一个map set时 key为当前线程，v为值</h5><pre class="line-numbers language-java"><code class="language-java">ThreadLocal<span class="token operator">&lt;</span>Persion<span class="token operator">></span> t  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//t指向的ThreadLocal是强引用 当t = null时 ThreadLocal里的map对象需要被回收 </span><span class="token comment" spellcheck="true">//如果map为强引用则 map不会被回收 会造成oom</span><span class="token comment" spellcheck="true">//k为null时 v访问不到但是不会被回收 所以ThreadLocal必须使用remove方法</span>t<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对于线程池来说 如果不执行remove()方法线程归还后v的值还在 再次获取线程会复用旧值造成值错乱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="程序、进程、线程："><a href="#程序、进程、线程：" class="headerlink" title="程序、进程、线程："></a>程序、进程、线程：</h5><p><strong>程序：</strong> qq.exe</p><p><strong>进程：</strong> 程序启动分配内存 资源分配的基本单位</p><p><strong>线程：</strong> 程序执行的基本单位</p><p><strong>程序的执行顺序：</strong>a = 2+3</p><ol><li><p>通过总线读取数据到寄存器里</p></li><li><p>使用ALU计算单元完成计算返回到内存</p></li><li><p>pc寄存器指向下一个指令</p><p>CPU的运行顺序：读指令–pc，读数据–register ，计算–AlU，会写–内存，下一条指令</p></li></ol><h5 id="CAS："><a href="#CAS：" class="headerlink" title="CAS："></a>CAS：</h5><p><strong>操作流程</strong>：</p><p>拿到旧值old1–执行计算v = old1+1–再次读取old2–进行比较old1==old2，相等就写回，不相等就再次读取一直重试</p><p><img src="https://i.loli.net/2020/09/10/jPiG21S8cRTpfaE.png" alt="W_U9_Y__ND__QJ8_446~4YG.png"></p><p><strong>ABA问题：</strong></p><p>​     读取的旧值为0，操作完成后再次读取还是为0，但是执行了0-8-0这个过程</p><p>​     解决方法 加上版本号，每次执行时版本号增加，写回时读取并比较版本号</p><p><strong>CAS原子性问题</strong>：</p><p>​     在操作数据时必须保证原子性，不能被其他线程修改；</p><p>​     底层使用汇编指令保证 lock（锁总线） cmpxchg</p><p><strong>AtomicInteger</strong>实现自旋锁：</p><pre><code>private static AtomicInteger m = new AtomicInteger(0);//m++m.incrementAndGet(); //底层调用 unsafe.getAndAddInt(this,valueOffset,1)+1;//getAndAddInt()调用this.compareAndSwapInt(var1,var2,var5,var5+var4);</code></pre><p><strong>Synchronize实现原理：</strong>一个线程偏向锁–多个线程轻度竞争cas–多个线程重度竞争（或自旋次数过多）重量锁</p><p>锁的四种状态：</p><p><strong>new：</strong></p><p><strong>轻量级锁：</strong></p><p>​    用户解决的锁</p><p>​    cas自旋while（） 竞争很激烈时cpu上下文切换频繁消耗资源</p><p><strong>重量级锁：</strong></p><p>​    需要操作系统调度的锁</p><p>​    加入等待队列由操作系统调度</p><p><strong>偏向锁：</strong></p><p>​    偏向于第一个访问锁的线程，如果在运行过程中，同步锁只有一个线程访问，不存在多线程争用的情况，则线程是不需要触发同步的，这种情况下，就会给线程加一个偏向锁。 </p><p>![UQ_Y3I0_IULC@Y__4RP`M_K.png](<a href="https://i.loli.net/2020/09/10/s1oRtKhraJlXkFO.png">https://i.loli.net/2020/09/10/s1oRtKhraJlXkFO.png</a>)</p><p><strong>寄存器的层次结构</strong>：</p><p>cache line一次加载64个字节</p><p>pc寄存器的指令计算需要x的值 首先会按序加载L1–&gt;L2–&gt;L3–&gt;内存 寄存器将x交给ALU计算 然后写回 pc寄存器读取下一个指令<br>内核2需要y的值直接从L3中读取</p><p><img src="https://i.loli.net/2020/09/10/QheuWkdCc3yMz6O.png" alt="V_BMVR@QU_AOB_SL@UURIMX.png"></p><p>缓存行对齐：</p><p>​    xy处于同一行 当并发修改时，内核c1修改完x会通知内核c2，c2去内存中再次读取修改y，再通知c1这个过程很耗时</p><p>   假设xy都为long（占用8个字节）类型，在x的前面填充7个long类型对象，在其后添加8个long对象，再执行操作，由于xy不处于同一缓存行，省去通知、读取的时间</p><h5 id="缓存一致性协议：MESI-Cache（一致性协议）"><a href="#缓存一致性协议：MESI-Cache（一致性协议）" class="headerlink" title="缓存一致性协议：MESI Cache（一致性协议）"></a>缓存一致性协议：MESI Cache（一致性协议）</h5><p><strong>Modified：修改</strong></p><p><strong>Exclusive：独占</strong></p><p><strong>Shared：共享</strong></p><p><strong>Invalid：失效</strong></p><p>假设缓存行在两个核心中使用，当c1修改后会通知c2，c2将该行数据标记为Invalid，c2需要重新从内存中读取。</p><h5 id="volatile："><a href="#volatile：" class="headerlink" title="volatile："></a>volatile：</h5><p><strong>线程间通信</strong></p><ul><li>volatile修饰的变量被当前线程修改后其他线程会感知到    </li></ul><p><strong>禁止指令重排序</strong></p><ul><li><p>如果不用volatile修饰可能发生指令重排序，<strong>invokespecial</strong>在<strong>astore_1</strong>之后执行，o拿到的时一个半初始化状态的对象</p></li><li><h5 id="Object-o-new-Object-的初始化过程："><a href="#Object-o-new-Object-的初始化过程：" class="headerlink" title="Object o  = new Object()的初始化过程："></a>Object o  = new Object()的初始化过程：</h5></li></ul><ol><li><strong>new</strong>：申请一块内存空间用来存放对象</li><li><strong>invokespecial</strong>：调用构造方法对属性赋值（半初始化对象)</li><li><strong>astore_1</strong>：建立o和对象的关联（指针指向堆内存）</li></ol><h5 id="单例模式为什么需要dlc操作："><a href="#单例模式为什么需要dlc操作：" class="headerlink" title="单例模式为什么需要dlc操作："></a>单例模式为什么需要dlc操作：</h5><p>如果不用volatile修饰可能发生指令重排序，<strong>invokespecial</strong>在<strong>astore_1</strong>之后执行，INSTACE拿到的时一个半初始化状态的对象</p><p>细化锁的力度将锁加载在方法内部时，当线程T1执行到第17行时被暂停，T2执行创建、返回对象，T1再次执行创建、返回对象</p><p><img src="https://i.loli.net/2020/09/10/F9pB75xCHKscm38.png" alt="Q_S`@`U82B8_G8_Z_KCM_ID.png"></p><p><strong>解决方法：dcl(double check lock):</strong></p><p>加锁前检查一次（减少并发下的竞争），加锁后再检查一次</p><p><img src="https://i.loli.net/2020/09/10/OT9kEtDHJNG2XfB.png" alt="M2_KX7_BNP3IISU1S_~F_CF.png"></p><h5 id="内存屏障："><a href="#内存屏障：" class="headerlink" title="内存屏障："></a>内存屏障：</h5><p><strong>JVM层面</strong>：（happens-before原则）</p><ul><li>写操作 在前面添加StoreStore 在后面添加StoreLoad</li><li>读操作  在之后添加LoadLoad LoadStore</li></ul><p><strong>Hotspot实现：</strong></p><ul><li><strong>lock addl</strong>总线锁定 <ul><li>对共享内存的独占使用</li><li>将当前处理器的缓存刷新到内存，使其他处理器的缓存失效</li><li>指令无法越过这个内存屏障</li></ul></li></ul><h5 id="jvm如何确定一个对象是垃圾："><a href="#jvm如何确定一个对象是垃圾：" class="headerlink" title="jvm如何确定一个对象是垃圾："></a>jvm如何确定一个对象是垃圾：</h5><ul><li><p>引用计数 reference count</p></li><li><p>根可达性 root searching</p></li></ul><h5 id="GC算法有哪些："><a href="#GC算法有哪些：" class="headerlink" title="GC算法有哪些："></a>GC算法有哪些：</h5><ul><li><strong>mark-sweep 标记清除</strong>（效率高 会产生碎片化问题）</li><li><strong>copying 复制</strong>（浪费空间 Eden区 8:1:1 使用此算法，每次使用一半的空间，有用的拷贝到to，清除from区）</li><li><strong>mark-compact标记压缩</strong>（效率低节约空间 老年代使用此算法）</li></ul><h5 id="垃圾回收器："><a href="#垃圾回收器：" class="headerlink" title="垃圾回收器："></a>垃圾回收器：</h5><p>分代：将内存分为两大块</p><p>分区：将内存分为一片一片</p><p><img src="https://s1.ax1x.com/2020/09/11/wYghWR.png" alt="wYghWR.png"></p><h5 id="堆内存的逻辑分区："><a href="#堆内存的逻辑分区：" class="headerlink" title="堆内存的逻辑分区："></a>堆内存的逻辑分区：</h5><p>![LB0I_1AC2`VEA_M0_3_DA50.png](<a href="https://i.loli.net/2020/09/11/NxmGJP8M43v5Tph.png">https://i.loli.net/2020/09/11/NxmGJP8M43v5Tph.png</a>)</p><h5 id="对象的生命周期："><a href="#对象的生命周期：" class="headerlink" title="对象的生命周期："></a>对象的生命周期：</h5><p>new对象 </p><ul><li><p>进入栈？（逃逸分析和标量替换）出栈消亡</p><p>JVM通过逃逸分析确定该对象不会被外部访问。那就通过标量替换将该对象分解在栈上分配内存</p><ul><li><p><strong>逃逸分析</strong>：分析在程序的哪些地方可以访问到该指针，避免野指针</p></li><li><p><strong>标量替换：</strong>A中数据都为基本数据类型，可以用两个int数据替代</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>进入老年大（对象很大） 发生FullGC</p></li><li><p>进入TLAB （Thread Local Allocation Buffer）线程本地内存分配缓冲区</p><ul><li>进入 Eden  发生YoungGC</li></ul></li></ul><p>对象创建后进入Eden区，第一次GC时存活的对象（包括to区的）拷贝到from区，将from和to交换，清空Eden和from区，对象年龄+1，当年龄大于15后进入老年代</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>架构设计基础原则</title>
      <link href="2020/09/10/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/"/>
      <url>2020/09/10/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<h4 id="需要考虑的架构设计问题："><a href="#需要考虑的架构设计问题：" class="headerlink" title="需要考虑的架构设计问题："></a>需要考虑的架构设计问题：</h4><ul><li>云部署是大势所趋</li><li>企业对公有云能力的期待和公有云现有能力的差距</li><li>不能简单依赖公有云提供的SLA（service level agreement）来保障业务稳定性</li></ul><h4 id="云上设计高可用架构需要考虑的三大要素："><a href="#云上设计高可用架构需要考虑的三大要素：" class="headerlink" title="云上设计高可用架构需要考虑的三大要素："></a>云上设计高可用架构需要考虑的三大要素：</h4><ul><li><p>云基础设施和云服务器的高可用性</p></li><li><p>企业运行业务环境的高可用性</p></li><li><p>企业业务和客户端通信的高可用性（由运营商基础通信能力保障）</p></li></ul><h4 id="应用架构设计的演进之路："><a href="#应用架构设计的演进之路：" class="headerlink" title="应用架构设计的演进之路："></a>应用架构设计的演进之路：</h4><p><strong>1.单体架构：</strong></p><ul><li><p>经典的软件三层架构</p></li><li><p>逻辑上分为三层</p></li><li><p>多用于传统J2EE项目</p></li></ul><p><img src="https://i.loli.net/2020/09/10/NWcZCo7y8nFvPKm.png" alt="image.png"></p><p><strong>2.SOA（面向服务）架构：</strong></p><p><img src="https://i.loli.net/2020/09/10/J6AFCqYOgGuWHEp.png" alt="EMKJRZ02H8LDPMETZ_KX_RB.png"></p><p><strong>微服务架构</strong>：</p><p><img src="https://i.loli.net/2020/09/10/1CjlxiSZntG72oK.png" alt="_7UKTZ@M145D3MIGBB7QJSO.png"></p><hr><p><strong>基础架构设计原则：</strong></p><ol><li><h4 id="墨菲定律（心理学效应）："><a href="#墨菲定律（心理学效应）：" class="headerlink" title="墨菲定律（心理学效应）："></a>墨菲定律（心理学效应）：</h4><ul><li><p>任何事都没有看上去的那么简单</p></li><li><p>所有事都会比预计的时间长</p></li><li><p>会出错的事情总是会出错</p></li><li><p>如果担心某件事的发生，这件事就更有可能发生</p></li></ul></li></ol><ol start="2"><li><p><strong>容错设计原则</strong></p></li><li><p><strong>需要考虑到应用系统的每一个层面</strong></p></li><li><p><strong>消除单一故障点实现高可用性</strong></p></li></ol><p><strong>云架构设计原则</strong></p><ol><li><p><strong>从程序开发部署的视角看</strong></p><ul><li><p>系统失效的容错设计</p><ul><li>利用云原生容错的服务来增强业务的容错能力</li></ul></li><li><p>松耦合和无状态设计</p><ul><li>使用中间件解耦，无状态的应用能更好的伸缩<ul><li><strong>无状态应用：</strong> Stateless Application 是指并不会在会话中保存下次会话中去要的客户端数据。 每一个会话都像首次执行一样，不会依赖之前的数据进行响应。</li><li><strong>有状态的应用：</strong> Stateful Application 是指会在会话中保存客户端的数据，并在客户端下一次的请求中来使用那些数据。</li></ul></li></ul></li><li><p>可扩展和自动缩放设计</p><ul><li>利用云端的弹性伸缩机制来增加资源的灵活性</li></ul></li><li><p>安全的设计</p><ul><li>贯穿安全的的理念，减少不必要的暴露面</li></ul></li></ul></li></ol><ol start="2"><li><p><strong>从服务模块部署的视角看</strong></p><ul><li>高可用性（HA）、容灾和灾难恢复（DR）是不可忽略的两块内容</li><li>高可用性的部署哟啊面向于将业务完全部署在云端的场景</li><li>容灾和灾难恢复面向本地机房和云端业余打通的场景</li></ul></li></ol><p><strong>高可用架构设计原则：</strong></p><ul><li>服务器级别的容错恢复</li><li>云服务区域级别的容错与恢复</li><li>云平台级别的容错与恢复</li><li>应用系统的<strong>SOA</strong>和服务化</li><li>使用云端工具构建自动化平台，用代码管理基础设施</li></ul><p><strong>高可用（HA）场景：</strong></p><ul><li>将应用程序设置为无状态，可通过重启进程或服务器恢复</li><li>将无状态的应用程序部署在负载均衡后面</li><li>设置弹性伸缩功能，使得云平台可以根据性能指标做出响应</li><li>设置好应用环境的基础镜像模板，便于快速恢复</li></ul><p><strong>应用场景</strong>：</p><ol><li><p>服务器级别的容错和恢复</p><ul><li>负载均衡节点的检查，当发现某个节点的健康出现问题时，剔除该节点</li></ul><p><img src="https://i.loli.net/2020/09/10/6yv5ZaGfRjrK1ed.png" alt="image.png"></p></li><li><p>使用弹性伸缩功能快速调整集群</p><ul><li>ops增加到阈值时根据提前定制的策略自动扩容</li><li>ops减小到阈值时根据提前定制的策略自动缩容</li></ul><p><img src="https://i.loli.net/2020/09/10/SKPZWmhB2vtrzEY.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/09/10/ew7uL4JhpnXyavA.png" alt="image.png"></p></li><li><p>区域级别的容错和恢复</p><ul><li>某个区域服务器宕机时将业务迁移到其他区域服务器</li></ul><p><img src="https://i.loli.net/2020/09/10/jK53lS7zqVENavP.png" alt="image.png"></p></li><li><p>多可用区部署的容错和恢复</p><p><img src="https://i.loli.net/2020/09/10/uq9XjdCLeRwKEmy.png" alt="image.png"></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>EasyExcel操作Excel</title>
      <link href="2020/09/08/EasyExcel%E6%93%8D%E4%BD%9CExcel/"/>
      <url>2020/09/08/EasyExcel%E6%93%8D%E4%BD%9CExcel/</url>
      <content type="html"><![CDATA[<h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 本质是对POI的封装所以需要POI的依赖导入 注意版本匹配 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--xls--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建Excel实体类"><a href="#2-创建Excel实体类" class="headerlink" title="2.创建Excel实体类"></a>2.创建Excel实体类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExcelProperty<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Excel实体类 * @author saber */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubjectData</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 一级分类 设置表头名称     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String oneSubjectName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 二级分类     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String twoSubjectName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-写操作"><a href="#3-写操作" class="headerlink" title="3.写操作"></a>3.写操作</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置写入文件路径</span>    String name <span class="token operator">=</span> <span class="token string">"F:\\test.xlsx"</span>    <span class="token comment" spellcheck="true">//需要写入的数据</span>    List<span class="token operator">&lt;</span>SubjectData<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SubjectData data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubjectData</span><span class="token punctuation">(</span><span class="token string">"level1"</span><span class="token punctuation">,</span><span class="token string">"level2"</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//写操作</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>SubjectData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"课程分类列表"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-读操作需要创建监听器"><a href="#4-读操作需要创建监听器" class="headerlink" title="4.读操作需要创建监听器"></a>4.读操作需要创建监听器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span>AnalysisContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span>AnalysisEventListener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zjm<span class="token punctuation">.</span>eduservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>EduSubject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zjm<span class="token punctuation">.</span>eduservice<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>SubjectData<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zjm<span class="token punctuation">.</span>eduservice<span class="token punctuation">.</span>service<span class="token punctuation">.</span>EduSubjectService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zjm<span class="token punctuation">.</span>servicebase<span class="token punctuation">.</span>exceptionhandler<span class="token punctuation">.</span>MSException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * easyExcel监听器 * @author saber */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubjectExcelListener</span> <span class="token keyword">extends</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>SubjectData<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * SubjectExcelListener不能交给spring 不能注入其他对象     */</span>    <span class="token keyword">public</span> EduSubjectService edusubjectService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SubjectExcelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">SubjectExcelListener</span><span class="token punctuation">(</span>EduSubjectService subjectService<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//有参</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>edusubjectService <span class="token operator">=</span> subjectService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按行加载Excel数据     * @param subjectData     * @param analysisContext     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>SubjectData subjectData<span class="token punctuation">,</span> AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>subjectData <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MSException</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"文件数据为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//每次读取有两个值，第一个值一级分类，第二个值二级分类</span>        <span class="token comment" spellcheck="true">//判断一级分类是否重复</span>        EduSubject existOneSubject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">existOneSubject</span><span class="token punctuation">(</span>edusubjectService<span class="token punctuation">,</span> subjectData<span class="token punctuation">.</span><span class="token function">getOneSubjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没有相同一级分类，进行添加</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>existOneSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            existOneSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EduSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            existOneSubject<span class="token punctuation">.</span><span class="token function">setParentId</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//一级分类名称</span>            existOneSubject<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>subjectData<span class="token punctuation">.</span><span class="token function">getOneSubjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            edusubjectService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>existOneSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取一级分类id值 作为二级分类的父id</span>        String pid <span class="token operator">=</span> existOneSubject<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加二级分类</span>        <span class="token comment" spellcheck="true">//判断二级分类是否重复</span>        EduSubject existTwoSubject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">existTwoSubject</span><span class="token punctuation">(</span>edusubjectService<span class="token punctuation">,</span> subjectData<span class="token punctuation">.</span><span class="token function">getTwoSubjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>existTwoSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            existTwoSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EduSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            existTwoSubject<span class="token punctuation">.</span><span class="token function">setParentId</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//二级分类名称</span>            existTwoSubject<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>subjectData<span class="token punctuation">.</span><span class="token function">getTwoSubjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            edusubjectService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>existTwoSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断一级分类不能重复添加     * @param subjectService     * @param name     * @return     */</span>    <span class="token keyword">private</span> EduSubject <span class="token function">existOneSubject</span><span class="token punctuation">(</span>EduSubjectService subjectService<span class="token punctuation">,</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>EduSubject<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"parent_id"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EduSubject oneSubject <span class="token operator">=</span> subjectService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oneSubject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断二级分类不能重复添加     * @param subjectService     * @param name     * @return     */</span>    <span class="token keyword">private</span> EduSubject <span class="token function">existTwoSubject</span><span class="token punctuation">(</span>EduSubjectService subjectService<span class="token punctuation">,</span>String name<span class="token punctuation">,</span>String pid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>EduSubject<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"parent_id"</span><span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        EduSubject twoSubject <span class="token operator">=</span> subjectService<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> twoSubject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-读操作"><a href="#5-读操作" class="headerlink" title="5.读操作"></a>5.读操作</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSubject</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">,</span> EduSubjectService eduSubjectService<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//文件输入流</span>        InputStream in <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法进行读取</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> SubjectData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SubjectExcelListener</span><span class="token punctuation">(</span>eduSubjectService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>logback日志配置</title>
      <link href="2020/09/08/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>2020/09/08/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="1-移除spring中日志相关的配置"><a href="#1-移除spring中日志相关的配置" class="headerlink" title="1.移除spring中日志相关的配置"></a>1.移除spring中日志相关的配置</h4><h4 id="2-新建文件logback-spring-xml"><a href="#2-新建文件logback-spring-xml" class="headerlink" title="2.新建文件logback-spring.xml"></a>2.新建文件logback-spring.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span>  <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --></span>    <span class="token comment" spellcheck="true">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --></span>    <span class="token comment" spellcheck="true">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --></span>    <span class="token comment" spellcheck="true">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:/WorkSpace/Project/guli_log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 彩色日志 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- magenta:洋红 --></span>    <span class="token comment" spellcheck="true">&lt;!-- boldMagenta:粗红--></span>    <span class="token comment" spellcheck="true">&lt;!-- cyan:青色 --></span>    <span class="token comment" spellcheck="true">&lt;!-- white:白色 --></span>    <span class="token comment" spellcheck="true">&lt;!-- magenta:洋红 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--></span>        <span class="token comment" spellcheck="true">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">></span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 设置字符集 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到文件--></span>    <span class="token comment" spellcheck="true">&lt;!-- 时间滚动输出 level为 INFO 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/log_info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 每天日志归档路径以及格式 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文件只记录info级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 时间滚动输出 level为 WARN 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/log_warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文件只记录warn级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 时间滚动输出 level为 ERROR 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/log_error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文件只记录ERROR级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        &lt;logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender>。        &lt;logger>仅有一个name属性，        一个可选的level和一个可选的addtivity属性。        name:用来指定受此logger约束的某一个包或者具体的某一个类。        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，              如果未设置此属性，那么当前logger将会继承上级的级别。    --></span>    <span class="token comment" spellcheck="true">&lt;!--        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：        第一种把&lt;root level="INFO">改成&lt;root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：     --></span>    <span class="token comment" spellcheck="true">&lt;!--开发环境:打印控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjm<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG            可以包含零个或多个appender元素。        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--生产环境:输出到文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-使用lombok注解-slf4j打印日志"><a href="#3-使用lombok注解-slf4j打印日志" class="headerlink" title="3.使用lombok注解@slf4j打印日志"></a>3.使用lombok注解@slf4j打印日志</h4><pre class="line-numbers language-java"><code class="language-java">log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"............"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mybatis配置</title>
      <link href="2020/09/07/mybatis%E9%85%8D%E7%BD%AE/"/>
      <url>2020/09/07/mybatis%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="配置类："><a href="#配置类：" class="headerlink" title="配置类："></a>配置类：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>ISqlInjector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>LogicSqlInjector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PaginationInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * mybatis配置 * @author saber */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.zjm.eduservice.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 逻辑删除插件 需要配合逻辑删除注解     *@ApiModelProperty(value = "逻辑删除 1（true）已删除， 0（false）未删除")     *@TableLogic     *private Integer isDeleted;     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分页插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *插入更新时间在数据库配置     CREATE TABLE `tbl_hive_hour` (      `id` int(11) NOT NULL AUTO_INCREMENT,      `tb_name` varchar(255) DEFAULT NULL COMMENT '被执行表名',      `sale_time` varchar(255) DEFAULT NULL COMMENT '执行的为哪一天的数据,格式为yyyyMMddhh',      `partition_string` varchar(255) DEFAULT NULL COMMENT '分区值，存储格式为year=2018,month=12,day=05,hour=08',      `run_status` int(11) NOT NULL COMMENT '执行状态，0未执行，1执行成功且大于0条，2执行结果为0',      `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',      `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后一次修改时间',      PRIMARY KEY (`id`)    )     */</span>    <span class="token comment" spellcheck="true">/**     * SQL执行效率插件 性能分析插件     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 dev test 环境开启</span>    <span class="token keyword">public</span> PerformanceInterceptor <span class="token function">performanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PerformanceInterceptor performanceInterceptor <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">PerformanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//格式化语句</span>        performanceInterceptor<span class="token punctuation">.</span><span class="token function">setFormat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行时间超过多少秒会抛出异常</span>        <span class="token comment" spellcheck="true">//performanceInterceptor.setMaxTime(5);</span>        <span class="token keyword">return</span>  performanceInterceptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动填充字段："><a href="#自动填充字段：" class="headerlink" title="自动填充字段："></a>自动填充字段：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * mp自动填充 * @author saber */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//类中的属性名称 非数据库字段</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtCreate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"gmtModified"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实体类："><a href="#实体类：" class="headerlink" title="实体类："></a>实体类：</h4><pre class="line-numbers language-Java"><code class="language-Java">/** * 实体类 * @author saber * @time 2020-03-29 */@Data@EqualsAndHashCode(callSuper = false)@Accessors(chain = true)@ApiModel(value="EduTeacher对象", description="讲师")public class EduTeacher implements Serializable {    private static final long serialVersionUID = 1L;    @ApiModelProperty(value = "讲师ID")    @TableId(value = "id", type = IdType.ID_WORKER_STR)    private String id;    @ApiModelProperty(value = "讲师姓名")    private String name;    @ApiModelProperty(value = "讲师简介")    private String intro;    @ApiModelProperty(value = "讲师资历,一句话说明讲师")    private String career;    @ApiModelProperty(value = "头衔 1高级讲师 2首席讲师")    private Integer level;    @ApiModelProperty(value = "讲师头像")    private String avatar;    @ApiModelProperty(value = "排序")    private Integer sort;    @ApiModelProperty(value = "逻辑删除 1（true）已删除， 0（false）未删除")    @TableLogic    private Integer isDeleted;    @ApiModelProperty(value = "创建时间")    @TableField(fill = FieldFill.INSERT)    private Date gmtCreate;    @ApiModelProperty(value = "更新时间")    @TableField(fill = FieldFill.INSERT_UPDATE)    private Date gmtModified;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>    33003        33004            3300738005</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>微服务通用配置</title>
      <link href="2020/09/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>2020/09/07/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="application-propertis"><a href="#application-propertis" class="headerlink" title="application.propertis:"></a>application.propertis:</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8001</span><span class="token comment" spellcheck="true"># 模块名称</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">service</span><span class="token comment" spellcheck="true"># 项目环境</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment" spellcheck="true"># 数据库连接信息</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.42.128:3306/mindschool?serverTimezone=GMT%2B8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token comment" spellcheck="true"># 日期和时区</span><span class="token attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span><span class="token attr-value">yyyy-MM-dd HH:mm:ss</span><span class="token attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span><span class="token attr-value">GMT+8</span><span class="token comment" spellcheck="true"># mapper包</span><span class="token attr-name">mybatis-plus.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:com/zjm/eduservice/mapper/xml/*.xml</span><span class="token comment" spellcheck="true"># nacos中心地址</span><span class="token attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:8848</span><span class="token comment" spellcheck="true"># 远程调用</span><span class="token attr-name">feign.hystrix.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 超时时间</span><span class="token comment" spellcheck="true"># hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=6000</span><span class="token comment" spellcheck="true"># redis</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.5.129</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">1800000</span><span class="token attr-name">spring.redis.lettuce.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token attr-name">spring.redis.lettuce.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># Redis最大连接数</span><span class="token attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true"># mysql日志打印级别</span><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token comment" spellcheck="true"># mybatis日志</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bootstrp-properties"><a href="#bootstrp-properties" class="headerlink" title="bootstrp.properties:"></a>bootstrp.properties:</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># nacos地址</span><span class="token attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1:8848</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">service</span><span class="token comment" spellcheck="true"># 名称空间</span><span class="token attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token attr-value">e5baf4dd-8681-4c2a-8b63-10209744622e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日志输出配置："><a href="#日志输出配置：" class="headerlink" title="日志输出配置："></a>日志输出配置：</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span>  <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --></span>    <span class="token comment" spellcheck="true">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --></span>    <span class="token comment" spellcheck="true">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --></span>    <span class="token comment" spellcheck="true">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>contextName</span><span class="token punctuation">></span></span>logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>contextName</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:/WorkSpace/Project/guli_log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 彩色日志 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --></span>    <span class="token comment" spellcheck="true">&lt;!-- magenta:洋红 --></span>    <span class="token comment" spellcheck="true">&lt;!-- boldMagenta:粗红--></span>    <span class="token comment" spellcheck="true">&lt;!-- cyan:青色 --></span>    <span class="token comment" spellcheck="true">&lt;!-- white:白色 --></span>    <span class="token comment" spellcheck="true">&lt;!-- magenta:洋红 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--></span>        <span class="token comment" spellcheck="true">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">></span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 设置字符集 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--输出到文件--></span>    <span class="token comment" spellcheck="true">&lt;!-- 时间滚动输出 level为 INFO 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/log_info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 每天日志归档路径以及格式 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文件只记录info级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 时间滚动输出 level为 WARN 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/log_warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文件只记录warn级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 时间滚动输出 level为 ERROR 日志 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 正在记录的日志文件的路径及文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.path}/log_error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--日志文件输出格式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 此处设置字符集 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志文件保留天数--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 此日志文件只记录ERROR级别的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        &lt;logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender>。        &lt;logger>仅有一个name属性，        一个可选的level和一个可选的addtivity属性。        name:用来指定受此logger约束的某一个包或者具体的某一个类。        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，              如果未设置此属性，那么当前logger将会继承上级的级别。    --></span>    <span class="token comment" spellcheck="true">&lt;!--        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：        第一种把&lt;root level="INFO">改成&lt;root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：     --></span>    <span class="token comment" spellcheck="true">&lt;!--开发环境:打印控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zjm<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG            可以包含零个或多个appender元素。        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--生产环境:输出到文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Swagger通用配置</title>
      <link href="2020/09/07/Swagger%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>2020/09/07/Swagger%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span>Predicates<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span>    <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span>    <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span>    <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span>    <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span>    <span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * swagger配置类     * @author saber   */</span>       <span class="token annotation punctuation">@EnableSwagger2</span>   <span class="token annotation punctuation">@Configuration</span>       <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>       <span class="token annotation punctuation">@Bean</span>       <span class="token keyword">public</span> Docket <span class="token function">webApiConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"在线教育API"</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>Predicates<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/admin/.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>Predicates<span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/error.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">webApiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"网站-课程中心API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"本文档描述了课程中心微服务接口定义"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token string">"xxx@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>API接口返回类通用方案</title>
      <link href="2020/09/07/API%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%B1%BB%E9%80%9A%E7%94%A8%E6%96%B9%E6%A1%88/"/>
      <url>2020/09/07/API%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%B1%BB%E9%80%9A%E7%94%A8%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="枚举类定义响应码"><a href="#枚举类定义响应码" class="headerlink" title="枚举类定义响应码:"></a>枚举类定义响应码:</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>ToString<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author saber * @description 《响应状态码》 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">enum</span> ResultCodeEnum <span class="token punctuation">{</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UNKNOWN_REASON</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">20001</span><span class="token punctuation">,</span> <span class="token string">"未知错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">BAD_SQL_GRAMMAR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">21001</span><span class="token punctuation">,</span> <span class="token string">"sql语法错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">JSON_PARSE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">21002</span><span class="token punctuation">,</span> <span class="token string">"json解析异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PARAM_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">21003</span><span class="token punctuation">,</span> <span class="token string">"参数不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FILE_UPLOAD_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">21004</span><span class="token punctuation">,</span> <span class="token string">"文件上传错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FILE_DELETE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">21005</span><span class="token punctuation">,</span> <span class="token string">"文件刪除错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">EXCEL_DATA_IMPORT_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">21006</span><span class="token punctuation">,</span> <span class="token string">"Excel数据导入错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VIDEO_UPLOAD_ALIYUN_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">22001</span><span class="token punctuation">,</span> <span class="token string">"视频上传至阿里云失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VIDEO_UPLOAD_TOMCAT_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">22002</span><span class="token punctuation">,</span> <span class="token string">"视频上传至业务服务器失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VIDEO_DELETE_ALIYUN_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">22003</span><span class="token punctuation">,</span> <span class="token string">"阿里云视频文件删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FETCH_VIDEO_UPLOADAUTH_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">22004</span><span class="token punctuation">,</span> <span class="token string">"获取上传地址和凭证失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REFRESH_VIDEO_UPLOADAUTH_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">22005</span><span class="token punctuation">,</span> <span class="token string">"刷新上传地址和凭证失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FETCH_PLAYAUTH_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">22006</span><span class="token punctuation">,</span> <span class="token string">"获取播放凭证失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">URL_ENCODE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">23001</span><span class="token punctuation">,</span> <span class="token string">"URL编码失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ILLEGAL_CALLBACK_REQUEST_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">23002</span><span class="token punctuation">,</span> <span class="token string">"非法回调请求"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FETCH_ACCESSTOKEN_FAILD</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">23003</span><span class="token punctuation">,</span> <span class="token string">"获取accessToken失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FETCH_USERINFO_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">23004</span><span class="token punctuation">,</span> <span class="token string">"获取用户信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">23005</span><span class="token punctuation">,</span> <span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">COMMENT_EMPTY</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">24006</span><span class="token punctuation">,</span> <span class="token string">"评论内容必须填写"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PAY_RUN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">25000</span><span class="token punctuation">,</span> <span class="token string">"支付中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PAY_UNIFIEDORDER_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">25001</span><span class="token punctuation">,</span> <span class="token string">"统一下单错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PAY_ORDERQUERY_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">25002</span><span class="token punctuation">,</span> <span class="token string">"查询支付结果错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ORDER_EXIST_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">25003</span><span class="token punctuation">,</span> <span class="token string">"课程已购买"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">GATEWAY_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">26000</span><span class="token punctuation">,</span> <span class="token string">"服务不能访问"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">CODE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28000</span><span class="token punctuation">,</span> <span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_PHONE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28009</span><span class="token punctuation">,</span> <span class="token string">"手机号码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_MOBILE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28001</span><span class="token punctuation">,</span> <span class="token string">"账号不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_PASSWORD_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28008</span><span class="token punctuation">,</span> <span class="token string">"密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_DISABLED_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28002</span><span class="token punctuation">,</span> <span class="token string">"该用户已被禁用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REGISTER_MOBLE_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28003</span><span class="token punctuation">,</span> <span class="token string">"手机号已被注册"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_AUTH</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28004</span><span class="token punctuation">,</span> <span class="token string">"需要登录"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">LOGIN_ACL</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28005</span><span class="token punctuation">,</span> <span class="token string">"没有权限"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SMS_SEND_ERROR</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28006</span><span class="token punctuation">,</span> <span class="token string">"短信发送失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SMS_SEND_ERROR_BUSINESS_LIMIT_CONTROL</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">28007</span><span class="token punctuation">,</span> <span class="token string">"短信发送过于频繁"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">MY_VALUE</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token string">"我的错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean success<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token function">ResultCodeEnum</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">,</span> Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> success<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回类定义"><a href="#返回类定义" class="headerlink" title="返回类定义:"></a>返回类定义:</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author saber * @description 《前端需求的返回类》 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否成功"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Boolean success<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回消息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回数据"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把构造方法私有,通过静态方法调用     */</span>    <span class="token keyword">private</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>UNKNOWN_REASON<span class="token punctuation">.</span><span class="token function">getSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>UNKNOWN_REASON<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>UNKNOWN_REASON<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum resultCodeEnum<span class="token punctuation">)</span><span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">success</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">message</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">code</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">data</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">data</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getInfo/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> R <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Persion persion <span class="token operator">=</span> persionService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>persion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JSR303结合AdviceController开启全局数据校验</title>
      <link href="2020/08/14/JSR303%E7%BB%93%E5%90%88AdviceController%E5%BC%80%E5%90%AF%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/"/>
      <url>2020/08/14/JSR303%E7%BB%93%E5%90%88AdviceController%E5%BC%80%E5%90%AF%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a>业务场景：</h3><ul><li><h5 id="项目本身需要感知处理各种异常"><a href="#项目本身需要感知处理各种异常" class="headerlink" title="项目本身需要感知处理各种异常"></a>项目本身需要感知处理各种异常</h5></li><li><h5 id="前端传递的数据都需要校验其合法性"><a href="#前端传递的数据都需要校验其合法性" class="headerlink" title="前端传递的数据都需要校验其合法性"></a>前端传递的数据都需要校验其合法性</h5></li><li><h5 id="如果在每一个controller上编写异常处理与数据校验就会显得很臃肿"><a href="#如果在每一个controller上编写异常处理与数据校验就会显得很臃肿" class="headerlink" title="如果在每一个controller上编写异常处理与数据校验就会显得很臃肿"></a>如果在每一个controller上编写异常处理与数据校验就会显得很臃肿</h5></li></ul><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li><p>使用JSR303在controller标注数据校验注解，向上抛出异常</p></li><li><p>使用AdviceController全局异常感知完成数据校验与异常处理</p></li></ul><h3 id="分组校验的业务场景："><a href="#分组校验的业务场景：" class="headerlink" title="分组校验的业务场景："></a>分组校验的业务场景：</h3><ul><li><h5 id="执行添加操作由于ID递增，所以数据对象不需要id字段"><a href="#执行添加操作由于ID递增，所以数据对象不需要id字段" class="headerlink" title="执行添加操作由于ID递增，所以数据对象不需要id字段"></a>执行添加操作由于ID递增，所以数据对象不需要id字段</h5></li><li><h5 id="执行更新操作由ID确定更新数据，所以必须携带id字段"><a href="#执行更新操作由ID确定更新数据，所以必须携带id字段" class="headerlink" title="执行更新操作由ID确定更新数据，所以必须携带id字段"></a>执行更新操作由ID确定更新数据，所以必须携带id字段</h5></li></ul><hr><h3 id="实现流程："><a href="#实现流程：" class="headerlink" title="实现流程："></a>实现流程：</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-编写JSR303分组标记接口"><a href="#2-编写JSR303分组标记接口" class="headerlink" title="2.编写JSR303分组标记接口"></a>2.编写JSR303分组标记接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author: saber * @description: 添加操作 数据校验的分组标记 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AddGroup</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @author: saber * @description: 修改操作 数据校验的分组标记 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UpdateGroup</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-bean标注注解"><a href="#3-bean标注注解" class="headerlink" title="3.bean标注注解"></a>3.bean标注注解</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * messag制定错误信息     * groups指定分组标记接口集合 未指定分组的规则在分组校验的情况下不生效     */</span>    <span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"新增操作品牌id必须为空"</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"修改操作品牌id不能为空"</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> Long brandId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"品牌名不能为空"</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Controller标注注解开启验证"><a href="#4-Controller标注注解开启验证" class="headerlink" title="4.Controller标注注解开启验证"></a>4.Controller标注注解开启验证</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**此处不能带上BindingResult 否则异常不能被AdviceController感知      *     * @param brand  bean     * Validated()指定当前使用的分组      * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> BrandEntity brand<span class="token punctuation">)</span><span class="token punctuation">{</span>           brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> BrandEntity brand<span class="token punctuation">)</span><span class="token punctuation">{</span>            brandService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-统一响应枚举类"><a href="#5-统一响应枚举类" class="headerlink" title="5.统一响应枚举类"></a>5.统一响应枚举类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> BizCodeEnum <span class="token punctuation">{</span>    <span class="token function">UNKNOWN_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"系统未知异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VALID_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"参数格式校验失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token function">BizCodeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-编写统一异常处理类"><a href="#6-编写统一异常处理类" class="headerlink" title="6.编写统一异常处理类"></a>6.编写统一异常处理类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.saber.mall.product.controller"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *处理数据校验异常     * @param e     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">handleValidException</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取BindingResult对象</span>        BindingResult result <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>BizCodeEnum<span class="token punctuation">.</span>VALID_EXCEPTION<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>BizCodeEnum<span class="token punctuation">.</span>VALID_EXCEPTION<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-测试结果"><a href="#7-测试结果" class="headerlink" title="7.测试结果"></a>7.测试结果</h4><pre class="line-numbers language-json"><code class="language-json"># 新增请求携带id：<span class="token punctuation">{</span>    <span class="token property">"brandId"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"showStatus"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span># 结果<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"参数格式校验失败"</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">10001</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"brandId"</span><span class="token operator">:</span> <span class="token string">"新增操作品牌id不能为空"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"品牌名不能为空"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># 修改请求不携带id：<span class="token punctuation">{</span>    <span class="token property">"showStatus"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xiaomi"</span><span class="token punctuation">}</span># 结果：<span class="token punctuation">{</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"参数格式校验失败"</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">10001</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"brandId"</span><span class="token operator">:</span> <span class="token string">"修改操作品牌id不能为空"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="对于某些特殊字段-自带的校验注解无法支持。"><a href="#对于某些特殊字段-自带的校验注解无法支持。" class="headerlink" title="对于某些特殊字段,自带的校验注解无法支持。"></a>对于某些特殊字段,自带的校验注解无法支持。</h4><h3 id="这时候需要我们自己实现："><a href="#这时候需要我们自己实现：" class="headerlink" title="这时候需要我们自己实现："></a>这时候需要我们自己实现：</h3><h4 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 校验注解 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-编写注解类"><a href="#2-编写注解类" class="headerlink" title="2.编写注解类"></a>2.编写注解类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author: saber * @description: 自定义校验注解 */</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//这里需要指定校验器</span><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>ListValueConstraintValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ListValue</span> <span class="token punctuation">{</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"{javax.validation.constraints.NotBlank.message}"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-编写校验器"><a href="#3-编写校验器" class="headerlink" title="3.编写校验器"></a>3.编写校验器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author: saber * @description:校验器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListValueConstraintValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>ListValue<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保存注解上指定的值</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法 可以拿到注解标注的值 @ListValue(values = {1,2})     * @param listValue     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>ListValue listValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> listValue<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token operator">==</span>null <span class="token operator">||</span> values<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 校验操作     * @param integer 需要校验的值     * @param constraintValidatorContext     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">,</span> ConstraintValidatorContext constraintValidatorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-实体类标注注解"><a href="#4-实体类标注注解" class="headerlink" title="4.实体类标注注解"></a>4.实体类标注注解</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token annotation punctuation">@ListValue</span><span class="token punctuation">(</span>values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span>AddGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>UpdateGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">"只能为0或1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer sort<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"brandId"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"showStatus"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span># 结果：<span class="token punctuation">{</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"参数格式校验失败"</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">10001</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token string">"只能为0或1"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GateWay配置跨域</title>
      <link href="2020/08/06/GateWay%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F/"/>
      <url>2020/08/06/GateWay%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h4 id="gateway路径重写失效："><a href="#gateway路径重写失效：" class="headerlink" title="gateway路径重写失效："></a>gateway路径重写失效：</h4><h5 id="1-检查配置文件"><a href="#1-检查配置文件" class="headerlink" title="1.检查配置文件"></a>1.检查配置文件</h5><pre class="line-numbers language-yml"><code class="language-yml">spring:  cloud:      routes:    # 路由规则        - id: admin_route          uri: lb://renren-fast          predicates:  # 带上/api            - Path=/api/**          filters:              # 路径重写              # GateWay -version2.3之前的写法 具体参考官方文档#          - RewritePath=/api/(?<segment>/.*),/项目名（模块名）$\{segment}             # GateWay -version2.3之后的写法            - RewritePath=/api(?<segment>/?.*),/项目名（模块名）/$\{segment}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-检查是否加载使用了配置中心的配置文件"><a href="#3-检查是否加载使用了配置中心的配置文件" class="headerlink" title="3.检查是否加载使用了配置中心的配置文件"></a>3.检查是否加载使用了配置中心的配置文件</h5><h5 id="4-检查被访问服务是否有项目名前缀"><a href="#4-检查被访问服务是否有项目名前缀" class="headerlink" title="4.检查被访问服务是否有项目名前缀"></a>4.检查被访问服务是否有项目名前缀</h5><h5 id="5-检查路径是否需要权限认证"><a href="#5-检查路径是否需要权限认证" class="headerlink" title="5.检查路径是否需要权限认证"></a>5.检查路径是否需要权限认证</h5><hr><h4 id="跨域问题："><a href="#跨域问题：" class="headerlink" title="跨域问题："></a>跨域问题：</h4><p>出于安全考虑，远程调用遵循同源协议，简单来说就是<strong>协议名</strong>（http,https）、<strong>域名</strong>、<strong>端口名</strong>有任何一个不相同就会被禁止访问。</p><p>具体的方式是常见的请求会发送一个哨兵去探路，返回200表示真正的请求能够发出。如果不允许跨域则403</p><p><img src="https://i.loli.net/2020/08/06/ZxC6gByVan2bvSY.png" alt="99E_7RB4_35K294O_8@_1YO.png"></p><p><strong>常见的解决办法</strong>：</p><h5 id="第一种方式：把前端和后端都部署到nginx。（更安全）"><a href="#第一种方式：把前端和后端都部署到nginx。（更安全）" class="headerlink" title="第一种方式：把前端和后端都部署到nginx。（更安全）"></a>第一种方式：把前端和后端都部署到nginx。（更安全）</h5><p><img src="https://i.loli.net/2020/08/06/wlPfOLqE8DNS4gz.png" alt="7OX_8R_@ZL79_CM~KCB@@5R.png"></p><h5 id="第二种方式：配置网关允许跨域"><a href="#第二种方式：配置网关允许跨域" class="headerlink" title="第二种方式：配置网关允许跨域"></a>第二种方式：配置网关允许跨域</h5><p>第一种配置方式：注册bean</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置跨域     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsWebFilter <span class="token function">corsWebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CorsConfiguration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许的请求头 * 代表所有</span>        configuration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许的请求方式</span>        configuration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许的请求来源</span>        configuration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许携带cookie跨域</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种配置方式：配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 跨域配置</span>        <span class="token key atrule">cors-configurations</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 允许任意路径</span>          '<span class="token punctuation">[</span>/**<span class="token punctuation">]</span>'<span class="token punctuation">:</span>            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 允许携带cookie</span>            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token string">"*"</span>     <span class="token comment" spellcheck="true"># 允许任意来源</span>            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token string">"*"</span>     <span class="token comment" spellcheck="true"># 允许任意请求方式</span>            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">"*"</span>     <span class="token comment" spellcheck="true"># 允许任意请求头</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>再次测试：</strong>依然失败</p><p>![TI3TB__TCXW9DW`~6_PZ0WU.png](<a href="https://i.loli.net/2020/08/06/D1IldoLiMneVtK3.png">https://i.loli.net/2020/08/06/D1IldoLiMneVtK3.png</a>)</p><p><strong>原因：存在多份跨域配置</strong></p><p><strong>解决方法：删除模块里单独的跨域配置，由网关服务统一管理</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>stream流封装多级菜单</title>
      <link href="2020/08/05/stream%E6%B5%81%E5%B0%81%E8%A3%85%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95/"/>
      <url>2020/08/05/stream%E6%B5%81%E5%B0%81%E8%A3%85%E5%A4%9A%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询所有品牌分类并返回树形菜单 * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> <span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询出所有菜单</span>    List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> entities <span class="token operator">=</span> categoryDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//过滤 排序封装菜单</span>    List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> levelOneMenus <span class="token operator">=</span> entities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>menu<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                 menu<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">listCategoryChildren</span><span class="token punctuation">(</span>menu<span class="token punctuation">,</span>entities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> menu<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item1<span class="token punctuation">,</span>item2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> levelOneMenus<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 递归查找 返回当前菜单的子菜单 * @param entity 当前的菜单 * @param list   所有的菜单集合 * @return */</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> <span class="token function">listCategoryChildren</span><span class="token punctuation">(</span>CategoryEntity entity<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> list <span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>CategoryEntity<span class="token operator">></span> menu <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                item<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">listCategoryChildren</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> item1<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> menu<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>分布式微服务框架搭建</title>
      <link href="2020/08/04/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>2020/08/04/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h3 id="nacos、openFeign搭建分布式微服务"><a href="#nacos、openFeign搭建分布式微服务" class="headerlink" title="nacos、openFeign搭建分布式微服务"></a>nacos、openFeign搭建分布式微服务</h3><h3 id="一、集成nacos作为注册、配置中心"><a href="#一、集成nacos作为注册、配置中心" class="headerlink" title="一、集成nacos作为注册、配置中心"></a>一、集成nacos作为注册、配置中心</h3><h4 id="nacos作为注册中心："><a href="#nacos作为注册中心：" class="headerlink" title="nacos作为注册中心："></a>nacos作为注册中心：</h4><h5 id="1-引入nacos依赖"><a href="#1-引入nacos依赖" class="headerlink" title="1.引入nacos依赖"></a>1.引入nacos依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-启动类添加注解"><a href="#2-启动类添加注解" class="headerlink" title="2.启动类添加注解"></a>2.启动类添加注解</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xxx.xxx.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxApplication</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-编写配置"><a href="#3-编写配置" class="headerlink" title="3.编写配置"></a>3.编写配置</h5><pre class="line-numbers language-yml"><code class="language-yml">spring:   # 指定nacos地址   cloud:    nacos:      discovery:        server-addr: 192.168.58.1:8848    # 指定服务名 必须指定！否则无法在nacos注册  application:    name: mall-coupon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-启动nacos-启动应用-查看注册信息确保服务全部注册成功"><a href="#4-启动nacos-启动应用-查看注册信息确保服务全部注册成功" class="headerlink" title="4.启动nacos 启动应用 查看注册信息确保服务全部注册成功"></a>4.启动nacos 启动应用 查看注册信息确保服务全部注册成功</h5><hr><h4 id="nacos作为配置中心："><a href="#nacos作为配置中心：" class="headerlink" title="nacos作为配置中心："></a>nacos作为配置中心：</h4><h5 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- nacos配置中心 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-创建bootstrap-properties"><a href="#2-创建bootstrap-properties" class="headerlink" title="2.创建bootstrap.properties"></a>2.创建bootstrap.properties</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 当前服务名</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">mall-coupon</span><span class="token comment" spellcheck="true"># nacos地址</span><span class="token attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token attr-value">192.168.58.1:8848</span><span class="token comment" spellcheck="true"># 使用微服务名创建自己的命名空间，使用配置分组完成环境隔离dev test prod</span><span class="token comment" spellcheck="true"># 指定命名空间用于隔离环境</span><span class="token comment" spellcheck="true"># spring.cloud.nacos.config.namespace=5fb501da-315f-415b-9601-097719546e0f</span><span class="token comment" spellcheck="true"># 指定分组</span><span class="token comment" spellcheck="true"># spring.cloud.nacos.config.group=1111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-在nacos创建配置文件-默认规则-应用名-properties"><a href="#3-在nacos创建配置文件-默认规则-应用名-properties" class="headerlink" title="3.在nacos创建配置文件 默认规则 应用名.properties"></a>3.在nacos创建配置文件 默认规则 应用名.properties</h5><p>![K@J__X`1T<del>CAX3E_BBT</del>__G.png](<a href="https://i.loli.net/2020/08/04/uatNJh9qyGAf3Wk.png">https://i.loli.net/2020/08/04/uatNJh9qyGAf3Wk.png</a>)</p><h5 id="4-在conctroller添加注解-RefreshScope并编写代码"><a href="#4-在conctroller添加注解-RefreshScope并编写代码" class="headerlink" title="4.在conctroller添加注解@RefreshScope并编写代码"></a>4.在conctroller添加注解<strong>@RefreshScope</strong>并编写代码</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span> <span class="token comment" spellcheck="true">//动态刷新配置</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * &lt;description>测试配置中心&lt;/description>     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testNacosConfig"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">testNacosConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-启动测试"><a href="#5-启动测试" class="headerlink" title="5.启动测试"></a>5.启动测试</h5><img src="https://i.loli.net/2020/08/04/FyIauq3KHiECJRj.png" alt="`XG_82W~X_LI@3L_FB_2EXV.png"><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"saber"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"18"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-修改配置"><a href="#6-修改配置" class="headerlink" title="6.修改配置"></a>6.修改配置</h5><p><img src="https://i.loli.net/2020/08/04/NEapJI1fA3c4VWu.png" alt="3GC3U_9_GC__040BUPXQF~Q.png"></p><p>控制台提示配置已刷新</p><p>![44YDQ_RDF0__@_G`WA7BUA9.png](<a href="https://i.loli.net/2020/08/04/PXDxQgqVdTc5kUJ.png">https://i.loli.net/2020/08/04/PXDxQgqVdTc5kUJ.png</a>)</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span><span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"lancer"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h4 id="二、集成openFeign远程服务调用"><a href="#二、集成openFeign远程服务调用" class="headerlink" title="二、集成openFeign远程服务调用"></a>二、集成openFeign远程服务调用</h4><h5 id="1-引入openfeign依赖"><a href="#1-引入openfeign依赖" class="headerlink" title="1.引入openfeign依赖"></a>1.引入openfeign依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-编写接口-添加-FeignClient注解"><a href="#2-编写接口-添加-FeignClient注解" class="headerlink" title="2.编写接口 添加@FeignClient注解"></a>2.编写接口 添加@FeignClient注解</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"需要调用的服务名"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XxxFeignService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *  &lt;description>测试远程rpc调用&lt;/description>     *  和被调用的方法保持签名一致     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"方法路径"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-controller层直接注入XXXFeignService"><a href="#3-controller层直接注入XXXFeignService" class="headerlink" title="3.controller层直接注入XXXFeignService"></a>3.controller层直接注入XXXFeignService</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XxxController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> XxxFeignService xxxFeignService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  &lt;description>测试远程rpc调用&lt;/description>     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> xxxFeignService<span class="token punctuation">.</span><span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-启动类添加注解"><a href="#4-启动类添加注解" class="headerlink" title="4.启动类添加注解"></a>4.启动类添加注解</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.xxx.xxx.xxx"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//远程调用接口包</span><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment" spellcheck="true">//开启服务发现</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.xxx.xxx.xxx.dao"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-启动测试-1"><a href="#5-启动测试-1" class="headerlink" title="5.启动测试"></a>5.启动测试</h5><pre class="line-numbers language-xml"><code class="language-xml">如果远程服务掉线会提示 connect time out executing ......<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="三、集成Hystrix服务熔断"><a href="#三、集成Hystrix服务熔断" class="headerlink" title="三、集成Hystrix服务熔断"></a>三、集成Hystrix服务熔断</h4><p>![M@9N3DXA0XX1F`Y3~@ZM4_4.png](<a href="https://i.loli.net/2020/09/09/u1ctq9lkRCaJUET.png">https://i.loli.net/2020/09/09/u1ctq9lkRCaJUET.png</a>)</p><h5 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2.添加配置"></a>2.添加配置</h5><pre class="line-numbers language-xml"><code class="language-xml"># 开启服务熔断feign.hystrix.enabled=true# 设置超时时间hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=6000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-编写实体类实现远程调用接口"><a href="#3-编写实体类实现远程调用接口" class="headerlink" title="3.编写实体类实现远程调用接口"></a>3.编写实体类实现远程调用接口</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 远程阿里云视频操作接口 * @author saber */</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service-vod"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> VodFileDegradeFeignClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用的服务名称</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据视频id删除阿里云视频     * @PathVariable注解一定要指定参数名称，否则出错     * @param id     * @return     */</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/eduvod/video/removeAlyVideo/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">removeAlyVideo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 定义调用删除多个视频的方法     * @param videoIdList 参数多个视频id     * @return     */</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/eduvod/video/delete-batch"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">deleteBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"videoIdList"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> videoIdList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-feign接口添加兜底方法"><a href="#4-feign接口添加兜底方法" class="headerlink" title="4.feign接口添加兜底方法"></a>4.feign接口添加兜底方法</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>zjm<span class="token punctuation">.</span>commonutils<span class="token punctuation">.</span>result<span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zjm<span class="token punctuation">.</span>eduservice<span class="token punctuation">.</span>client<span class="token punctuation">.</span>VodClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 远程服务调用失败兜底方法 * @author saber */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodFileDegradeFeignClient</span> <span class="token keyword">implements</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> R <span class="token function">removeAlyVideo</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"删除视频出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> R <span class="token function">deleteBatch</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> videoIdList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"删除多个视频出错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ssm整合shiro</title>
      <link href="2020/07/25/ssm%E6%95%B4%E5%90%88shiro/"/>
      <url>2020/07/25/ssm%E6%95%B4%E5%90%88shiro/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/25/TCxpAZJwRkBEHLs.png" alt="shiro.png"></p><h4 id="1、在-maven-项目中引入-Shiro-依赖："><a href="#1、在-maven-项目中引入-Shiro-依赖：" class="headerlink" title="1、在 maven 项目中引入 Shiro 依赖："></a><strong>1、在 maven 项目中引入 Shiro 依赖：</strong></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- shiro  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 引入ehcache的依赖,给shiro做缓存权限用的 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.6&lt;/ve<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、在-web-xml-中配置-Shiro-的拦截器："><a href="#2、在-web-xml-中配置-Shiro-的拦截器：" class="headerlink" title="2、在 web.xml 中配置 Shiro 的拦截器："></a><strong>2、在 web.xml 中配置 Shiro 的拦截器：</strong></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置 shiro 拦截器  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>targetFilterLifecycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、在-spring-xml-中配置-Shiro-的核心组件和拦截规则："><a href="#3、在-spring-xml-中配置-Shiro-的核心组件和拦截规则：" class="headerlink" title="3、在 spring.xml 中配置 Shiro 的核心组件和拦截规则："></a><strong>3、在 spring.xml 中配置 Shiro 的核心组件和拦截规则：</strong></h4><h5 id="1）核心组件，并配置缓存和自己实现的Realm："><a href="#1）核心组件，并配置缓存和自己实现的Realm：" class="headerlink" title="1）核心组件，并配置缓存和自己实现的Realm："></a>1）核心组件，并配置缓存和自己实现的Realm：</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置 shiro 的核心组件：securityManager --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置缓存 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 配置域realm，用户名，密码，角色都保存在域里：实现从数据库中获取用户信息，需要我们自己创建一个类（实现Realm接口） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shiroRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置ehcache缓存bean，导入ehcache并新建配置文件 也可使用redis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.shiro.cache.ehcache.EhCacheManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheManagerConfigFile<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:ehcache.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置自己域realm实现  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置realm 需要一个实现realm的类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ShiroRealm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2）Shiro-拦截规则："><a href="#2）Shiro-拦截规则：" class="headerlink" title="2）Shiro 拦截规则："></a>2）Shiro 拦截规则：</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置ShiroFilter        id名和web.xml中的shiroFilter id必须一致        否则部署时抛出 NoSuchBeanDefinitionException--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- securityManager 权限认证失败，则跳转到指定页面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 登录页面 不存在的页面也会被重定向到该页面--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 登录成功页面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>successUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/index<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 无权限页面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unauthorizedUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/unauthorized<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置受保护的页面，已经访问这些页面所需要的权限 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注意：规则是有顺序的，从上到下，拦截范围必须是从小到大的 --></span>        <span class="token comment" spellcheck="true">&lt;!-- anon:可以被匿名访问 --></span>        /login = anon        /logout = logout        <span class="token comment" spellcheck="true">&lt;!-- authc:必须登陆之后才能访问 --></span>        /admin/** = authc        /**                            = authc        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、在-springmvc-xml-中配置-Shiro-的注释："><a href="#4、在-springmvc-xml-中配置-Shiro-的注释：" class="headerlink" title="4、在 springmvc.xml 中配置 Shiro 的注释："></a><strong>4、在 springmvc.xml 中配置 Shiro 的注释：</strong></h4><h5 id="使用-shiro-注解一般在-controller-中"><a href="#使用-shiro-注解一般在-controller-中" class="headerlink" title="使用 shiro 注解一般在 controller 中"></a>使用 shiro 注解一般在 controller 中</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置shiro开启注解支持 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lifecycleBeanPostProcessor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.LifecycleBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class="token punctuation">"</span></span>          <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lifecycleBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、LoginController-实现-访问控制："><a href="#5、LoginController-实现-访问控制：" class="headerlink" title="5、LoginController 实现 访问控制："></a><strong>5、LoginController 实现 访问控制：</strong></h4><p> 登录 index.jsp 页面，访问 url 可以是 项目根路径(主要是注销是自动返回web根目录)，也可以是 /login</p><h5 id="1）获取到shiro的认证核心组件Subject接口的对象（这个对象封装了登录用户对象信息），并调用Subjent接口的实现对象的login方法来验证用户名和密码，"><a href="#1）获取到shiro的认证核心组件Subject接口的对象（这个对象封装了登录用户对象信息），并调用Subjent接口的实现对象的login方法来验证用户名和密码，" class="headerlink" title="1）获取到shiro的认证核心组件Subject接口的对象（这个对象封装了登录用户对象信息），并调用Subjent接口的实现对象的login方法来验证用户名和密码，"></a>1）获取到shiro的认证核心组件Subject接口的对象（这个对象封装了登录用户对象信息），并调用Subjent接口的实现对象的login方法来验证用户名和密码，</h5><h5 id="2）注意：Subjent接口的实现对象的-login-方法，实质上是将参数-token（含有登录用户对象信息）传到我们自定义的ShiroRealm-类中的实现方法里处理"><a href="#2）注意：Subjent接口的实现对象的-login-方法，实质上是将参数-token（含有登录用户对象信息）传到我们自定义的ShiroRealm-类中的实现方法里处理" class="headerlink" title="2）注意：Subjent接口的实现对象的 login 方法，实质上是将参数 token（含有登录用户对象信息）传到我们自定义的ShiroRealm 类中的实现方法里处理"></a>2）注意：Subjent接口的实现对象的 login 方法，实质上是将参数 token（含有登录用户对象信息）传到我们自定义的ShiroRealm 类中的实现方法里处理</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/login"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用 shiro 登录验证</span>        <span class="token comment" spellcheck="true">//1 认证的核心组件：获取 Subject 对象</span>        Subject subject <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 将登陆表单封装成 token 对象</span>        UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPazzword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3 让 shiro 框架进行登录验证：</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"loginError"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/admin/index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/admin/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">admin</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"admin/index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 Shiro 拦截规则 的跳转 url 保持一致，jsp页面简单写了几个字</p><p><img src="https://img-blog.csdnimg.cn/20190228103721872.png" alt=""></p><h4 id="6、自定义-ShiroRealm-实现："><a href="#6、自定义-ShiroRealm-实现：" class="headerlink" title="6、自定义 ShiroRealm 实现："></a><strong>6、自定义 ShiroRealm 实现：</strong></h4><p>如果<strong>实现 Realm 接口</strong>，参数 token 会被传递到 supports 方法上</p><p>继承 <strong>AuthenticatingRealm</strong> 类，参数 token 会被传递到 <strong>doGetAuthenticationInfo</strong> 方法上</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthenticatingRealm</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  登录的验证实现方法     * @param token     * @return     * @throws AuthenticationException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        UsernamePasswordToken token2 <span class="token operator">=</span> <span class="token punctuation">(</span>UsernamePasswordToken<span class="token punctuation">)</span> token<span class="token punctuation">;</span>        String username <span class="token operator">=</span> token2<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码有误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">(</span><span class="token string">"用户名已被禁用，请联系系统管理员！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * principals: 可以使用户名，或d登录用户的对象         * hashedCredentials: 从数据库中获取的密码         * credentialsSalt：密码加密的盐值         * RealmName:  类名（ShiroRealm）         */</span>        AuthenticationInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPazzword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//框架完成验证</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="shiro-登录步骤分析"><a href="#shiro-登录步骤分析" class="headerlink" title="shiro 登录步骤分析:"></a>shiro 登录步骤分析:</h4><h5 id="1）表单提交后进入login方法后-调用-subject-login-token"><a href="#1）表单提交后进入login方法后-调用-subject-login-token" class="headerlink" title="1）表单提交后进入login方法后 调用 subject.login(token);"></a>1）表单提交后进入login方法后 调用 subject.login(token);</h5><p><img src="https://img-blog.csdnimg.cn/20190301103821902.png" alt=""></p><h5 id="2）Subject-是通过-securityManager-调用-login-方法-来进行登录操作"><a href="#2）Subject-是通过-securityManager-调用-login-方法-来进行登录操作" class="headerlink" title="2）Subject 是通过 securityManager 调用 login() 方法 来进行登录操作"></a>2）Subject 是通过 securityManager 调用 login() 方法 来进行登录操作</h5><p><img src="https://img-blog.csdnimg.cn/20190301104227765.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190301104312474.png" alt=""></p><h5 id="3）-DefaultSecurityManager-类"><a href="#3）-DefaultSecurityManager-类" class="headerlink" title="3） DefaultSecurityManager 类"></a>3） DefaultSecurityManager 类</h5><p> 该方法里会验证登录信息，如果登录通过会返回登录信息，如不通过则抛出异常；authenticate 方法定义在父类AuthenticatingSecurityManager 中；</p><p><img src="https://img-blog.csdnimg.cn/20190301104527760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAyODU0,size_16,color_FFFFFF,t_70" alt=""></p><h5 id="4）AuthenticatingSecurityManager-类"><a href="#4）AuthenticatingSecurityManager-类" class="headerlink" title="4）AuthenticatingSecurityManager 类"></a>4）AuthenticatingSecurityManager 类</h5><p><img src="https://img-blog.csdnimg.cn/20190301105327873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAyODU0,size_16,color_FFFFFF,t_70" alt=""></p><h5 id="5）AbstractAuthenticator-类"><a href="#5）AbstractAuthenticator-类" class="headerlink" title="5）AbstractAuthenticator 类"></a>5）AbstractAuthenticator 类</h5><p><img src="https://img-blog.csdnimg.cn/20190301111316794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAyODU0,size_16,color_FFFFFF,t_70" alt=""></p><h5 id="6）ModularRealmAuthenticator-类"><a href="#6）ModularRealmAuthenticator-类" class="headerlink" title="6）ModularRealmAuthenticator 类"></a><strong>6）ModularRealmAuthenticator 类</strong></h5><p> 4、5 的 <strong>authenticate</strong> 方法 都交给了 这个类的 <strong>doAuthenticate</strong> 方法执行(单个realm的处理方法 <strong>doSingleRealmAuthentication</strong>)</p><p><img src="https://img-blog.csdnimg.cn/20190301111948175.png" alt=""></p><h5 id="7）ModularRealmAuthenticator-类"><a href="#7）ModularRealmAuthenticator-类" class="headerlink" title="7）ModularRealmAuthenticator 类"></a>7）ModularRealmAuthenticator 类</h5><p>红色标记部分，就是真正的<strong>调用Reaml来实现登录</strong></p><p><img src="https://img-blog.csdnimg.cn/20190301112026568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAyODU0,size_16,color_FFFFFF,t_70" alt=""></p><h5 id="8）AuthenticatingRealm-类"><a href="#8）AuthenticatingRealm-类" class="headerlink" title="8）AuthenticatingRealm 类"></a><strong>8）AuthenticatingRealm 类</strong></h5><h5 id="第一个标记是从缓存中查看，该用户是否已经登录。如果已经登录怎么直接完成了登录流程；"><a href="#第一个标记是从缓存中查看，该用户是否已经登录。如果已经登录怎么直接完成了登录流程；" class="headerlink" title="第一个标记是从缓存中查看，该用户是否已经登录。如果已经登录怎么直接完成了登录流程；"></a>第一个标记是从缓存中查看，该用户是否已经登录。如果已经登录怎么直接完成了登录流程；</h5><h5 id="第二个标记是根据用户信息，去获取数据库保存的该用户的密码等信息；"><a href="#第二个标记是根据用户信息，去获取数据库保存的该用户的密码等信息；" class="headerlink" title="第二个标记是根据用户信息，去获取数据库保存的该用户的密码等信息；"></a>第二个标记是根据用户信息，去获取数据库保存的该用户的密码等信息；</h5><h5 id="第三个标记是利用第二个标记得到的数据库该用户的信息和本次登录该用户的信息经行比较，如果正确则验证通过，返回用户信息。如果不通过则验证失败，登录不成功，抛出错误"><a href="#第三个标记是利用第二个标记得到的数据库该用户的信息和本次登录该用户的信息经行比较，如果正确则验证通过，返回用户信息。如果不通过则验证失败，登录不成功，抛出错误" class="headerlink" title="第三个标记是利用第二个标记得到的数据库该用户的信息和本次登录该用户的信息经行比较，如果正确则验证通过，返回用户信息。如果不通过则验证失败，登录不成功，抛出错误"></a>第三个标记是利用第二个标记得到的数据库该用户的信息和本次登录该用户的信息经行比较，如果正确则验证通过，返回用户信息。如果不通过则验证失败，登录不成功，抛出错误</h5><p><img src="https://img-blog.csdnimg.cn/20190301112531602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNDAyODU0,size_16,color_FFFFFF,t_70" alt=""></p><hr><h4 id="Shiro如何完成验证："><a href="#Shiro如何完成验证：" class="headerlink" title="Shiro如何完成验证："></a>Shiro如何完成验证：</h4><p>1）在 UsernamePasswordToken 类的 方法打断点</p><p><img src="https://img-blog.csdnimg.cn/20190301113629187.png" alt=""></p><p>2）在 SimpleCredentialsMatcher 类 打断点：</p><p><img src="https://img-blog.csdnimg.cn/20190301113709918.png" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20190301113918596.png" alt=""></p><h5 id="3）shiro进行对比密码的是一个接口：CredentialsMatcher"><a href="#3）shiro进行对比密码的是一个接口：CredentialsMatcher" class="headerlink" title="3）shiro进行对比密码的是一个接口：CredentialsMatcher"></a>3）shiro进行对比密码的是一个接口：CredentialsMatcher</h5><p>此接口的实现类：</p><p><strong>SimpleCredentialsMatcher</strong>：<strong>没有对密码进行加密</strong>，</p><p><strong>HashedCredentialsMatcher</strong>： <strong>实现了对密码的加密</strong></p><p><strong>返回结果后，如果密码对比正确，跳转到登录成功后的页面</strong></p><p><strong>密码对比不正确，抛出异常：IncorrectCredentialsException</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql基础</title>
      <link href="2020/07/14/mysql%E5%9F%BA%E7%A1%80/"/>
      <url>2020/07/14/mysql%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h4 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h4><p>​    1、DB：数据库，保存一组有组织的数据的容器<br>​    2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>​    3、SQL:结构化查询语言，用于和DBMS通信的语言</p><h4 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h4><p>​    1、将数据放到表中，表再放到库中<br>​    2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>​    3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>​    4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>​    5、表中的数据是按行存储的，每一行类似于java中的“对象”。<br>​    </p><h4 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span>查看当前所有的数据库<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>打开指定的库<span class="token keyword">use</span> 库名<span class="token number">3</span><span class="token punctuation">.</span>查看当前库的所有表<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>查看其它库的所有表<span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token keyword">from</span> 库名<span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">.</span>创建表<span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    列名 列类型<span class="token punctuation">,</span>    列名 列类型，    。。。<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6</span><span class="token punctuation">.</span>查看表结构<span class="token keyword">desc</span> 表名<span class="token punctuation">;</span><span class="token number">7</span><span class="token punctuation">.</span>查看服务器的版本方式一：登录到mysql服务端<span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>方式二：没有登录到mysql服务端mysql <span class="token comment" spellcheck="true">--version</span>或mysql <span class="token comment" spellcheck="true">--V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h4><p>​    1.不区分大小写,但建议关键字大写，表名、列名小写<br>​    2.每条命令最好用分号结尾<br>​    3.每条命令根据需要，可以进行缩进 或换行<br>​    4.注释<br>​        单行注释：# 注释文字<br>​        单行注释：– 注释文字<br>​        多行注释：/* 注释文字  */<br>​<br>​<br>​    </p><h4 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h4><h5 id="DQL（Data-Query-Language）：数据查询语言"><a href="#DQL（Data-Query-Language）：数据查询语言" class="headerlink" title="DQL（Data Query Language）：数据查询语言"></a>DQL（Data Query Language）：数据查询语言</h5><p>​        select </p><h5 id="DML-Data-Manipulate-Language-数据操作语言"><a href="#DML-Data-Manipulate-Language-数据操作语言" class="headerlink" title="DML(Data Manipulate Language):数据操作语言"></a>DML(Data Manipulate Language):数据操作语言</h5><p>​        insert 、update、delete</p><h5 id="DDL（Data-Define-Languge）：数据定义语言"><a href="#DDL（Data-Define-Languge）：数据定义语言" class="headerlink" title="DDL（Data Define Languge）：数据定义语言"></a>DDL（Data Define Languge）：数据定义语言</h5><p>​        create、drop、alter</p><h5 id="TCL（Transaction-Control-Language）：事务控制语言"><a href="#TCL（Transaction-Control-Language）：事务控制语言" class="headerlink" title="TCL（Transaction Control Language）：事务控制语言"></a>TCL（Transaction Control Language）：事务控制语言</h5><p>​        commit、rollback<br>​    </p><h4 id="SQL的常见命令"><a href="#SQL的常见命令" class="headerlink" title="SQL的常见命令"></a>SQL的常见命令</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span>； <span class="token comment" spellcheck="true">--查看所有的数据库</span><span class="token keyword">use</span> 库名； <span class="token comment" spellcheck="true">--打开指定 的库</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--显示库中的所有表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token keyword">from</span> <span class="token comment" spellcheck="true">--库名;显示指定库中的所有表</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    字段名 字段类型<span class="token punctuation">,</span>        字段名 字段类型<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--创建表</span><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--查看指定表的结构</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token comment" spellcheck="true">--表名;显示表中的所有数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DQL基础查询"><a href="#DQL基础查询" class="headerlink" title="DQL基础查询"></a>DQL基础查询</h4><p>​    语法：<br>​    SELECT 要查询的东西<br>​    【FROM 表名】;</p><pre><code>类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数</code></pre><h4 id="DQL条件查询"><a href="#DQL条件查询" class="headerlink" title="DQL条件查询"></a>DQL条件查询</h4><pre class="line-numbers language-sql"><code class="language-sql">条件查询：根据条件过滤原始表的数据，查询到想要的数据语法：<span class="token keyword">select</span>     要查询的字段<span class="token operator">|</span>表达式<span class="token operator">|</span>常量值<span class="token operator">|</span>函数<span class="token keyword">from</span>     表<span class="token keyword">where</span>     条件 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">分类：一、条件表达式    示例：salary<span class="token operator">></span><span class="token number">10000</span>    条件运算符：    <span class="token operator">></span> <span class="token operator">&lt;</span> <span class="token operator">>=</span> <span class="token operator">&lt;=</span> <span class="token operator">=</span> <span class="token operator">!=</span> <span class="token operator">&lt;></span>二、逻辑表达式示例：salary<span class="token operator">></span><span class="token number">10000</span> <span class="token operator">&amp;&amp;</span> salary<span class="token operator">&lt;</span><span class="token number">20000</span>逻辑运算符：    <span class="token operator">and</span>（<span class="token operator">&amp;&amp;</span>）:两个条件如果同时成立，结果为<span class="token boolean">true</span>，否则为<span class="token boolean">false</span>    <span class="token operator">or</span><span class="token punctuation">(</span><span class="token operator">||</span><span class="token punctuation">)</span>：两个条件只要有一个成立，结果为<span class="token boolean">true</span>，否则为<span class="token boolean">false</span>    <span class="token operator">not</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">)</span>：如果条件成立，则<span class="token operator">not</span>后为<span class="token boolean">false</span>，否则为<span class="token boolean">true</span>三、模糊查询示例：last_name <span class="token operator">like</span> <span class="token string">'a%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DQL排序查询"><a href="#DQL排序查询" class="headerlink" title="DQL排序查询"></a>DQL排序查询</h4><pre class="line-numbers language-sql"><code class="language-sql">语法：<span class="token keyword">select</span>    要查询的东西<span class="token keyword">from</span>    表<span class="token keyword">where</span>     条件<span class="token keyword">order</span> <span class="token keyword">by</span> 排序的字段<span class="token operator">|</span>表达式<span class="token operator">|</span>函数<span class="token operator">|</span>别名 【<span class="token keyword">asc</span><span class="token operator">|</span><span class="token keyword">desc</span>】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><h5 id="一、单行函数"><a href="#一、单行函数" class="headerlink" title="一、单行函数:"></a>一、单行函数:</h5><p>​    1、字符函数</p><pre class="line-numbers language-sql"><code class="language-sql">concat    <span class="token comment" spellcheck="true">--拼接</span>substr    <span class="token comment" spellcheck="true">--截取子串</span>upper    <span class="token comment" spellcheck="true">--转换成大写</span>lower    <span class="token comment" spellcheck="true">--转换成小写</span>trim    <span class="token comment" spellcheck="true">--去前后指定的空格和字符</span>ltrim    <span class="token comment" spellcheck="true">--去左边空格</span>rtrim    <span class="token comment" spellcheck="true">--去右边空格</span>replace    <span class="token comment" spellcheck="true">--替换</span>lpad    <span class="token comment" spellcheck="true">--左填充</span>rpad    <span class="token comment" spellcheck="true">--右填充</span>instr    <span class="token comment" spellcheck="true">--返回子串第一次出现的索引</span>length     <span class="token comment" spellcheck="true">--获取字节个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2、数学函数    </p><pre class="line-numbers language-SQL"><code class="language-SQL">round         --四舍五入rand         --随机数floor        --向下取整ceil        --向上取整mod            --取余truncate    --截断<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、日期函数</p><pre class="line-numbers language-SQL"><code class="language-SQL">now            --当前系统日期+时间curdate        --当前系统日期curtime        --当前系统时间str_to_date --将字符转换成日期date_format    --将日期转换成字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、流程控制函数</p><pre class="line-numbers language-SQL"><code class="language-SQL">if             --处理双分支case语句           --处理多分支    情况1：     --处理等值判断    情况2：    --处理条件判断<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、其他函数</p><pre class="line-numbers language-SQL"><code class="language-SQL">version        --版本database    --当前库user        --当前连接用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>二、分组函数</p><pre class="line-numbers language-SQL"><code class="language-SQL">sum     --求和max     --最大值min     --最小值avg     --平均值count     --计数    特点：    1、以上五个分组函数都忽略null值，除了count(*)    2、sum和avg一般用于处理数值型        max、min、count可以处理任何数据类型    3、都可以搭配distinct使用，用于统计去重后的结果    4、count的参数可以支持：        字段、*、常量值，一般放1       建议使用 count(*)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><pre class="line-numbers language-SQL"><code class="language-SQL">语法：    select         查询的字段，分组函数    from        表    group by         分组的字段        特点：            1、可以按单个字段分组            2、和分组函数一同查询的字段最好是分组后的字段            3、分组筛选                    针对的表     位置               关键字          分组前筛选：原始表          group by的前面    where          分组后筛选：分组后的结果集    group by的后面      having            4、可以按多个字段分组，字段之间用逗号隔开            5、可以支持排序            6、having后可以支持别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h4><pre><code>笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件</code></pre><h5 id="一、传统模式下的连接-：等值连接——非等值连接"><a href="#一、传统模式下的连接-：等值连接——非等值连接" class="headerlink" title="一、传统模式下的连接 ：等值连接——非等值连接"></a>一、传统模式下的连接 ：等值连接——非等值连接</h5><pre><code>1.等值连接的结果 = 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能</code></pre><h5 id="二、sql99语法：通过join关键字实现连接"><a href="#二、sql99语法：通过join关键字实现连接" class="headerlink" title="二、sql99语法：通过join关键字实现连接"></a>二、sql99语法：通过join关键字实现连接</h5><pre class="line-numbers language-SQL"><code class="language-SQL">含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on  连接条件【inner|left outer|right outer|cross】join 表3 on  连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三、自连接"><a href="#三、自连接" class="headerlink" title="三、自连接"></a>三、自连接</h5><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><pre class="line-numbers language-SQL"><code class="language-SQL">SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.`manager_id`=m.`employee_id`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>sql92</p><pre class="line-numbers language-SQL"><code class="language-SQL">SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.`manager_id`=m.`employee_id`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>含义：</p><pre><code>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询</code></pre><p>特点：</p><pre><code>1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all往往可以用其他查询代替</code></pre><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>应用场景：</p><pre><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></pre><p>语法：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：</p><pre><code>1.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page</code></pre><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><p>引入：<br>    union 联合、合并</p><p>语法：</p><pre class="line-numbers language-SQL"><code class="language-SQL">select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重</code></pre><h4 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h4><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><pre class="line-numbers language-SQL"><code class="language-SQL">语法：    insert into 表名(字段名，...)    values(值1，...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特点：</p><pre><code>1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><h5 id="修改单表语法："><a href="#修改单表语法：" class="headerlink" title="修改单表语法："></a>修改单表语法：</h5><pre class="line-numbers language-SQL"><code class="language-SQL">update 表名 set 字段=新值,字段=新值【where 条件】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改多表语法："><a href="#修改多表语法：" class="headerlink" title="修改多表语法："></a>修改多表语法：</h5><pre class="line-numbers language-SQL"><code class="language-SQL">update 表1 别名1,表2 别名2set 字段=新值，字段=新值where 连接条件and 筛选条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>方式1：delete语句 </p><pre class="line-numbers language-SQL"><code class="language-SQL">单表的删除： ★    delete from 表名 【where 筛选条件】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-SQL"><code class="language-SQL">多表的删除：    delete 别名1，别名2    from 表1 别名1，表2 别名2    where 连接条件    and 筛选条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式2：truncate语句</p><pre class="line-numbers language-SQL"><code class="language-SQL">truncate table 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两种方式的区别【面试题】</p><pre><code># 1.truncate不能加where条件，而delete可以加where条件# 2.truncate的效率高一丢丢# 3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始# delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始# 4.truncate删除不能回滚，delete删除可以回滚</code></pre><h4 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h4><h4 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h4><h5 id="库的管理："><a href="#库的管理：" class="headerlink" title="库的管理："></a>库的管理：</h5><pre class="line-numbers language-SQL"><code class="language-SQL">一、创建库create database 库名二、删除库drop database 库名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表的管理：</p><h5 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h5><pre class="line-numbers language-SQL"><code class="language-SQL">CREATE TABLE IF NOT EXISTS stuinfo(    stuId INT,    stuName VARCHAR(20),    gender CHAR,    bornDate DATETIME    );DESC studentinfo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-修改表-alter"><a href="#2-修改表-alter" class="headerlink" title="2.修改表 alter"></a>2.修改表 alter</h5><pre class="line-numbers language-SQL"><code class="language-SQL">语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;# ①修改字段名ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;# ②修改表名ALTER TABLE stuinfo RENAME [TO]  studentinfo;# ③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;# ④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;# ⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-删除表"><a href="#3-删除表" class="headerlink" title="3.删除表"></a>3.删除表</h5><pre><code>DROP TABLE [IF EXISTS] studentinfo;</code></pre><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><p>常见类型</p><pre><code>整型：小数：    浮点型    定点型字符型：日期型：Blob类型：</code></pre><h4 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">NOT</span> <span class="token boolean">NULL</span>         <span class="token comment" spellcheck="true">--非空</span><span class="token keyword">DEFAULT</span>             <span class="token comment" spellcheck="true">--默认值</span><span class="token keyword">UNIQUE</span>             <span class="token comment" spellcheck="true">--唯一</span><span class="token keyword">CHECK</span>             <span class="token comment" spellcheck="true">--检查（mysql不支持，只是为了与其他数据库兼容才保留的）</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>        <span class="token comment" spellcheck="true">--主键</span><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span>        <span class="token comment" spellcheck="true">--外键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h4><p>通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><p><strong>特点（ACID）</strong>：<br>    原子性：要么都执行，要么都回滚<br>    一致性：保证数据的状态操作前和操作后保持一致<br>    隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰<br>    持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p><h5 id="相关步骤："><a href="#相关步骤：" class="headerlink" title="相关步骤："></a>相关步骤：</h5><pre><code>1、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务</code></pre><h5 id="事务的分类："><a href="#事务的分类：" class="headerlink" title="事务的分类："></a>事务的分类：</h5><p><strong>隐式事务</strong>，没有明显的开启和结束事务的标志</p><pre><code>比如insert、update、delete语句本身就是一个事务</code></pre><p><strong>显式事务</strong>，具有明显的开启和结束事务的标志</p><pre><code>    1、开启事务    取消自动提交事务的功能    2、编写事务的一组逻辑操作单元（多条sql语句）    insert    update    delete    3、提交事务或回滚事务</code></pre><h5 id="使用到的关键字"><a href="#使用到的关键字" class="headerlink" title="使用到的关键字"></a>使用到的关键字</h5><pre><code>set autocommit=0;start transaction;commit;rollback;savepoint  断点commit to 断点rollback to 断点</code></pre><h5 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别:"></a>事务的隔离级别:</h5><p><strong>事务并发问题如何发生？</strong></p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p><strong>事务的并发问题有哪些？</strong></p><pre><code>脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</code></pre><p><strong>如何避免事务的并发问题？</strong></p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读</code></pre><p><strong>设置隔离级别：</strong></p><pre><code>set session|global  transaction isolation level 隔离级别名;</code></pre><p><strong>查看隔离级别：</strong></p><pre><code>select @@tx_isolation;</code></pre><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>含义：理解成一张虚拟的表</p><table><thead><tr><th align="center">视图与表的比较</th><th align="center">使用方式</th><th align="center">占用物理空间</th></tr></thead><tbody><tr><td align="center">视图</td><td align="center">完全相同</td><td align="center">不占用，仅仅保存的是sql逻辑</td></tr><tr><td align="center">表</td><td align="center">完全相同</td><td align="center">占用</td></tr></tbody></table><h5 id="视图的好处："><a href="#视图的好处：" class="headerlink" title="视图的好处："></a><strong>视图的好处：</strong></h5><pre><code>1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性</code></pre><p><strong>视图的创建</strong></p><pre class="line-numbers language-sql"><code class="language-sql">语法：<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span>  视图名<span class="token keyword">AS</span>查询语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="视图的增删改查"><a href="#视图的增删改查" class="headerlink" title="视图的增删改查"></a>视图的增删改查</h5><h5 id="1、查看视图的数据-★"><a href="#1、查看视图的数据-★" class="headerlink" title="1、查看视图的数据 ★"></a>1、查看视图的数据 ★</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_v4<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_v1 <span class="token keyword">WHERE</span> last_name<span class="token operator">=</span><span class="token string">'Partners'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2、插入视图的数据"><a href="#2、插入视图的数据" class="headerlink" title="2、插入视图的数据"></a>2、插入视图的数据</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> my_v4<span class="token punctuation">(</span>last_name<span class="token punctuation">,</span>department_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'虚竹'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3、修改视图的数据"><a href="#3、修改视图的数据" class="headerlink" title="3、修改视图的数据"></a>3、修改视图的数据</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> my_v4 <span class="token keyword">SET</span> last_name <span class="token operator">=</span><span class="token string">'梦姑'</span> <span class="token keyword">WHERE</span> last_name<span class="token operator">=</span><span class="token string">'虚竹'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4、删除视图的数据"><a href="#4、删除视图的数据" class="headerlink" title="4、删除视图的数据"></a>4、删除视图的数据</h5><pre><code>DELETE FROM my_v4;</code></pre><h5 id="某些视图不能更新"><a href="#某些视图不能更新" class="headerlink" title="### 某些视图不能更新**"></a>### 某些视图不能更新**</h5><pre class="line-numbers language-sql"><code class="language-sql">包含以下关键字的sql语句：分组函数、<span class="token keyword">distinct</span>、<span class="token keyword">group</span>  <span class="token keyword">by</span>、<span class="token keyword">having</span>、<span class="token keyword">union</span>或者<span class="token keyword">union</span> <span class="token keyword">all</span>    常量视图    <span class="token keyword">Select</span>中包含子查询    <span class="token keyword">join</span>    <span class="token keyword">from</span>一个不能更新的视图    <span class="token keyword">where</span>子句的子查询引用了<span class="token keyword">from</span>子句中的表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="视图逻辑的更新"><a href="#视图逻辑的更新" class="headerlink" title="视图逻辑的更新"></a>视图逻辑的更新</h5><p>​    </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--方式一：</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">VIEW</span> test_v7<span class="token keyword">AS</span><span class="token keyword">SELECT</span> last_name <span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--方式二:</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> test_v7<span class="token keyword">AS</span><span class="token keyword">SELECT</span> employee_id <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_v7<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="视图的删除"><a href="#视图的删除" class="headerlink" title="视图的删除"></a>视图的删除</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> test_v1<span class="token punctuation">,</span>test_v2<span class="token punctuation">,</span>test_v3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="视图结构的查看"><a href="#视图结构的查看" class="headerlink" title="视图结构的查看"></a>视图结构的查看</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DESC</span> test_v7<span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> test_v7<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数</code></pre><p>分类：</p><pre><code>1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个</code></pre><h5 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h5><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名<span class="token punctuation">(</span><span class="token operator">in</span><span class="token operator">|</span><span class="token keyword">out</span><span class="token operator">|</span><span class="token keyword">inout</span> 参数名  参数类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    存储过程体<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类似于方法：</p><pre class="line-numbers language-java"><code class="language-java">修饰符 返回类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    方法体<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span>、需要设置新的结束标记<span class="token keyword">delimiter</span> 新的结束标记示例：<span class="token keyword">delimiter</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名<span class="token punctuation">(</span><span class="token operator">IN</span><span class="token operator">|</span><span class="token keyword">OUT</span><span class="token operator">|</span><span class="token keyword">INOUT</span> 参数名  参数类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    sql语句<span class="token number">1</span><span class="token punctuation">;</span>    sql语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">END</span> $<span class="token number">2</span>、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略<span class="token keyword">begin</span> <span class="token keyword">end</span><span class="token number">3</span>、参数前面的符号的意思<span class="token operator">in</span>:该参数只能作为输入 （该参数不能做返回值）<span class="token keyword">out</span>：该参数只能作为输出（该参数只能做返回值）<span class="token keyword">inout</span>：既能做输入又能做输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">call</span> 存储过程名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h5><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 函数名<span class="token punctuation">(</span>参数名 参数类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> 返回类型<span class="token keyword">BEGIN</span>    函数体<span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="### 调用函数"></a>### 调用函数</h5><pre><code>    SELECT 函数名（实参列表）</code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><table><thead><tr><th align="center">函数和存储过程的区别</th><th align="center">关键字</th><th align="center">调用语法</th><th align="center">返回值</th><th align="center">应用场景</th></tr></thead><tbody><tr><td align="center">函数</td><td align="center">FUNCTION</td><td align="center">SELECT 函数()</td><td align="center">只能是一个</td><td align="center">一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</td></tr><tr><td align="center">存储过程</td><td align="center">PROCEDURE</td><td align="center">CALL存储过程()</td><td align="center">可以有0个或多个</td><td align="center">一般用于更新</td></tr></tbody></table><h4 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h4><p><strong>系统变量</strong></p><h5 id="一、全局变量"><a href="#一、全局变量" class="headerlink" title="一、全局变量"></a>一、全局变量</h5><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><pre class="line-numbers language-sql"><code class="language-sql">查看所有全局变量<span class="token keyword">SHOW</span> <span class="token keyword">GLOBAL</span> VARIABLES<span class="token punctuation">;</span>查看满足条件的部分系统变量<span class="token keyword">SHOW</span> <span class="token keyword">GLOBAL</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'%char%'</span><span class="token punctuation">;</span>查看指定的系统变量的值<span class="token keyword">SELECT</span> @<span class="token variable">@global.autocommit</span><span class="token punctuation">;</span>为某个系统变量赋值<span class="token keyword">SET</span> @<span class="token variable">@global.autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> autocommit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二、会话变量"><a href="#二、会话变量" class="headerlink" title="二、会话变量"></a>二、会话变量</h5><p>作用域：针对于当前会话（连接）有效</p><pre class="line-numbers language-sql"><code class="language-sql">查看所有会话变量<span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> VARIABLES<span class="token punctuation">;</span>查看满足条件的部分会话变量<span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'%char%'</span><span class="token punctuation">;</span>查看指定的会话变量的值<span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> @<span class="token variable">@session.tx_isolation</span><span class="token punctuation">;</span>为某个会话变量赋值<span class="token keyword">SET</span> @<span class="token variable">@session.tx_isolation</span><span class="token operator">=</span><span class="token string">'read-uncommitted'</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> tx_isolation<span class="token operator">=</span><span class="token string">'read-committed'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a><strong>自定义变量</strong></h5><h5 id="一、用户变量"><a href="#一、用户变量" class="headerlink" title="一、用户变量"></a>一、用户变量</h5><p>声明并初始化：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> @变量名<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">SET</span> @变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">SELECT</span> @变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>赋值：</p><pre class="line-numbers language-sql"><code class="language-sql">方式一：一般用于赋简单的值<span class="token keyword">SET</span> 变量名<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">SET</span> 变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">SELECT</span> 变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span>方式二：一般用于赋表 中的字段值<span class="token keyword">SELECT</span> 字段名或表达式 <span class="token keyword">INTO</span> 变量<span class="token keyword">FROM</span> 表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre><code>select @变量名;</code></pre><h5 id="二、局部变量"><a href="#二、局部变量" class="headerlink" title="二、局部变量"></a>二、局部变量</h5><p>声明：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">declare</span> 变量名 类型 【<span class="token keyword">default</span> 值】<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>赋值：</p><pre class="line-numbers language-sql"><code class="language-sql">方式一：一般用于赋简单的值<span class="token keyword">SET</span> 变量名<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">SET</span> 变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token keyword">SELECT</span> 变量名:<span class="token operator">=</span>值<span class="token punctuation">;</span>方式二：一般用于赋表 中的字段值<span class="token keyword">SELECT</span> 字段名或表达式 <span class="token keyword">INTO</span> 变量<span class="token keyword">FROM</span> 表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">二者的区别：</th><th align="center">作用域</th><th align="center">定义位置</th><th align="center">语法</th></tr></thead><tbody><tr><td align="center">用户变量</td><td align="center">当前会话</td><td align="center">会话的任何地方</td><td align="center">加@符号，不用指定类型</td></tr><tr><td align="center">局部变量</td><td align="center">定义它的BEGIN END中</td><td align="center">BEGIN END的第一句话</td><td align="center">一般不用加@,需要指定类型</td></tr></tbody></table><p>​<br>​             </p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><h5 id="一、if函数"><a href="#一、if函数" class="headerlink" title="一、if函数"></a>一、if函数</h5><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span><span class="token punctuation">(</span>条件，值<span class="token number">1</span>，值<span class="token number">2</span><span class="token punctuation">)</span>    特点：可以用在任何位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="二、case语句"><a href="#二、case语句" class="headerlink" title="二、case语句"></a>二、case语句</h5><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql">情况一：类似于switch<span class="token keyword">case</span> 表达式<span class="token keyword">when</span> 值<span class="token number">1</span> <span class="token keyword">then</span> 结果<span class="token number">1</span>或语句<span class="token number">1</span><span class="token punctuation">(</span>如果是语句，需要加分号<span class="token punctuation">)</span> <span class="token keyword">when</span> 值<span class="token number">2</span> <span class="token keyword">then</span> 结果<span class="token number">2</span>或语句<span class="token number">2</span><span class="token punctuation">(</span>如果是语句，需要加分号<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 结果n或语句n<span class="token punctuation">(</span>如果是语句，需要加分号<span class="token punctuation">)</span><span class="token keyword">end</span> 【<span class="token keyword">case</span>】（如果是放在<span class="token keyword">begin</span> <span class="token keyword">end</span>中需要加上<span class="token keyword">case</span>，如果放在<span class="token keyword">select</span>后面不需要）情况二：类似于多重<span class="token keyword">if</span><span class="token keyword">case</span> <span class="token keyword">when</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 结果<span class="token number">1</span>或语句<span class="token number">1</span><span class="token punctuation">(</span>如果是语句，需要加分号<span class="token punctuation">)</span> <span class="token keyword">when</span> 条件<span class="token number">2</span> <span class="token keyword">then</span> 结果<span class="token number">2</span>或语句<span class="token number">2</span><span class="token punctuation">(</span>如果是语句，需要加分号<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 结果n或语句n<span class="token punctuation">(</span>如果是语句，需要加分号<span class="token punctuation">)</span><span class="token keyword">end</span> 【<span class="token keyword">case</span>】（如果是放在<span class="token keyword">begin</span> <span class="token keyword">end</span>中需要加上<span class="token keyword">case</span>，如果放在<span class="token keyword">select</span>后面不需要）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：<br>    可以用在任何位置</p><h5 id="三、if-elseif语句"><a href="#三、if-elseif语句" class="headerlink" title="三、if elseif语句"></a>三、if elseif语句</h5><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">if</span> 情况<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span><span class="token punctuation">;</span>elseif 情况<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 语句n<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><table><thead><tr><th align="center"></th><th align="center">应用场合</th></tr></thead><tbody><tr><td align="center">if函数</td><td align="center">简单双分支</td></tr><tr><td align="center">case结构</td><td align="center">等值判断 的多分支</td></tr><tr><td align="center">if结构</td><td align="center">区间判断 的多分支</td></tr></tbody></table><p>​<br>​<br>​<br>​        </p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql">【标签：】<span class="token keyword">WHILE</span> 循环条件  <span class="token keyword">DO</span>    循环体<span class="token keyword">END</span> <span class="token keyword">WHILE</span> 【标签】<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>特点：</p><pre><code>只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql的一些坑</title>
      <link href="2020/07/14/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>2020/07/14/mysql%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><strong>Mysql5.7大坑：Expression # 2 of SELECT list is not in GROUP BY clause and contains</strong><br><strong>nonaggregated column ‘sss.month_id’ which is not functionally</strong><br><strong>dependent on columns in GROUP BY clause; this is incompatible with</strong><br><strong>sql_mode=only_full_group_by</strong></p><p>​    MySQL 5.7.5及以上功能依赖检测功能。如果[<code>ONLY_FULL_GROUP_BY</code>](<a href="https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#">https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#</a> sqlmode_only_full_group_by)启用了 SQL模式（默认情况下），则MySQL将拒绝对该选项列表，<code>HAVING</code>条件或 <code>ORDER BY</code>列表引用的子集中既不指定的<code>GROUP BY</code>非集合列的查询，也不在功能上依赖于它们。</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 去掉ONLY_FULL_GROUP_BYSET @@global.sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="远程连接的一系列解决方法："><a href="#远程连接的一系列解决方法：" class="headerlink" title="远程连接的一系列解决方法："></a>远程连接的一系列解决方法：</h4><p>​    <strong>ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: YES)</strong><br>​        数据库密码错误 通过修改配置文件跳过验证 ：</p><pre class="line-numbers language-shell"><code class="language-shell"># 关闭mysql服务systemctl stop mysqlvim /etc/my.cnf    (注：windows下修改的是my.ini) # 在文档内搜索mysqld定位到[mysqld]文本段：# /mysqld(在vim编辑状态下直接输入该命令可搜索文本内容)# 在[mysqld]后面任意一行添加“skip-grant-tables”用来跳过密码验证的过程# :wq保存退出# 重启mysqlsystemctl start mysql# 直接使用mysql进去数据库mysql# 更改密码use mysql;update user set password=password("你的新密码") where user="root";flush privileges;quit;# 打开刚才修改的配置文件vim /etc/my.cnf# 注释刚才添加的内容# skip-grant-tables# 使用新密码登录mysql -uroot -p你的新密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>MYSQL ERROR 2003 (HY000): Can’t connect to MySQL server on ‘xxx.xx’ (111)</strong> </p><p>​        mysql默认监听本地连接，添加其他ip的监听</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 如果想让192.168.xx.xx获取连接权限</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'指定的用户名'</span>@'<span class="token number">192.168</span><span class="token punctuation">.</span>xx<span class="token punctuation">.</span>xx<span class="token string">' IDENTIFIED BY '</span>对应的密码' <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 如果想让所有主机获取连接权限</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'指定的用户名'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span>对应的密码' <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    <strong>1130, “Host ‘xxxx’ is not allowed to connect to this MySQL server”</strong>    </p><p>​     mysql权限表限制</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看权限表</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 修改权限，但是报了一个1062错误，我们不予理会</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--再次查看 发现多了一行% root</span><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</strong></p><p>​    自定义密码比较简单，不符合密码策略</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--设置密码的验证强度等级 修改后就只验证密码的长度了</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span>LOW<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--设置密码的长度（INT类型）</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span>长度<span class="token punctuation">;</span>关于 mysql 密码策略相关参数；<span class="token number">1</span>、validate_password_length  固定密码的总长度；<span class="token number">2</span>、validate_password_dictionary_file 指定密码验证的文件路径；<span class="token number">3</span>、validate_password_mixed_case_count  整个密码中至少要包含大<span class="token operator">/</span>小写字母的总个数；<span class="token number">4</span>、validate_password_number_count  整个密码中至少要包含阿拉伯数字的个数；<span class="token number">5</span>、validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM；    关于 validate_password_policy 的取值：                <span class="token number">0</span><span class="token operator">/</span>LOW：只验证长度；                <span class="token number">1</span><span class="token operator">/</span>MEDIUM：验证长度、数字、大小写、特殊字符；                <span class="token number">2</span><span class="token operator">/</span>STRONG：验证长度、数字、大小写、特殊字符、字典文件；<span class="token number">6</span>、validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看已连接过mysql的主机地址</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> SUBSTRING_INDEX<span class="token punctuation">(</span>host<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ip <span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>processlist <span class="token keyword">group</span> <span class="token keyword">by</span> ip<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Spring注解开发</title>
      <link href="2020/05/19/Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>2020/05/19/Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><h2 id="注册组件："><a href="#注册组件：" class="headerlink" title="注册组件："></a>注册组件：</h2><h2 id="一、常规的xml配置注解："><a href="#一、常规的xml配置注解：" class="headerlink" title="一、常规的xml配置注解："></a>一、常规的xml配置注解：</h2><h3 id="1-准备要加入容器中的类"><a href="#1-准备要加入容器中的类" class="headerlink" title="1.准备要加入容器中的类"></a>1.准备要加入容器中的类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-建立一个bean-xml文件"><a href="#2-建立一个bean-xml文件" class="headerlink" title="2.建立一个bean.xml文件"></a>2.建立一个bean.xml文件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描此包下@Controller @Service @Component @Repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.example.bean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.example.bean.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 配置文件注册bean     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testXmlConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext ioc <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre><code>Person{name='saber', age=18}</code></pre><hr><h2 id="二、使用配置类加入组件："><a href="#二、使用配置类加入组件：" class="headerlink" title="二、使用配置类加入组件："></a>二、使用配置类加入组件：</h2><h3 id="1-通过实现TypeFilter接口自定义组件扫描过滤条件"><a href="#1-通过实现TypeFilter接口自定义组件扫描过滤条件" class="headerlink" title="1.通过实现TypeFilter接口自定义组件扫描过滤条件"></a>1.通过实现TypeFilter接口自定义组件扫描过滤条件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义组件扫描过滤规则 * @author cxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">TypeFilter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *     * @param metadataReader 当前扫描到的类的信息     * @param metadataReaderFactory 其它类的信息     * @return     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">,</span>                         MetadataReaderFactory metadataReaderFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前扫描的类的注解信息</span>        AnnotationMetadata annotationmetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前扫描到的类的类信息</span>        ClassMetadata classMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前正在扫描类类路径信息</span>        Resource resource <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//如果类名包含er就加入扫描规则</span>        String type <span class="token operator">=</span> <span class="token string">"er"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义配置类可以指定要扫描的包和扫描过滤条件"><a href="#2-自定义配置类可以指定要扫描的包和扫描过滤条件" class="headerlink" title="2.自定义配置类可以指定要扫描的包和扫描过滤条件"></a>2.自定义配置类可以指定要扫描的包和扫描过滤条件</h3><p>@Configuration：表明该类是一个配置类</p><p>@ComponentScan：指定扫描规则</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置类 * @author cxy * @ComponentScan：   *                   value：批量加入要装配的组件所在的包 *                  excludeFilters： 排除规则 *                  includeFilter：  只包含那些组件,前提是禁用默认过滤规则useDefaultFilters = false *                   useDefaultFilters：是否使用默认过滤策略  *                  排除规则的取值：      *                     FilterType.ANNOTATION：以注解类型作为规则 *                      FilterType.ASSIGNABLE_TYPE: 以指定类的类型作为规则（包含它的子类） *                      FilterType.CUSTOM: 自定义规则 */</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//@ComponentScan(value = "org.example",excludeFilters = {</span><span class="token comment" spellcheck="true">//                                               //以注解排除            要排除的注解类</span><span class="token comment" spellcheck="true">//        @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = {Service.class,Repository.class})</span><span class="token comment" spellcheck="true">//})</span><span class="token comment" spellcheck="true">//@ComponentScan(value = "org.example",includeFilters = {</span><span class="token comment" spellcheck="true">//                                               //以注解包含            要包含的注解类</span><span class="token comment" spellcheck="true">//        @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = {Service.class,Repository.class})</span><span class="token comment" spellcheck="true">//        //禁用默认过滤规则</span><span class="token comment" spellcheck="true">//},useDefaultFilters = false)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"org.example"</span><span class="token punctuation">,</span>includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>classes <span class="token operator">=</span> CustomFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @Bean 指定组件的名称 默认为方法名     * @return 返回值就是要注册组件的类型     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Person <span class="token function">person01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext ioc <span class="token operator">=</span>                            <span class="token comment" spellcheck="true">//指定自定义的配置类</span>                <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h3><pre><code>org.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfigpersonbookControllercustomFilterbookService</code></pre><hr><h2 id="Scope指定组件的作用域"><a href="#Scope指定组件的作用域" class="headerlink" title="*@Scope指定组件的作用域"></a>*@Scope指定组件的作用域</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @Scope( value: 指定实例的范围 )     *          prototype 多实例 ioc启动时不会创建对象 每次获取对象就创建一个对象（懒汉模式 延迟加载     *          singleton 单实例 默认值 ioc启动时就创建一个对象 以后每次都返回这个对象（饿汉模式     *        需要web环境：     *          request 单次请求     *          session 一次会话     * @return     */</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"caster"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person1 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person2 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1 <span class="token operator">==</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果：-2"><a href="#结果：-2" class="headerlink" title="结果："></a>结果：</h3><pre><code>false</code></pre><hr><h2 id="Conditional-按指定条件添加组件"><a href="#Conditional-按指定条件添加组件" class="headerlink" title="*@Conditional 按指定条件添加组件"></a>*@Conditional 按指定条件添加组件</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"caster"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果是windows系统注册bell     *   @Conditional 指定条件加入容器 需要自定义条件     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"bell"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>WindowsCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Person <span class="token function">perso01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"bell"</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果是Linux注册linux     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"linux"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>LinuxCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Person <span class="token function">perso02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"linux"</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过实现Condition接口自定义过滤条件"><a href="#通过实现Condition接口自定义过滤条件" class="headerlink" title="通过实现Condition接口自定义过滤条件"></a>通过实现Condition接口自定义过滤条件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * WINDOWS */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param context 判断条件能使用的上下文  (ioc     * @param metadata 标注了Conditional的注解信息     * @return true:加入容器 false：忽略     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String NAME <span class="token operator">=</span> <span class="token string">"Windows"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前的运行环境信息</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取操作系统名</span>        String name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * LINUX */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinuxCondition</span>  <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String NAME <span class="token operator">=</span> <span class="token string">"Linux"</span><span class="token punctuation">;</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>NAME<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试（环境为Windows10）"><a href="#测试（环境为Windows10）" class="headerlink" title="测试（环境为Windows10）"></a>测试（环境为Windows10）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果：-3"><a href="#结果：-3" class="headerlink" title="结果："></a>结果：</h3><pre><code>personbell </code></pre><hr><h2 id="Import注解："><a href="#Import注解：" class="headerlink" title="*@Import注解："></a>*@Import注解：</h2><h4 id="我们先来回顾注册组件的几种常见方式："><a href="#我们先来回顾注册组件的几种常见方式：" class="headerlink" title="我们先来回顾注册组件的几种常见方式："></a>我们先来回顾注册组件的几种常见方式：</h4><ol><li><h5 id="包扫描-ComponentScan-组件注解（-Controller-Service…-一般用于加载我们自定义的类"><a href="#包扫描-ComponentScan-组件注解（-Controller-Service…-一般用于加载我们自定义的类" class="headerlink" title="包扫描(@ComponentScan)+组件注解（@Controller/@Service….) 一般用于加载我们自定义的类"></a>包扫描(@ComponentScan)+组件注解（@Controller/@Service….) 一般用于加载我们自定义的类</h5></li><li><h5 id="Bean-导入第三方的包里的组件"><a href="#Bean-导入第三方的包里的组件" class="headerlink" title="@Bean 导入第三方的包里的组件"></a>@Bean 导入第三方的包里的组件</h5></li><li><h5 id="Import-快速的给容器导入一个组件"><a href="#Import-快速的给容器导入一个组件" class="headerlink" title="@Import 快速的给容器导入一个组件"></a>@Import 快速的给容器导入一个组件</h5><ol><li>@Import(要导入的组件) 组件名为组件的全路径类名</li><li>@Import(自定义的ImportSelecttor)</li><li>@Import(自定义的registerBeanDefinitions)</li></ol></li><li><h5 id="使用FactoryBean的getObject-方法"><a href="#使用FactoryBean的getObject-方法" class="headerlink" title="使用FactoryBean的getObject()方法"></a>使用FactoryBean的getObject()方法</h5></li></ol><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><h3 id="1-要加入的组件："><a href="#1-要加入的组件：" class="headerlink" title="1.要加入的组件："></a>1.要加入的组件：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Price</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-配置类："><a href="#2-配置类：" class="headerlink" title="2.配置类："></a>2.配置类：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy *  使用@Import加载组件 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Color<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Price<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-测试-2"><a href="#3-测试-2" class="headerlink" title="3.测试"></a>3.测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-结果："><a href="#4-结果：" class="headerlink" title="4.结果："></a>4.结果：</h3><pre class="line-numbers language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalConfigurationAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalAutowiredAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalCommonAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerFactory <span class="token comment" spellcheck="true">//ioc自己的组件</span>mainConfig3 org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Color  <span class="token comment" spellcheck="true">//Import导入的组件</span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种方式："><a href="#第二种方式：" class="headerlink" title="第二种方式："></a>第二种方式：</h3><h3 id="1-要加入的组件：-1"><a href="#1-要加入的组件：-1" class="headerlink" title="1.要加入的组件："></a>1.要加入的组件：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Price</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-配置类：-1"><a href="#2-配置类：-1" class="headerlink" title="2.配置类："></a>2.配置类：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 使用ImportSelector导入组件 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig4</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-自定义ImportSelector"><a href="#3-自定义ImportSelector" class="headerlink" title="3.自定义ImportSelector"></a>3.自定义ImportSelector</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 自定义@Import的选择器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param importingClassMetadata 当前标注@Import注解的类的所有注解信息     * @return 要导入组件的全类名     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回一个要导入类的字符串数组</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"org.example.bean.Price"</span><span class="token punctuation">,</span><span class="token string">"org.example.bean.Color"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig4<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果：-4"><a href="#结果：-4" class="headerlink" title="结果："></a>结果：</h3><pre><code>org.springframework.context.annotation.internalConfigurationAnnotationProcessororg.springframework.context.annotation.internalAutowiredAnnotationProcessororg.springframework.context.annotation.internalCommonAnnotationProcessororg.springframework.context.event.internalEventListenerProcessororg.springframework.context.event.internalEventListenerFactorymainConfig4org.example.bean.Priceorg.example.bean.Color</code></pre><h3 id="第三种方式-在Color导入后导入Type"><a href="#第三种方式-在Color导入后导入Type" class="headerlink" title="第三种方式 在Color导入后导入Type"></a>第三种方式 在Color导入后导入Type</h3><h3 id="1-要导入的组件"><a href="#1-要导入的组件" class="headerlink" title="1.要导入的组件"></a>1.要导入的组件</h3><pre><code>public class Color {}public class Type {}</code></pre><h3 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2.配置类"></a>2.配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 使用Import(registerBeanDefinitions)注册组件 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Color<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>MyImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig5</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-自定义ImportBeanDefinitionRegistrar"><a href="#3-自定义ImportBeanDefinitionRegistrar" class="headerlink" title="3.自定义ImportBeanDefinitionRegistrar"></a>3.自定义ImportBeanDefinitionRegistrar</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportBeanDefinitionRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *把所有需要添加到容器的组件注册进去     * @param metadata： 当前类的注解信息     * @param registry： BeanDefinition 注册类     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>                                        BeanDefinitionRegistry registry<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断注册类中是否包含Color</span>       <span class="token keyword">if</span><span class="token punctuation">(</span> registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"org.example.bean.Color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//定义要添加的组件信息(类名，作用域...)</span>           RootBeanDefinition definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//使用自定义组件名和组件定义完成注册</span>           registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4.测试类"></a>4.测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig5<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果：-5"><a href="#结果：-5" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalConfigurationAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalAutowiredAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalCommonAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerFactorymainConfig5org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Color type  <span class="token comment" spellcheck="true">//type跟随Color的加载而加载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四种方式："><a href="#第四种方式：" class="headerlink" title="第四种方式："></a>第四种方式：</h3><h3 id="1-要注册的组件"><a href="#1-要注册的组件" class="headerlink" title="1.要注册的组件"></a>1.要注册的组件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-自定义FactoryBean"><a href="#2-自定义FactoryBean" class="headerlink" title="2.自定义FactoryBean"></a>2.自定义FactoryBean</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 使用spring定义的工厂Bean导入组件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Color<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回一个对象 该对象会被加载到容器中     * @return 要加入容器的对象     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Color <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实际注册的是此处返回的类</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @return 对象的类型     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定添加组件的作用域     * @return true为单例 false为多实例     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置类"><a href="#3-配置类" class="headerlink" title="3.配置类"></a>3.配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * FactoryBean注册组件 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig6</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ColorFactoryBean <span class="token function">colorFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4.测试"></a>4.测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig6<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object colorFactoryBean1 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"colorFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际注册的bean "</span><span class="token operator">+</span>colorFactoryBean1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object colorFactoryBean2 <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"colorFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colorFactoryBean1 <span class="token operator">==</span> colorFactoryBean2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//组件名前添加&amp;符能获取到工厂类本身 否则返回的是实际注册的类</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取工厂本身： "</span><span class="token operator">+</span>ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"&amp;colorFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果：-6"><a href="#结果：-6" class="headerlink" title="结果："></a>结果：</h3><pre class="line-numbers language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalConfigurationAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalAutowiredAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalCommonAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerFactorymainConfig6colorFactoryBean  <span class="token comment" spellcheck="true">//注册成功</span>实际注册的bean： <span class="token keyword">class</span> <span class="token class-name">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Color</span><span class="token boolean">true</span>  <span class="token comment" spellcheck="true">//isSingleton()返回true，两次获取的对象是同一对象</span>获取工厂本身： <span class="token keyword">class</span> <span class="token class-name">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ColorFactoryBean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="生命周期-bean从初始化到销毁的过程"><a href="#生命周期-bean从初始化到销毁的过程" class="headerlink" title="生命周期:bean从初始化到销毁的过程"></a>生命周期:bean从初始化到销毁的过程</h2><h3 id="指定初始化和销毁方法的方式"><a href="#指定初始化和销毁方法的方式" class="headerlink" title="指定初始化和销毁方法的方式"></a>指定初始化和销毁方法的方式</h3><h4 id="1-通过-Bean-initMethod-“init”-destroyMethod-“destroy”"><a href="#1-通过-Bean-initMethod-“init”-destroyMethod-“destroy”" class="headerlink" title="1.通过@Bean(initMethod = “init”,destroyMethod = “destroy”)"></a>1.通过@Bean(initMethod = “init”,destroyMethod = “destroy”)</h4><h4 id="2-通过实现InitializingBean-DisposableBean接口"><a href="#2-通过实现InitializingBean-DisposableBean接口" class="headerlink" title="2. 通过实现InitializingBean , DisposableBean接口"></a>2. 通过实现InitializingBean , DisposableBean接口</h4><h4 id="3-使用JSR250-（回调通知）"><a href="#3-使用JSR250-（回调通知）" class="headerlink" title="3. 使用JSR250 （回调通知）"></a>3. 使用JSR250 （回调通知）</h4><h4 id="4-bean的后置处理器-BeanPostProcessor-在bean初始化前后进行处理工作-BeanPostProcessor-大量的用于spring底层-如：自动注入，数据校验-，生命周期注册。。。"><a href="#4-bean的后置处理器-BeanPostProcessor-在bean初始化前后进行处理工作-BeanPostProcessor-大量的用于spring底层-如：自动注入，数据校验-，生命周期注册。。。" class="headerlink" title="4. bean的后置处理器 BeanPostProcessor 在bean初始化前后进行处理工作 BeanPostProcessor 大量的用于spring底层 如：自动注入，数据校验 ，生命周期注册。。。"></a>4. bean的后置处理器 BeanPostProcessor 在bean初始化前后进行处理工作 BeanPostProcessor 大量的用于spring底层 如：自动注入，数据校验 ，生命周期注册。。。</h4><p>​        </p><h3 id="第一种方式-1"><a href="#第一种方式-1" class="headerlink" title="第一种方式"></a>第一种方式</h3><ol><li><h4 id="定义要注册的bean"><a href="#定义要注册的bean" class="headerlink" title="定义要注册的bean"></a>定义要注册的bean</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用于测试bean生命周期 * @author cxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car Constructor ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car init ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 销毁方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car destroy ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><pre><code>/** * 自定义bean的初始化和销毁方法 * @author cxy * bean的生命周期 *      创建 -&gt; 初始化 -&gt; 销毁 */@Configurationpublic class MainConfigOfLifeCycle {    @Bean(initMethod = "init",destroyMethod = "destroy")    public Car car(){        return new Car();    }}</code></pre></li><li><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    AnnotationConfigApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfigOfLifeCycle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器创建成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Car car <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> Car<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ioc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="结果：-7"><a href="#结果：-7" class="headerlink" title="结果："></a>结果：</h4><pre class="line-numbers language-java"><code class="language-java">Car Constructor <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Car init <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>容器创建成功<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Car destroy <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><ol><li><h4 id="定义要注册的bean-1"><a href="#定义要注册的bean-1" class="headerlink" title="定义要注册的bean"></a>定义要注册的bean</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试生命周期 * @author cxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AirCondition</span>  <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AirCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AirCondition Constructor ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 销毁时执行该方法     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AirCondition destroy ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在组件属性装载完之后调用该方法 相当于init方法     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AirCondition afterPropertiesSet ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfigOfLifeCycle2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> AirCondition <span class="token function">airCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AirCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    AnnotationConfigApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfigOfLifeCycle2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器创建成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AirCondition airCondition <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"airCondition"</span><span class="token punctuation">,</span> AirCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ioc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="结果：-8"><a href="#结果：-8" class="headerlink" title="结果："></a>结果：</h4><pre class="line-numbers language-java"><code class="language-java">AirCondition Constructor <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AirCondition afterPropertiesSet <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>容器创建成功<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AirCondition destroy <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><ol><li><h4 id="定义要注册的组件"><a href="#定义要注册的组件" class="headerlink" title="定义要注册的组件"></a>定义要注册的组件</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用JSR250 测试bean生命周期 * @author cxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kettle</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Kettle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Kettle Constructor ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对象创建并赋值之后执行该方法     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Kettle PostConstruct ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>   /**    *在容器移除对象之前调用该方法    */   @PreDestroy   public void destroy(){       System.out.println("Kettle PreDestroy ...");   }</code></pre><p>   }</p><pre><code>2. ####  配置类   ```java   @Configuration   public class MainConfigOfLifeCycle3 {       @Bean       public Kettle kettle(){           return new Kettle();       }   }</code></pre><ol start="3"><li><h4 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    AnnotationConfigApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfigOfLifeCycle3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器创建成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Kettle kettle <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"kettle"</span><span class="token punctuation">,</span> Kettle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ioc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果：-9"><a href="#结果：-9" class="headerlink" title="结果："></a>结果：</h4><pre><code>Kettle Constructor ...Kettle PostConstruct ...容器创建成功...Kettle PreDestroy ...</code></pre></li></ol><h3 id="第四种方式"><a href="#第四种方式" class="headerlink" title="第四种方式"></a>第四种方式</h3><ol><li><h4 id="要注册的类"><a href="#要注册的类" class="headerlink" title="要注册的类"></a>要注册的类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mobile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mobile Constructor.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="bean后置处理器"><a href="#bean后置处理器" class="headerlink" title="bean后置处理器"></a>bean后置处理器</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * bean后置处理器 测试生命周期 * @Component 加入容器 * @author cxy */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessAfterInitialization ..."</span><span class="token operator">+</span>beanName<span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param bean 刚才创建的实例     * @param beanName 实例的名称     * @return 原来的实例（也可以进行包装     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessBeforeInitialization ..."</span><span class="token operator">+</span>beanName<span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="配置类-2"><a href="#配置类-2" class="headerlink" title="配置类"></a>配置类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"org.example.beanpostprocessor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfigOfLifeCycle4</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="测试类-3"><a href="#测试类-3" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    AnnotationConfigApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfigOfLifeCycle4<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器创建成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ioc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="结果：-10"><a href="#结果：-10" class="headerlink" title="结果："></a>结果：</h4><pre class="line-numbers language-java"><code class="language-java">postProcessBeforeInitialization <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mainConfigOfLifeCycle4<span class="token operator">==</span><span class="token operator">></span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>MainConfigOfLifeCycle4$$EnhancerBySpringCGLIB$$a404839e<span class="token annotation punctuation">@3c73951</span>postProcessAfterInitialization <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mainConfigOfLifeCycle4<span class="token operator">==</span><span class="token operator">></span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>MainConfigOfLifeCycle4$$EnhancerBySpringCGLIB$$a404839e<span class="token annotation punctuation">@3c73951</span>Mobile Constructor<span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//这里实例加载的时机和init方式有关 不同的方式 处理器接入的时机不同</span>postProcessBeforeInitialization <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mobile<span class="token operator">==</span><span class="token operator">></span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>beanpostprocessor<span class="token punctuation">.</span>Mobile<span class="token annotation punctuation">@3d5c822d</span>postProcessAfterInitialization <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mobile<span class="token operator">==</span><span class="token operator">></span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>beanpostprocessor<span class="token punctuation">.</span>Mobile<span class="token annotation punctuation">@3d5c822d</span>容器创建成功<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalConfigurationAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalAutowiredAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalCommonAnnotationProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerProcessororg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>internalEventListenerFactorymainConfigOfLifeCycle4mobilemyBeanPostProcessor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="Value注入属性值-PropertySource导入配置文件"><a href="#Value注入属性值-PropertySource导入配置文件" class="headerlink" title="@Value注入属性值   @PropertySource导入配置文件"></a>@Value注入属性值   @PropertySource导入配置文件</h3><ol><li><h4 id="要注册的组件"><a href="#要注册的组件" class="headerlink" title="要注册的组件"></a>要注册的组件</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试@value * @author cxy * @value的取值 :1、基本类型 *              2、spEl(spring表达式 # {}) *              3、${} 取出配置文件中的值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"# {20-2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${saber}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span>  String nickName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略构造方法 getter/setter toString</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Value 注解测试配置文件 * @author cxy * @PropertySource 加载配置文件 * @Import 加载的组件Bean名称为组件的全路径类名 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>Player<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:player.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfigOfValuePropertiesTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="测试类-4"><a href="#测试类-4" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">valueAnnotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ApplicationContext ioc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfigOfValuePropertiesTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Player player <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"org.example.bean.Player"</span><span class="token punctuation">,</span> Player<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="结果：-11"><a href="#结果：-11" class="headerlink" title="结果："></a>结果：</h4><pre class="line-numbers language-java"><code class="language-java">Player<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'saber'</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> nickName<span class="token operator">=</span><span class="token string">'"lion"'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//成功注入</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h3 id="自动注入-DI-："><a href="#自动注入-DI-：" class="headerlink" title="自动注入(DI)："></a>自动注入(DI)：</h3><h3 id="Autowired-Spring规范-推荐使用此注解"><a href="#Autowired-Spring规范-推荐使用此注解" class="headerlink" title="@Autowired  (Spring规范) 推荐使用此注解"></a>@Autowired  (Spring规范) <strong>推荐使用此注解</strong></h3><ol><li><h4 id="默认按照类型去容器找对应的组件"><a href="#默认按照类型去容器找对应的组件" class="headerlink" title="默认按照类型去容器找对应的组件"></a>默认按照类型去容器找对应的组件</h4></li><li><h4 id="如果找到多个相同的组件再使用属性的名称去匹配"><a href="#如果找到多个相同的组件再使用属性的名称去匹配" class="headerlink" title="如果找到多个相同的组件再使用属性的名称去匹配"></a>如果找到多个相同的组件再使用属性的名称去匹配</h4></li><li><h4 id="Qualifier-可以指定需要装配的组件id"><a href="#Qualifier-可以指定需要装配的组件id" class="headerlink" title="@Qualifier 可以指定需要装配的组件id"></a>@Qualifier 可以指定需要装配的组件id</h4></li><li><h4 id="Autowired-默认必须完成装配-如果匹配不上会报错"><a href="#Autowired-默认必须完成装配-如果匹配不上会报错" class="headerlink" title="@Autowired 默认必须完成装配 如果匹配不上会报错"></a>@Autowired 默认必须完成装配 如果匹配不上会报错</h4></li><li><h4 id="Autowired-required-false-不需完成装配-能通过编译"><a href="#Autowired-required-false-不需完成装配-能通过编译" class="headerlink" title="@Autowired(required = false)  不需完成装配 能通过编译"></a>@Autowired(required = false)  不需完成装配 能通过编译</h4></li><li><h4 id="Primary-首选装配-比-Qualifie的优先级低"><a href="#Primary-首选装配-比-Qualifie的优先级低" class="headerlink" title="@Primary 首选装配 比@Qualifie的优先级低"></a>@Primary 首选装配 比@Qualifie的优先级低</h4></li></ol><h3 id="Resource-JSR250-、-Inject-JSR330-java规范-Spring也支持"><a href="#Resource-JSR250-、-Inject-JSR330-java规范-Spring也支持" class="headerlink" title="@Resource(JSR250)、@Inject(JSR330) (java规范,Spring也支持)"></a>@Resource(JSR250)、@Inject(JSR330) (java规范,Spring也支持)</h3><ol><li><h4 id="Resource：和-Autowired一样实现自动装配，默认是按照组件名称进行装配的，不支持-Primary-首选装配-不支持required-false"><a href="#Resource：和-Autowired一样实现自动装配，默认是按照组件名称进行装配的，不支持-Primary-首选装配-不支持required-false" class="headerlink" title="@Resource：和@Autowired一样实现自动装配，默认是按照组件名称进行装配的，不支持@Primary 首选装配 不支持required = false"></a>@Resource：和@Autowired一样实现自动装配，默认是按照组件名称进行装配的，不支持@Primary 首选装配 不支持required = false</h4></li><li><h4 id="Inject：需要导入javax-inject包，和-Autowired一样实现自动装配，支持-Primary-首选装配-不支持required-false"><a href="#Inject：需要导入javax-inject包，和-Autowired一样实现自动装配，支持-Primary-首选装配-不支持required-false" class="headerlink" title="@Inject：需要导入javax.inject包，和@Autowired一样实现自动装配，支持@Primary 首选装配 不支持required = false"></a>@Inject：需要导入javax.inject包，和@Autowired一样实现自动装配，<strong>支持@Primary 首选装配</strong> 不支持required = false</h4></li></ol><h3 id="Autowired标注的位置：（都是从容器中获取参数组件的值完成自动注入）"><a href="#Autowired标注的位置：（都是从容器中获取参数组件的值完成自动注入）" class="headerlink" title="@Autowired标注的位置：（都是从容器中获取参数组件的值完成自动注入）"></a>@Autowired标注的位置：（都是从容器中获取参数组件的值完成自动注入）</h3><ul><li><h4 id="成员属性位置"><a href="#成员属性位置" class="headerlink" title="成员属性位置"></a>成员属性位置</h4></li><li><h4 id="方法位置：使用-Bean的方式-在方法参数位置上-Autowired默认不写"><a href="#方法位置：使用-Bean的方式-在方法参数位置上-Autowired默认不写" class="headerlink" title="方法位置：使用@Bean的方式 在方法参数位置上@Autowired默认不写"></a>方法位置：使用@Bean的方式 在方法参数位置上@Autowired默认不写</h4></li><li><h4 id="构造器位置：如果组件只有一个有参构造-Autowired可以省略"><a href="#构造器位置：如果组件只有一个有参构造-Autowired可以省略" class="headerlink" title="构造器位置：如果组件只有一个有参构造@Autowired可以省略"></a>构造器位置：如果组件只有一个有参构造@Autowired可以省略</h4></li><li><h4 id="参数位置"><a href="#参数位置" class="headerlink" title="参数位置"></a>参数位置</h4></li></ul><h4 id="自动装配："><a href="#自动装配：" class="headerlink" title="自动装配："></a>自动装配：</h4><h4 id="使用AutowiredAnnotationBeanPostProcessor解析完成自动装配"><a href="#使用AutowiredAnnotationBeanPostProcessor解析完成自动装配" class="headerlink" title="使用AutowiredAnnotationBeanPostProcessor解析完成自动装配"></a>使用AutowiredAnnotationBeanPostProcessor解析完成自动装配</h4><pre class="line-numbers language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotationClass <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>InstantiationAwareBeanPostProcessorAdapterorg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AutowiredAnnotationBeanPostProcessor<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token keyword">extends</span> <span class="token class-name">InstantiationAwareBeanPostProcessorAdapter</span><span class="token keyword">implements</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">,</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>PriorityOrdered<span class="token punctuation">,</span> BeanFactoryAwareBeanPostProcessor implementation that autowires annotated fields<span class="token punctuation">,</span> setter methods<span class="token punctuation">,</span> and arbitrary config methods<span class="token punctuation">.</span> Such members to be injected are detected through annotations<span class="token operator">:</span> by <span class="token keyword">default</span><span class="token punctuation">,</span> Spring's <span class="token annotation punctuation">@Autowired</span> and <span class="token annotation punctuation">@Value</span> annotations<span class="token punctuation">.</span>Also supports JSR<span class="token operator">-</span><span class="token number">330</span><span class="token string">'s @Inject annotation, if available, as a direct alternative to Spring'</span>s own <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">.</span>Autowired ConstructorsOnly one constructor of any given bean <span class="token keyword">class</span> <span class="token class-name">may</span> declare <span class="token keyword">this</span> annotation with the <span class="token string">'required'</span> attribute set to <span class="token boolean">true</span><span class="token punctuation">,</span> indicating the constructor to autowire when used as a Spring bean<span class="token punctuation">.</span> Furthermore<span class="token punctuation">,</span> <span class="token keyword">if</span> the <span class="token string">'required'</span> attribute is set to <span class="token boolean">true</span><span class="token punctuation">,</span> only a single constructor may be annotated with <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">.</span> If multiple non<span class="token operator">-</span>required constructors declare the annotation<span class="token punctuation">,</span> they will be considered as candidates <span class="token keyword">for</span> autowiring<span class="token punctuation">.</span> The constructor with the greatest number of dependencies that can be satisfied by matching beans in the Spring container will be chosen<span class="token punctuation">.</span> If none of the candidates can be satisfied<span class="token punctuation">,</span> then a primary<span class="token operator">/</span><span class="token keyword">default</span> <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token keyword">if</span> present<span class="token punctuation">)</span> will be used<span class="token punctuation">.</span> If a <span class="token keyword">class</span> <span class="token class-name">only</span> declares a single constructor to begin with<span class="token punctuation">,</span> it will always be used<span class="token punctuation">,</span> even <span class="token keyword">if</span> not annotated<span class="token punctuation">.</span> An annotated constructor does not have to be <span class="token keyword">public</span><span class="token punctuation">.</span>Autowired FieldsFields are injected right after construction of a bean<span class="token punctuation">,</span> before any config methods are invoked<span class="token punctuation">.</span> Such a config field does not have to be <span class="token keyword">public</span><span class="token punctuation">.</span>Autowired MethodsConfig methods may have an arbitrary name and any number of arguments<span class="token punctuation">;</span> each of those arguments will be autowired with a matching bean in the Spring container<span class="token punctuation">.</span> Bean property setter methods are effectively just a special <span class="token keyword">case</span> of such a general config method<span class="token punctuation">.</span> Config methods <span class="token keyword">do</span> not have to be <span class="token keyword">public</span><span class="token punctuation">.</span>Annotation Config vs<span class="token punctuation">.</span> XML ConfigA <span class="token keyword">default</span> AutowiredAnnotationBeanPostProcessor will be registered by the <span class="token string">"context:annotation-config"</span> and <span class="token string">"context:component-scan"</span> XML tags<span class="token punctuation">.</span> Remove or turn off the <span class="token keyword">default</span> annotation configuration there <span class="token keyword">if</span> you intend to specify a custom AutowiredAnnotationBeanPostProcessor bean definition<span class="token punctuation">.</span>NOTE<span class="token operator">:</span> Annotation injection will be performed before XML injection<span class="token punctuation">;</span> thus the latter configuration will override the former <span class="token keyword">for</span> properties wired through both approaches<span class="token punctuation">.</span><span class="token annotation punctuation">@Lookup</span> MethodsIn addition to regular injection points as discussed above<span class="token punctuation">,</span> <span class="token keyword">this</span> post<span class="token operator">-</span>processor also handles Spring<span class="token string">'s @Lookup annotation which identifies lookup methods to be replaced by the container at runtime. This is essentially a type-safe version of getBean(Class, args) and getBean(String, args). See @Lookup'</span>s javadoc <span class="token keyword">for</span> details<span class="token punctuation">.</span>Since<span class="token operator">:</span><span class="token number">2.5</span>Author<span class="token operator">:</span>Juergen Hoeller<span class="token punctuation">,</span> Mark Fisher<span class="token punctuation">,</span> Stephane Nicoll<span class="token punctuation">,</span> Sebastien Deleuze<span class="token punctuation">,</span> Sam BrannenSee Also<span class="token operator">:</span><span class="token function">setAutowiredAnnotationType</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> Autowired<span class="token punctuation">,</span> ValueAll Implemented Interfaces<span class="token operator">:</span>Aware<span class="token punctuation">,</span> BeanFactoryAware<span class="token punctuation">,</span> BeanPostProcessor<span class="token punctuation">,</span> InstantiationAwareBeanPostProcessor<span class="token punctuation">,</span> SmartInstantiationAwareBeanPostProcessor<span class="token punctuation">,</span> MergedBeanDefinitionPostProcessor<span class="token punctuation">,</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Ordered<span class="token punctuation">,</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>PriorityOrdered<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Aware接口："><a href="#Aware接口：" class="headerlink" title="Aware接口："></a>Aware接口：</h3><ul><li><h4 id="自定义组件想要使用Spring容器底层的一些组件（ApplicationContext、BeanFactory…-需要实现xxxAware，在对象创建时会调用接口规定的方法注入相关组件，底层是使用xxxAwareProcessors实现"><a href="#自定义组件想要使用Spring容器底层的一些组件（ApplicationContext、BeanFactory…-需要实现xxxAware，在对象创建时会调用接口规定的方法注入相关组件，底层是使用xxxAwareProcessors实现" class="headerlink" title="自定义组件想要使用Spring容器底层的一些组件（ApplicationContext、BeanFactory…)需要实现xxxAware，在对象创建时会调用接口规定的方法注入相关组件，底层是使用xxxAwareProcessors实现"></a>自定义组件想要使用Spring容器底层的一些组件（ApplicationContext、BeanFactory…)需要实现xxxAware，在对象创建时会调用接口规定的方法注入相关组件，底层是使用xxxAwareProcessors实现</h4><ol><li><h4 id="需要注册的组件"><a href="#需要注册的组件" class="headerlink" title="需要注册的组件"></a>需要注册的组件</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用于测试Aware * @author cxy */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span><span class="token punctuation">,</span> BeanNameAware<span class="token punctuation">,</span> EmbeddedValueResolverAware <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//储存下来方便使用</span>    ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param name 当前Bean的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前Bean的名称："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param applicationContext 获取到的ioc对象     * @throws BeansException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传入的ioc:"</span> <span class="token operator">+</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param resolver 解析器     *                 可以用于解析spEL ${}     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmbeddedValueResolver</span><span class="token punctuation">(</span>StringValueResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String stringValue <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token string">"Hello ${os.name},I'm # {1+1}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="配置类-3"><a href="#配置类-3" class="headerlink" title="配置类"></a>配置类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Aware 测试配置类 * @author cxy */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"org.example.bean"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfigOfAwareTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="测试类-5"><a href="#测试类-5" class="headerlink" title="测试类"></a>测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    AnnotationConfigApplicationContext ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfigOfAwareTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Computer bean <span class="token operator">=</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Computer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="结果：-12"><a href="#结果：-12" class="headerlink" title="结果："></a>结果：</h4><pre class="line-numbers language-java"><code class="language-java">当前Bean的名称：computerHello Windows <span class="token number">10</span><span class="token punctuation">,</span>I'm <span class="token number">2</span>传入的ioc<span class="token operator">:</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token annotation punctuation">@453da22c</span><span class="token punctuation">,</span> started on Thu May <span class="token number">21</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">28</span> CST <span class="token number">2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="Profile指定环境-默认为default"><a href="#Profile指定环境-默认为default" class="headerlink" title="@Profile指定环境   默认为default"></a>@Profile指定环境   默认为default</h3><ol><li><h4 id="需要加载的组件"><a href="#需要加载的组件" class="headerlink" title="需要加载的组件"></a>需要加载的组件</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><h4 id="配置类-4"><a href="#配置类-4" class="headerlink" title="配置类"></a>配置类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 测试@Profile * @author cxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfigOfProfileTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Color <span class="token function">colorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Color <span class="token function">colorDev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dev..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Color <span class="token function">colorProd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"prod..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h4 id="测试类·"><a href="#测试类·" class="headerlink" title="测试类·"></a>测试类·</h4><pre><code>  /**     * 也可以用虚拟机参数设置环境     *  -Dspring.profiles.active=test     */    @Test    void testProfile(){        //获取容器        AnnotationConfigApplicationContext ioc = new AnnotationConfigApplicationContext();        //设置运行环境        ioc.getEnvironment().setActiveProfiles("test");        //注册主配置类        ioc.register(MainConfigOfProfileTest.class);        //启动刷新容器        ioc.refresh();    }</code></pre></li><li><h4 id="结果：-13"><a href="#结果：-13" class="headerlink" title="结果："></a>结果：</h4><pre><code>test...</code></pre></li></ol></li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>设计模式之创建者模式</title>
      <link href="2020/04/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/04/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="1-简单工厂模式："><a href="#1-简单工厂模式：" class="headerlink" title="1.简单工厂模式："></a>1.简单工厂模式：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author  cxy *  简单工厂模式 *  一个工厂类 XxxFactory，里面有一个静态方法，根据不同的参数，返回不同的实例对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactoryPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServantFactory<span class="token punctuation">.</span><span class="token function">servantCall</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServantFactory<span class="token punctuation">.</span><span class="token function">servantCall</span><span class="token punctuation">(</span><span class="token string">"caster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 接口 */</span><span class="token keyword">interface</span> <span class="token class-name">Servant</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 实现类1 */</span><span class="token keyword">class</span> <span class="token class-name">Saber</span> <span class="token keyword">implements</span> <span class="token class-name">Servant</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Saber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm saber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 实现类2 */</span><span class="token keyword">class</span> <span class="token class-name">Caster</span> <span class="token keyword">implements</span> <span class="token class-name">Servant</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Caster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm caster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 工厂给予实现类的get方法 *      根据不同的条件生成不同的实现类 */</span><span class="token keyword">class</span> <span class="token class-name">ServantFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Servant <span class="token function">servantCall</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Saber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"caster"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">Caster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印："><a href="#打印：" class="headerlink" title="打印："></a>打印：</h3><pre><code>I'm saberI'm caster</code></pre><h2 id="2-普通工厂模式："><a href="#2-普通工厂模式：" class="headerlink" title="2.普通工厂模式："></a>2.普通工厂模式：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy *  普通工厂模式 接口实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrdinaryFactoryPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 多态 获取具体工厂对象</span>        FoodFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChineseFoodFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过签名指定要创建的对象</span>        factory<span class="token punctuation">.</span><span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AmericanFoodFactory factory1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanFoodFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory1<span class="token punctuation">.</span><span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 主工厂 提供子工厂的get方法 *  返回一个具体的工厂 */</span><span class="token keyword">interface</span> <span class="token class-name">FoodFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回一个工厂     * @param name     * @return     */</span>    Food <span class="token function">makeFood</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 子工厂1 重写父工厂get方法 *      按条件返回具体的类 */</span><span class="token keyword">class</span> <span class="token class-name">ChineseFoodFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FoodFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Food <span class="token function">makeFood</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChineseFoodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChineseFoodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 子工厂1 重写父工厂get方法 * */</span><span class="token keyword">class</span> <span class="token class-name">AmericanFoodFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FoodFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Food <span class="token function">makeFood</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanFoodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanFoodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 实体类总接口 */</span><span class="token keyword">interface</span> <span class="token class-name">Food</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ChineseFoodA</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ChineseFoodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ChineseFoodA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ChineseFoodB</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ChineseFoodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ChineseFoodB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AmericanFoodA</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AmericanFoodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AmericanFoodA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AmericanFoodB</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AmericanFoodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AmericanneseFoodB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印：-1"><a href="#打印：-1" class="headerlink" title="打印："></a>打印：</h3><pre class="line-numbers language-java"><code class="language-java">ChineseFoodAAmericanneseFoodB    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-抽象工厂模式："><a href="#3-抽象工厂模式：" class="headerlink" title="3.抽象工厂模式："></a>3.抽象工厂模式：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author  cxy *  抽象类工厂模式 *          适用于产品族 解决两个产品配件兼容性问题 *          总工厂 ->委托Intel生产->全Intel配件的电脑 *          总工厂 ->委托Amd生产->全Amd配件的电脑 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactoryPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//需求Intel电脑</span>        ComputerFactory intelFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intelFactory:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intelFactory<span class="token punctuation">.</span><span class="token function">makeCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intelFactory<span class="token punctuation">.</span><span class="token function">makeMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intelFactory<span class="token punctuation">.</span><span class="token function">makeHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//需求Amd电脑</span>        ComputerFactory amdFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmdFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intelFactory:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        amdFactory<span class="token punctuation">.</span><span class="token function">makeCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        amdFactory<span class="token punctuation">.</span><span class="token function">makeMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        amdFactory<span class="token punctuation">.</span><span class="token function">makeHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 抽象电脑工厂 为消费者生产电脑 *  具体的电脑配件由各自工厂负责生产 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ComputerFactory</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 生产cpu     * @return     */</span>    <span class="token keyword">abstract</span> Cpu <span class="token function">makeCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 生成主板     * @return     */</span>    <span class="token keyword">abstract</span> MainBoard <span class="token function">makeMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 生产硬盘     * @return     */</span>    <span class="token keyword">abstract</span> HardDisk <span class="token function">makeHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Cpu</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MainBoard</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">HardDisk</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IntelCpu</span> <span class="token keyword">implements</span> <span class="token class-name">Cpu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">IntelCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IntelCpu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IntelMainBoard</span> <span class="token keyword">implements</span> <span class="token class-name">MainBoard</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">IntelMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IntelMainBoard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">IntelHardDisk</span> <span class="token keyword">implements</span> <span class="token class-name">HardDisk</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">IntelHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IntelHardDisk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 具体的配件类 */</span><span class="token keyword">class</span> <span class="token class-name">AmdCpu</span> <span class="token keyword">implements</span> <span class="token class-name">Cpu</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AmdCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AmdCpu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AmdMainBoard</span> <span class="token keyword">implements</span> <span class="token class-name">MainBoard</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AmdMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AmdMainBoard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AmdHardDisk</span> <span class="token keyword">implements</span> <span class="token class-name">HardDisk</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AmdHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AmdHardDisk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 具体的Intel工厂类 */</span><span class="token keyword">class</span> <span class="token class-name">IntelFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    Cpu <span class="token function">makeCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntelCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    MainBoard <span class="token function">makeMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntelMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    HardDisk <span class="token function">makeHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntelHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 具体的Amd工厂类 */</span><span class="token keyword">class</span> <span class="token class-name">AmdFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    Cpu <span class="token function">makeCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmdCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    MainBoard <span class="token function">makeMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmdMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    HardDisk <span class="token function">makeHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmdHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印：-2"><a href="#打印：-2" class="headerlink" title="打印："></a>打印：</h3><pre class="line-numbers language-java"><code class="language-java">intelFactory<span class="token operator">:</span>IntelCpuIntelMainBoardIntelHardDisk<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>intelFactory<span class="token operator">:</span>AmdCpuAmdMainBoardAmdHardDisk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-单例模式："><a href="#4-单例模式：" class="headerlink" title="4.单例模式："></a>4.单例模式：</h2><h3 id="1）饿汉模式："><a href="#1）饿汉模式：" class="headerlink" title="1）饿汉模式："></a>1）饿汉模式：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy *  饿汉模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungryPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> HungryPattern<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化方法会执行 不会再新建对象</span>        HungryPattern<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HungryPattern</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 堵死构造器     */</span>    <span class="token keyword">private</span> <span class="token function">HungryPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HungryPattern实例化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为是static修饰所以只会产生一个实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HungryPattern instance <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HungryPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungryPattern <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//检测是否为单例</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例构造器。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调用此方法也会生产一个HungryPattern实例 （加载静态变量）     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印：-3"><a href="#打印：-3" class="headerlink" title="打印："></a>打印：</h3><pre class="line-numbers language-java"><code class="language-java">HungryPattern实例化。。。Wed Apr <span class="token number">29</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">14</span> CST <span class="token number">2020</span>实例构造器。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2）饱汉模式："><a href="#2）饱汉模式：" class="headerlink" title="2）饱汉模式："></a>2）饱汉模式：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy *  饱汉模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FullPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> FullPattern<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> FullPattern<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FullPattern</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 堵死构造器     */</span>    <span class="token keyword">private</span> <span class="token function">FullPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FullPattern实例化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一定要使用volatile关键字</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> FullPattern instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FullPattern <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>FullPattern<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这一次判断也是必须的，不然会有并发问题</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FullPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h3 id="打印：-4"><a href="#打印：-4" class="headerlink" title="打印："></a>打印：</h3><pre><code>FullPattern实例化。。。</code></pre><h3 id="推荐使用的方式：嵌套类"><a href="#推荐使用的方式：嵌套类" class="headerlink" title="推荐使用的方式：嵌套类"></a>推荐使用的方式：嵌套类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 推荐使用此种方式 */</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用了 嵌套类可以访问外部类的静态属性和静态方法 的特性     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Holder<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-建造者模式-也就是所谓的xxx-build"><a href="#5-建造者模式-也就是所谓的xxx-build" class="headerlink" title="5.建造者模式 也就是所谓的xxx.build"></a>5.建造者模式 也就是所谓的xxx.build</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy *      建造者模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderPatternDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"saber"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 私有化构造器     * @param name     * @param age     */</span>    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User实例化。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个创建器直接链式调用     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserBuilder <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserBuilder</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//和User的属性一致 用于封装值</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 私有化构造器         */</span>        <span class="token keyword">private</span> <span class="token function">UserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//设置值</span>        <span class="token keyword">public</span> UserBuilder <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> UserBuilder <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> User <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以先进行参数校验 然后把值传递给User的构造器</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印：-5"><a href="#打印：-5" class="headerlink" title="打印："></a>打印：</h3><pre class="line-numbers language-java"><code class="language-java">User实例化。。。User<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'saber'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-原型模式：浅拷贝"><a href="#6-原型模式：浅拷贝" class="headerlink" title="6.原型模式：浅拷贝"></a>6.原型模式：浅拷贝</h2><pre class="line-numbers language-java"><code class="language-java">Object 类中有一个 <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，它用于生成一个新的对象。当然，如果我们要调用这个方法，java 要求我们的类必须先实现 Cloneable 接口否则会抛出 CloneNotSupportedException 异常。<span class="token keyword">protected</span> <span class="token keyword">native</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数组模拟栈</title>
      <link href="2020/04/28/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%A0%88/"/>
      <url>2020/04/28/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E6%A0%88/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 数组模拟栈 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStackDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayStack stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 数组栈 */</span><span class="token keyword">class</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 栈顶     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存放数据的数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判满     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判空     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入栈     * @param value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top<span class="token operator">++</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹栈 只是移动了栈顶指针 元素实际还在栈中     * @param value     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈中无元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> data<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查看栈中元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈中没有元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈中一共有"</span><span class="token operator">+</span><span class="token punctuation">(</span>top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"为"</span><span class="token operator">+</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><pre class="line-numbers language-java"><code class="language-java">栈已满栈中一共有<span class="token number">4</span>个元素索引<span class="token number">3</span>为<span class="token number">6</span>索引<span class="token number">2</span>为<span class="token number">3</span>索引<span class="token number">1</span>为<span class="token number">2</span>索引<span class="token number">0</span>为<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>约瑟夫出圈</title>
      <link href="2020/04/28/%E7%BA%A6%E7%91%9F%E5%A4%AB%E5%87%BA%E5%9C%88/"/>
      <url>2020/04/28/%E7%BA%A6%E7%91%9F%E5%A4%AB%E5%87%BA%E5%9C%88/</url>
      <content type="html"><![CDATA[<p>使用单向循环链表解决约瑟夫问题</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 约瑟夫问题： *      n个小男孩围城一圈 从第k个孩子开始报数 每报m个数就出圈 *      假设有5个孩子 从第一个开始 报数2下就出圈 那么出圈的顺序： *          2->4->1->5  最终保留3号男孩 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircularSingleLinkedListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CircularSingleLinkedList list <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">CircularSingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">circleOut</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用环形单向列表 */</span><span class="token keyword">class</span> <span class="token class-name">CircularSingleLinkedList</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 头节点     */</span>    <span class="token keyword">private</span> Boy first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *添加节点     * @param num     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//校验参数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//辅助指针用于构建环形链表</span>        Boy cur <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根据编号创建节点</span>            Boy boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//设置第一个个节点first</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> boy<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//指向first</span>                boy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//辅助指针指向第一个节点</span>                cur <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//指向第一个节点</span>                boy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置当前节点的下一个节点为新建节点</span>                cur<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//移动指针</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 打印链表     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表中无节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//辅助指针</span>        Boy cur <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前节点的编号为："</span><span class="token operator">+</span>cur<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//下一个节点为first时遍历结束</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//移动指针！！！</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出圈     * @param startNum 开始的节点     * @param step 移动的步进     * @param count 总共的节点数量     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">circleOut</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNum<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表中不存在节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//参数校验</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startNum<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> startNum<span class="token operator">></span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//建立辅助指针</span>        Boy helper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把辅助指针移动到first之前</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//把头指针移动到开始的节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startNum <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper <span class="token operator">=</span>  helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//开始出圈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//移动指针找到要出圈的节点</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//此时first所指的节点即为要出圈的节点</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出圈的节点为:"</span><span class="token operator">+</span>first<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行出圈操作</span>            <span class="token comment" spellcheck="true">//first后移一位</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//辅助指针指向的节点的下一个节点指向first</span>            helper<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果辅助指针和first重合那么链表只剩下一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> first<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终留下的节点为:"</span><span class="token operator">+</span>first<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 节点 */</span><span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 节点编号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 下个节点的指针 默认为null     */</span>    <span class="token keyword">private</span> Boy next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Boy</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 虽说用不到setId 但还是习惯性的给出     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boy <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Boy next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><pre class="line-numbers language-java"><code class="language-java">出圈的节点为<span class="token operator">:</span><span class="token number">2</span>出圈的节点为<span class="token operator">:</span><span class="token number">4</span>出圈的节点为<span class="token operator">:</span><span class="token number">1</span>出圈的节点为<span class="token operator">:</span><span class="token number">5</span>最终留下的节点为<span class="token operator">:</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>单项链表crud简单实现</title>
      <link href="2020/04/27/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8crud%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/04/27/%E5%8D%95%E9%A1%B9%E9%93%BE%E8%A1%A8crud%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SingleLinkedList</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 头节点的指针 始终指向头节点     */</span>    <span class="token keyword">private</span> HeroNode head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> HeroNode <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改节点 根据heroNode.id     * @param heroNode     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>HeroNode heroNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取头节点</span>        HeroNode cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//id相等修改值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>id <span class="token operator">==</span> heroNode<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>name <span class="token operator">=</span> heroNode<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//指针后移</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按照id顺序插入链表     * @param newNode     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addNodeById</span><span class="token punctuation">(</span>HeroNode newNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取头节点的指针</span>        HeroNode temp  <span class="token operator">=</span>  head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历链表 寻找插入的位置</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>id <span class="token operator">==</span> newNode<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"节点编号%d已存在请校验数据！\n"</span><span class="token punctuation">,</span>newNode<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>id <span class="token operator">></span> newNode<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//添加元素不处于链表末尾</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//移动指针</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//temp指向尾部节点 并且链表中没有相同的节点id</span>        newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按照servantid删除节点     * @param id     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取头节点的指针</span>        HeroNode temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从第一个节点开始遍历链表</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果id相同就执行删除</span>                <span class="token comment" spellcheck="true">//当删除的为第一个节点时 移动头指针 相当于 head.next = head.next.next</span>                temp<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//移动指针</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要删除的%d号数据不存在\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入到末尾     * @param newNode     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span>HeroNode newNode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取头节点的指针</span>        HeroNode temp <span class="token operator">=</span>  head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动指针到链表末尾 如果链表为null则直接插入</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>           temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//插入到末尾</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印链表     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//头指针无需打印 获取第一个节点</span>        HeroNode temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历链表</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 反转链表     * @param head     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revsLinkedList</span><span class="token punctuation">(</span>HeroNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//链表为空或只有一个节点 不执行操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//头节点</span>        HeroNode cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反转后的头指针</span>        HeroNode revs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后继节点</span>        HeroNode next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//保存后继节点</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//让当前节点指向revs的下一个节点</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> revs<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//让revs指向当前节点</span>            revs<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动指针</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//让原始指针指向反转后的第一个节点</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> revs<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 计算有效节点的个数     * @param head     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countLikedNode</span><span class="token punctuation">(</span>HeroNode head <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//统计变量</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取第一个节点</span>        HeroNode cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//链表为空 返回0</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//统计变量自增</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移动指针</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回从末位数的第index个节点     *     * @param head     * @param index     * @return     */</span>    <span class="token keyword">public</span> HeroNode <span class="token function">lastIndexOfNode</span><span class="token punctuation">(</span>HeroNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//统计节点的个数</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">countLikedNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//校验索引是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">></span>count<span class="token operator">||</span>index<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"索引不合法,size : "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HeroNode cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token operator">-</span>index <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 逆序打印链表 利用栈     * @param head 链表的头指针     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revsPrint</span><span class="token punctuation">(</span>HeroNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HeroNode cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> nodeStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//压栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            nodeStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//弹栈</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nodeStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            HeroNode pop <span class="token operator">=</span> nodeStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HeroNode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> HeroNode next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HeroNode h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"saber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"caster"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"lancer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SingleLinkedList singleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> singleLinkedList<span class="token punctuation">.</span>            <span class="token function">countLikedNode</span><span class="token punctuation">(</span>singleLinkedList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表一共有%d个节点\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反转前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//singleLinkedList.revsLinkedList(singleLinkedList.getHead());</span>    <span class="token comment" spellcheck="true">//        singleLinkedList.addNodeById(h2);</span>    <span class="token comment" spellcheck="true">//        singleLinkedList.addNodeById(h);</span>    <span class="token comment" spellcheck="true">//        singleLinkedList.delNode(1);</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">addNodeById</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反转后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找倒数第二个节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode node <span class="token operator">=</span>            singleLinkedList<span class="token punctuation">.</span><span class="token function">lastIndexOfNode</span><span class="token punctuation">(</span>                    singleLinkedList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"逆序打印=========>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">revsPrint</span><span class="token punctuation">(</span>singleLinkedList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode h3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"archer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleLinkedList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><pre class="line-numbers language-java"><code class="language-java">链表一共有<span class="token number">3</span>个节点反转前HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'saber'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'caster'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'lancer'</span><span class="token punctuation">}</span>节点编号<span class="token number">3</span>已存在请校验数据！反转后HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'saber'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'caster'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'lancer'</span><span class="token punctuation">}</span>查找倒数第二个节点HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'caster'</span><span class="token punctuation">}</span>逆序打印<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'lancer'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'caster'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'saber'</span><span class="token punctuation">}</span>修改后HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'saber'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'caster'</span><span class="token punctuation">}</span>HeroNode<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'archer'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>数组模拟单向队列</title>
      <link href="2020/04/26/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E5%8D%95%E5%90%91%E9%98%9F%E5%88%97/"/>
      <url>2020/04/26/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E5%8D%95%E5%90%91%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 数组模拟队列 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 默认容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initCapacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列数组     */</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 头指针     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 尾指针     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 元素个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ArrayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            capacity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initCapacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判空     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判满     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入队     * @param o     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addQueue</span><span class="token punctuation">(</span>E o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//队列已满返回false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当尾指针大于数组下标时要对插入的索引位置取余</span>        queue<span class="token punctuation">[</span>tail <span class="token operator">%</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        tail<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出队     * @return     */</span>    <span class="token keyword">public</span> E <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//队列为空返回null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当头指针大于数组下标时要对出队的索引位置取余</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>queue<span class="token punctuation">[</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer queue1 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token operator">+</span>queue1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印</p><pre class="line-numbers language-java"><code class="language-java">add1add2getnulladd3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>稀疏数组</title>
      <link href="2020/04/26/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/"/>
      <url>2020/04/26/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author cxy * 使用稀疏数组记录棋盘状态 *  稀疏数组说明： *      需要申明一个二维数组: array[count+1][3] *      第一行第一列：原始数组的总行数 第二列：原始数组的总列数 第三列：原始数组有效数据的总数(count) *      第二行第一列：数据在原始数组的行数 第二列：数据在原始数组中的列数 第三行：数据的值 *      。。。。。。 *  数组元素值说明： *          0：无子 1：黑子 2：白子 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个11*11的棋盘</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟棋盘状态</span>        chessArr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录棋盘中元素的个数</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历棋盘获取棋子个数 并打印原始棋盘</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始棋盘状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建稀疏数组 一个有count个元素需要记录 但是第一行要用来记录原始数组 所以是count+1</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparsearr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一行第一列记录原始数组的行数</span>        sparsearr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一行第二列记录原始数组的列数</span>        sparsearr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一行第三列记录原始数组的有效数据数</span>        sparsearr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录要操作的行数 从第二行开始填充数据</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//填充稀疏数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chessArr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> chessArr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sparsearr<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    sparsearr<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    sparsearr<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    row<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印稀疏数组</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> sparsearr<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//还原数组 获取行数和列数</span>        <span class="token comment" spellcheck="true">//稀疏数组第一行记录了原始棋盘的行数和列数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chees <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sparsearr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparsearr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从稀疏数组的第二行开始读取并填充数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparsearr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            int yw = 0;</span><span class="token comment" spellcheck="true">//            int ew = 0;</span><span class="token comment" spellcheck="true">//            int data = 0;</span><span class="token comment" spellcheck="true">//            for (int j = 0; j &lt; sprasearr[0].length; j++) {</span><span class="token comment" spellcheck="true">//                if (j==0){</span><span class="token comment" spellcheck="true">//                    //有数据的一维坐标</span><span class="token comment" spellcheck="true">//                    yw = sprasearr[i][j];</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//                if (j==1){</span><span class="token comment" spellcheck="true">//                    //有数据的二维坐标</span><span class="token comment" spellcheck="true">//                    ew = sprasearr[i][j];</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//                if (j==2){</span><span class="token comment" spellcheck="true">//                    //数据的值</span><span class="token comment" spellcheck="true">//                    data = sprasearr[i][j];</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            chees[yw][ew] = data;</span>            <span class="token comment" spellcheck="true">//以上为通俗的理解</span>            chees<span class="token punctuation">[</span>sparsearr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparsearr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span>                    sparsearr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还原之后的棋盘："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//原始二维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> chees<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印：</p><pre class="line-numbers language-java"><code class="language-java">原始棋盘状态：<span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">1</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">2</span>    <span class="token number">0</span>    <span class="token number">2</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">1</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>稀疏数组：<span class="token number">11</span>      <span class="token number">11</span>    <span class="token number">4</span> <span class="token comment" spellcheck="true">//原始棋盘为一个11*11的二维数组 总共有4个有效数据</span><span class="token number">1</span>    <span class="token number">2</span>    <span class="token number">1</span> <span class="token comment" spellcheck="true">//第二行第三列的值为1.......</span><span class="token number">2</span>    <span class="token number">3</span>    <span class="token number">2</span>    <span class="token number">2</span>    <span class="token number">5</span>    <span class="token number">2</span>    <span class="token number">5</span>    <span class="token number">2</span>    <span class="token number">1</span>还原之后的棋盘：<span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">1</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">2</span>    <span class="token number">0</span>    <span class="token number">2</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">1</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于枚举类的一些坑</title>
      <link href="2020/04/23/%E5%85%B3%E4%BA%8E%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>2020/04/23/%E5%85%B3%E4%BA%8E%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author *  枚举类中添加外部访问的方法 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @see     */</span>    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">BLANK</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">YELLO</span><span class="token punctuation">(</span><span class="token string">"黄色"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此构造函数的修饰符为private 外界无法访问 用于定义枚举元素内部的属性</span>    <span class="token function">Color</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对外提供一个get函数     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Color c <span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> c<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对外提供一个set函数 无法对枚举元素进行修改     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Color c <span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>                c<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里的public一点用都没有，因为枚举类不支持实例化，所以外界无法访问</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>    <span class="token operator">*</span>这里会提示错误 Invalid test <span class="token keyword">class</span> <span class="token string">'com.....Color'</span><span class="token operator">:</span>    <span class="token operator">*</span>    原因是 Enum 不支持<span class="token keyword">public</span>和<span class="token keyword">protected</span>修饰符的构造方法    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String name <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//只修改了枚举元素中的值 对枚举元素不起作用</span>        <span class="token comment" spellcheck="true">//RED("hhhhh",1) 内部的值变化了 但RED还是那个RED</span>        Color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hhhhh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> Color<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于junit单元化测试</title>
      <link href="2020/04/23/%E5%85%B3%E4%BA%8Ejunit%E5%8D%95%E5%85%83%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>2020/04/23/%E5%85%B3%E4%BA%8Ejunit%E5%8D%95%E5%85%83%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h3 id="junit是自动化单元测试，不支持手动录入数据。"><a href="#junit是自动化单元测试，不支持手动录入数据。" class="headerlink" title="junit是自动化单元测试，不支持手动录入数据。"></a>junit是自动化单元测试，不支持手动录入数据。</h3><h4 id="第一种方式：参数化测试"><a href="#第一种方式：参数化测试" class="headerlink" title="第一种方式：参数化测试"></a>第一种方式：参数化测试</h4><p>1.固定参数:</p><pre><code>public void test(){    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream("saber".getBytes());    System.setIn(byteArrayInputStream);    Scanner sc = new Scanner(System.in);    String s = sc.nextLine();    System.out.println("输入的是"+s);}</code></pre><p>2.复杂参数举例：</p><pre><code>/** * @author cxy * 参数化测试斐波那契额数列 * 当类被@RunWith注解修饰，或者类继承了一个被该注解修饰的类， * JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不使用JUnit默认的运行器。 */@RunWith(Parameterized.class)public class FibonacciTest {    /**     * 测试多个参数     * Junit4 中通过 Parameterized 运行器实现参数化测试。该方法必须是静态的     * {index}: 当前参数的索引     * {0}, {1}, …: 第一个参数，第二个参数等,参数值..     */    @Parameterized.Parameters(name = "{index}: fib({0})={1}")    public static Collection&lt;Object[]&gt; data() {        return Arrays.asList(new Object[][]{                {0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 3}, {5, 5}, {6, 8}        });    }    //如果你的测试只需要单个参数，则不需要将其包装成数组    //@Parameterized.Parameters    //public static Iterable&lt;? extends Object&gt; data() {    //    return Arrays.asList("first test", "second test");    //}    /**     * 使用无参构造必须 @Parameterized.Parameter注入属性     */    public FibonacciTest() {    }    /**     * 输入参数     * 如果使用无参构造 @Parameterized.Parameter 属性注入     */    @Parameterized.Parameter    public int fInput;    /**     * 期待的结果     */    @Parameterized.Parameter(1)    public int fExpected;    //使用带参构造注入属性    //    public FibonacciTest(int input, int expected){    //        fInput = input;    //        fExpected = expected;    //    }    /**     * 待测试的方法     */    public static class Fibonacci {        public static int compute(int n) {            int result = 0;            if (n &lt;= 1) {                result = n;            } else {                result = compute(n - 1) + compute(n - 2);            }            return result;        }    }    @Test    public void testFibonacci() {        Assert.assertEquals(fExpected, Fibonacci.compute(fInput));    }}</code></pre><h5 id="第二种方式：读取资源文件测试"><a href="#第二种方式：读取资源文件测试" class="headerlink" title="第二种方式：读取资源文件测试"></a>第二种方式：读取资源文件测试</h5><p>将待测试的类放到test的资源文件中，如果是复杂类型选择json文件读取时解析</p><pre><code>public class MainTest {    private List&lt;String&gt; datas;    @Before    public void init() throws IOException {        //输入流读取文件        InputStream inputStream = this.getClass().getResource("/data.txt").openStream();        datas = IOUtils.readLines(inputStream, Charset.forName("utf-8"));    }    @Test    public void test() {        SomeClass someClass = new SomeClass();        for (String line : datas) {            String[] split = line.split(",");            Assert.assertEquals(split[1], someClass.someMethod(split[0]));        }    }}</code></pre><h3 id="那么我就想手动输入测试数据呢？"><a href="#那么我就想手动输入测试数据呢？" class="headerlink" title="那么我就想手动输入测试数据呢？"></a>那么我就想手动输入测试数据呢？</h3><p>可以使用以下的方式</p><h4 id="1、直接使用main函数"><a href="#1、直接使用main函数" class="headerlink" title="1、直接使用main函数"></a>1、直接使用main函数</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个单词:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的是"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、修改虚拟机参数-设置参数为"><a href="#2、修改虚拟机参数-设置参数为" class="headerlink" title="2、修改虚拟机参数 设置参数为"></a>2、修改虚拟机参数 设置参数为</h4><p>-Deditable.java.test.console=true</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个单词:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的是"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>实现RBTree核心方法</title>
      <link href="2020/04/21/%E5%AE%9E%E7%8E%B0RBTree%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95/"/>
      <url>2020/04/21/%E5%AE%9E%E7%8E%B0RBTree%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1、自定义RbTree"><a href="#1、自定义RbTree" class="headerlink" title="1、自定义RbTree"></a>1、自定义RbTree</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RbTree</span><span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">></span><span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> RED <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> BLACK <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根节点</span>    <span class="token keyword">private</span> RbNode root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RbTree</span><span class="token punctuation">(</span>RbNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">RbTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//RbNode节点</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RbNode</span><span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>K<span class="token operator">></span><span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> color<span class="token punctuation">;</span>        <span class="token keyword">private</span> RbNode parent<span class="token punctuation">;</span>        <span class="token keyword">private</span> RbNode left<span class="token punctuation">;</span>        <span class="token keyword">private</span> RbNode right<span class="token punctuation">;</span>        <span class="token keyword">private</span> K key<span class="token punctuation">;</span>        <span class="token keyword">private</span> V value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">RbNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">RbNode</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> color<span class="token punctuation">,</span> RbNode parent<span class="token punctuation">,</span> RbNode left<span class="token punctuation">,</span> RbNode right<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> RbNode <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParent</span><span class="token punctuation">(</span>RbNode parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> RbNode <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span>RbNode left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> RbNode <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span>RbNode right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span>K key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、左旋"><a href="#2、左旋" class="headerlink" title="2、左旋"></a>2、左旋</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 左旋* @param x*         p             p*         |              |*          x     --->    y*         / \           / \*         lx y       x  ry*         /  \     / \*         ly  ry   lx ly* 1.y的左子节点ly变为x的右子节点 ly的父节点变为x* 2.x的父节点变为y的父节点 p的子节点变为y* 3.x的父节点变为y y的左子节点变为x*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>RbNode x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取x的右子节点y</span>    RbNode y <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果不存在右子节点不进行任何操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// x 的右子节点变为ly</span>    x<span class="token punctuation">.</span>right <span class="token operator">=</span> y<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ly父节点变为当x</span>    y<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>parent<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//x的父节点变为y的父节点</span>    y<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定子树</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将当前节点的父节点指定为右子节点</span>    y<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将右子节点的的左子节点指定为当前节点</span>    x<span class="token punctuation">.</span>left <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//x的父节点变为y</span>    x<span class="token punctuation">.</span>parent <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//y的左子节点变为x</span>    y<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//x为根节点 跟新根节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//置空父节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span>parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、右旋"><a href="#3、右旋" class="headerlink" title="3、右旋"></a>3、右旋</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 右旋 * @param y *         p            p *         |              | *          y     --->    x *        / \           / \ *       x  ry       lx  y *      / \             / \ *     lx rx           rx ry */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>RbNode y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取左子节点</span>    RbNode x <span class="token operator">=</span> y<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//y的左子节点变为x的右子节点</span>    y<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//rx的父节点变为y</span>        x<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//x的父节点变为y的父节点</span>        x<span class="token punctuation">.</span>parent <span class="token operator">=</span> y<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> y<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            y<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            y<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//x右节点变为y</span>        x<span class="token punctuation">.</span>right <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//y的父节点变为x</span>        y<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//y为根节点 更新根节点为x</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//置空父节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span>parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、插入节点"><a href="#4、插入节点" class="headerlink" title="4、插入节点"></a>4、插入节点</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 插入节点 * @param key * @param value */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span>V value<span class="token punctuation">)</span><span class="token punctuation">{</span>    RbNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> Object<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RbNode</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新节点一定为红色</span>    node<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 套娃插入节点 * @param node */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//从根节点开始查找插入结点的父节点</span>    <span class="token comment" spellcheck="true">//记录当前查找的节点</span>    RbNode parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    RbNode x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        parent <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较node的key和x的key的大小</span>        <span class="token keyword">int</span> cmp <span class="token operator">=</span> node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当前节点key等于查找的节点 覆盖值</span>            x<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//前往节点的右子树查找</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//前往节点的左子树查找</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//新插节点的父节点为当前查找的节点</span>    node<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//比较key的大小 判断新插节点为父节点的左子节点或右子节点</span>        <span class="token keyword">int</span> cpm <span class="token operator">=</span> node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cpm<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//RbTree为空 新插节点为根节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修复红黑树平衡</span>    <span class="token function">insertFixUp</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-修复平衡"><a href="#5-修复平衡" class="headerlink" title="5.修复平衡"></a>5.修复平衡</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 红黑树自平衡 * 新插节点父节点为黑色、新插节点key已存在(只是value覆盖)无需处理 * @param node */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertFixUp</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//插入节点为根节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//父节点</span>    RbNode parent <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//祖父节点</span>    RbNode gParent <span class="token operator">=</span> <span class="token function">parentOf</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入节点的父节点为红色 一定存在祖父节点 因为根节点不可能为红色</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        RbNode uncle <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> gParent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//父节点为祖父节点的左节点</span>            uncle <span class="token operator">=</span> gParent<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>uncle <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//叔叔节点存在 并且 父-叔双红</span>                <span class="token comment" spellcheck="true">//父节点染为黑色 祖父节点染为红色</span>                <span class="token function">setBlack</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setBlack</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setRed</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把祖父节点作为当前节点进行处理</span>                <span class="token function">insertFixUp</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>uncle <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//叔叔节点不存在或者为黑色</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//左左(父子)双红</span>                    <span class="token comment" spellcheck="true">//父节点染为黑色 祖父节点染为红色</span>                    <span class="token function">setBlack</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setRed</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//以祖父节点为当前节点右旋</span>                    <span class="token function">rightRotate</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//左右双红 以父节点为当前节点左旋形成左左双红</span>                    <span class="token function">leftRotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//以父节点为当前节点进行下一次操作</span>                    <span class="token function">insertFixUp</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//父节点为祖父节点的右节点</span>            uncle <span class="token operator">=</span> gParent<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>uncle <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//叔叔节点存在 并且 父-叔双红</span>                <span class="token comment" spellcheck="true">//父节点染为黑色 祖父节点染为红色</span>                <span class="token function">setBlack</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setBlack</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setRed</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把祖父节点作为当前节点进行处理</span>                <span class="token function">insertFixUp</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uncle <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//叔叔节点不存在或者叔叔节点为黑色</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//右左双红 以父节点作为当前节点进行右旋</span>                    <span class="token function">rightRotate</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//以父节点作为当前节点进行下一次操作</span>                    <span class="token function">insertFixUp</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//右右双红</span>                    <span class="token comment" spellcheck="true">//父节点染为黑色，祖父节点染为红色</span>                    <span class="token function">setBlack</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setRed</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//以祖父节点为当前节点进行左旋操作</span>                    <span class="token function">leftRotate</span><span class="token punctuation">(</span>gParent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、辅助方法"><a href="#6、辅助方法" class="headerlink" title="6、辅助方法"></a>6、辅助方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取当前节点的父节点 * * @param node * @return */</span><span class="token keyword">private</span> RbNode <span class="token function">parentOf</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 判断是否为红色节点 * * @param node * @return */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRed</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>color <span class="token operator">==</span> RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 判断是否为黑色节点 * * @param node * @return */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>color <span class="token operator">==</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 设置为红色节点 * * @param node */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setRed</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 设置为黑色节点 * * @param node */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setBlack</span><span class="token punctuation">(</span>RbNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>color <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>事务总结</title>
      <link href="2020/03/18/%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/"/>
      <url>2020/03/18/%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="1、哪些东西是一定要回滚的、哪些即使出错了不必要回滚的。"><a href="#1、哪些东西是一定要回滚的、哪些即使出错了不必要回滚的。" class="headerlink" title="1、哪些东西是一定要回滚的、哪些即使出错了不必要回滚的。"></a>1、哪些东西是一定要回滚的、哪些即使出错了不必要回滚的。</h2><h2 id="2、事务的传播行为"><a href="#2、事务的传播行为" class="headerlink" title="2、事务的传播行为"></a>2、事务的传播行为</h2><p>propagation:当前方法的事务是否要和别人公用一个事务,以及如何传播下去（里面的方法如果用事务，是否和他公用一个事务）</p><pre><code>Propagation propagation() default Propagation.REQUIRED;REQUIRED:(必须):    Support a current transaction, create a new one if none exists.    如果以前有事务，就和之前的事务公用一个事务，没有就创建一个事务；REQUIRES_NEW（总是用新的事务）:    Create a new transaction, and suspend the current transaction if one exists.    创建一个新的事务，如果以前有事务，暂停前面的事务。SUPPORTS（支持）:    Support a current transaction, execute non-transactionally if none exists.    之前有事务，就以事务的方式运行，没有事务也可以；MANDATORY（强制）:没事务就报错    Support a current transaction, throw an exception if none exists           一定要有事务，如果没事务就报错NOT_SUPPORTED（不支持）:    Execute non-transactionally, suspend the current transaction if one exists    不支持在事务内运行，如果已经有事务了，就挂起当前存在的事务NEVER（从不使用）:     Execute non-transactionally, throw an exception if a transaction exists.    不支持在事务内运行，如果已经有事务了，抛异常NESTED:    Execute within a nested transaction if a current transaction exists,    开启一个子事务（MySQL不支持），需要支持还原点功能的数据库才行；</code></pre><p>举例：<br>    一家人带着老王去旅游，开自己的车还是坐老王的车</p><pre class="line-numbers language-java"><code class="language-java">    Required：坐老王车    Requires_new：一定得开车，开新的    SUPPORTS：用车，有车就用，没车走路；    MANDATORY：用车，没车就骂街。。。    NOT_SUPPORTED：不支持用车。有车放那不用    NEVER：从不用车，有车抛异常  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际事务：</p><pre class="line-numbers language-java"><code class="language-java">Requires_new 外事务<span class="token punctuation">{</span>     A（）；Required<span class="token punctuation">;</span> A     B（）<span class="token punctuation">;</span>Requires_new B    <span class="token keyword">try</span><span class="token punctuation">{</span>         <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Required<span class="token punctuation">;</span> C    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//c出异常？</span>    <span class="token punctuation">}</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Requires_new<span class="token punctuation">;</span> D    <span class="token comment" spellcheck="true">//给数据库存 --外事务</span>    <span class="token comment" spellcheck="true">// int i = 10/0;</span> <span class="token punctuation">}</span>场景<span class="token number">1</span>：    A方法出现了异常；由于异常机制导致代码停止，下面无法执行，数据库什么都没有场景<span class="token number">2</span>：    C方法出现异常；A回滚，B成功，C回滚，D无法执行，外无法执行场景<span class="token number">3</span>：    外成了后，<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span> B<span class="token punctuation">,</span>D成功。A<span class="token punctuation">,</span>C<span class="token punctuation">,</span>外都执行了但是必须回滚场景<span class="token number">4</span>：    D炸；抛异常。外事务感知到异常。A<span class="token punctuation">,</span>C回滚，外执行不到，D自己回滚，B成功场景<span class="token number">5</span>：    C用<span class="token keyword">try</span><span class="token operator">-</span><span class="token keyword">catch</span>执行；C出了异常回滚，由于异常被捕获，外事务没有感知异常。A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>D都成，C自己回滚总结：    传播行为过程中，只要Requires_new被执行过就一定成功，不管后面出不出问题。异常机制还是一样的，出现异常代码以后不执行。Required只要感觉到异常就一定回滚。和外事务是什么传播行为无关。传播行为总是来定义，当一个事务存在的时候，他内部的事务该怎么执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务Spring中是怎么做的？"><a href="#事务Spring中是怎么做的？" class="headerlink" title="事务Spring中是怎么做的？"></a>事务Spring中是怎么做的？</h2><p>aop代理</p><pre class="line-numbers language-java"><code class="language-java">hahaServiceProxy<span class="token punctuation">.</span><span class="token function">saveBaseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">{</span>        <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1,2,3</span>        <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4,5,6</span>        <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//7,8,9</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>自己类调用自己类里面的方法，就是一个复制粘贴，无法加上事务。对象<span class="token punctuation">.</span>方法<span class="token punctuation">(</span><span class="token punctuation">)</span>才能加上事务。A<span class="token punctuation">{</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        hahaService<span class="token punctuation">.</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hahaService<span class="token punctuation">.</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hahaService<span class="token punctuation">.</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>事务的问题：    Service自己调用自己的方法，无法加上真正的自己内部调整的各个事务    解决：        <span class="token comment" spellcheck="true">//获取代理对象</span>          xxxImpl proxy <span class="token operator">=</span> <span class="token punctuation">(</span>xxxImpl<span class="token punctuation">)</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用代理对象调用方法</span>          proxy<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隔离级别："><a href="#隔离级别：" class="headerlink" title="隔离级别："></a>隔离级别：</h2><p>解决读写加锁问题的（数据底层的方案）。MYSQL默认可重复读（快照）    </p><ul><li>读未提交</li><li>读已提交</li><li>可重复读</li><li>串行化</li></ul><h2 id="异常回滚策略"><a href="#异常回滚策略" class="headerlink" title="异常回滚策略"></a>异常回滚策略</h2><p>异常：</p><ul><li>运行时异常（不受检查异常）<br>ArithmeticException ……</li><li>编译时异常（受检异常）<br>FileNotFound</li></ul><h3 id="运行的异常默认是一定回滚"><a href="#运行的异常默认是一定回滚" class="headerlink" title="运行的异常默认是一定回滚"></a>运行的异常默认是一定回滚</h3><h3 id="编译时异常默认是不回滚的；"><a href="#编译时异常默认是不回滚的；" class="headerlink" title="编译时异常默认是不回滚的；"></a>编译时异常默认是不回滚的；</h3><h3 id="rollbackFor：指定哪些异常一定回滚的。"><a href="#rollbackFor：指定哪些异常一定回滚的。" class="headerlink" title="rollbackFor：指定哪些异常一定回滚的。"></a>rollbackFor：指定哪些异常一定回滚的。</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//所有异常都回滚</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span>Param param<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>阿里云文件上传</title>
      <link href="2020/03/18/%E9%98%BF%E9%87%8C%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2020/03/18/%E9%98%BF%E9%87%8C%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 阿里云OSS --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置阿里云"><a href="#配置阿里云" class="headerlink" title="配置阿里云"></a>配置阿里云</h2><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">aliyun.oss.endpoint</span><span class="token punctuation">=</span><span class="token attr-value">oss-cn-beijing.aliyuncs.com</span><span class="token attr-name">aliyun.oss.accessKeyId</span><span class="token punctuation">=</span><span class="token attr-value">xxxxxxxxx</span><span class="token attr-name">aliyun.oss.accessKeySecret</span><span class="token punctuation">=</span><span class="token attr-value">xxxxxxxxx</span><span class="token attr-name">aliyun.oss.bucketName</span><span class="token punctuation">=</span><span class="token attr-value">xxxxxxxxx</span><span class="token attr-name">aliyun.oss.policy.expire</span><span class="token punctuation">=</span><span class="token attr-value">300</span><span class="token attr-name">aliyun.oss.maxSize</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">aliyun.oss.dir.prefix</span><span class="token punctuation">=</span><span class="token attr-value">gmall/images/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阿里云esc控制台开启跨域支持"><a href="#阿里云esc控制台开启跨域支持" class="headerlink" title="阿里云esc控制台开启跨域支持"></a>阿里云esc控制台开启跨域支持</h2><h2 id="前端点击文件上传请求后台-调用Controller"><a href="#前端点击文件上传请求后台-调用Controller" class="headerlink" title="前端点击文件上传请求后台 调用Controller"></a>前端点击文件上传请求后台 调用Controller</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定跨域来源 禁止非www.baidu.com来源访问</span><span class="token comment" spellcheck="true">//@CrossOrigin(origins = "www.baidu.com")</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"OssController"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"Oss管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/aliyun/oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OssCompent ossComponent<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"oss上传签名生成"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/policy"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Object <span class="token function">policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OssPolicyResult policy <span class="token operator">=</span> ossComponent<span class="token punctuation">.</span><span class="token function">policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 给前端返回一个阿里云文件上传的签证 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssCompent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.policy.expire}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ALIYUN_OSS_EXPIRE<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.maxSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ALIYUN_OSS_MAX_SIZE<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.bucketName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ALIYUN_OSS_BUCKET_NAME<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.endpoint}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ALIYUN_OSS_ENDPOINT<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.dir.prefix}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ALIYUN_OSS_DIR_PREFIX<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.accessKeyId}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ALIYUN_OSS_KEY<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${aliyun.oss.accessKeySecret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String ALIYUN_OSS_SECRET_KEY<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OSSClient ossClient<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 签名生成      */</span>    <span class="token keyword">public</span> OssPolicyResult <span class="token function">policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OssPolicyResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OssPolicyResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储目录</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String dir <span class="token operator">=</span> ALIYUN_OSS_DIR_PREFIX<span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 签名有效期</span>        <span class="token keyword">long</span> expireEndTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ALIYUN_OSS_EXPIRE <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        Date expiration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expireEndTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件大小</span>        <span class="token keyword">long</span> maxSize <span class="token operator">=</span> ALIYUN_OSS_MAX_SIZE <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提交节点</span>        String action <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ALIYUN_OSS_BUCKET_NAME <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> ALIYUN_OSS_ENDPOINT<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            PolicyConditions policyConds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PolicyConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            policyConds<span class="token punctuation">.</span><span class="token function">addConditionItem</span><span class="token punctuation">(</span>PolicyConditions<span class="token punctuation">.</span>COND_CONTENT_LENGTH_RANGE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            policyConds<span class="token punctuation">.</span><span class="token function">addConditionItem</span><span class="token punctuation">(</span>MatchMode<span class="token punctuation">.</span>StartWith<span class="token punctuation">,</span> PolicyConditions<span class="token punctuation">.</span>COND_KEY<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            String postPolicy <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">generatePostPolicy</span><span class="token punctuation">(</span>expiration<span class="token punctuation">,</span> policyConds<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> binaryData <span class="token operator">=</span> postPolicy<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String policy <span class="token operator">=</span> BinaryUtil<span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>binaryData<span class="token punctuation">)</span><span class="token punctuation">;</span>            String signature <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">calculatePostSignature</span><span class="token punctuation">(</span>postPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回结果</span>        result<span class="token punctuation">.</span><span class="token function">setAccessKeyId</span><span class="token punctuation">(</span>ossClient<span class="token punctuation">.</span><span class="token function">getCredentialsProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setPolicy</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setSignature</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"签名生成失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> OSSClient <span class="token function">ossClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//public OSSClient(String endpoint, String accessKeyId, String secretAccessKey)</span>    OSSClient ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClient</span><span class="token punctuation">(</span>ALIYUN_OSS_ENDPOINT<span class="token punctuation">,</span> ALIYUN_OSS_KEY<span class="token punctuation">,</span> ALIYUN_OSS_SECRET_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ossClient<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端拿到签名上传文件"><a href="#前端拿到签名上传文件" class="headerlink" title="前端拿到签名上传文件"></a>前端拿到签名上传文件</h2><h2 id="思考：这么做好处在哪儿？"><a href="#思考：这么做好处在哪儿？" class="headerlink" title="思考：这么做好处在哪儿？"></a>思考：这么做好处在哪儿？</h2><h3 id="1-文件上传全交给前端，减少了后端并发量"><a href="#1-文件上传全交给前端，减少了后端并发量" class="headerlink" title="1.文件上传全交给前端，减少了后端并发量"></a>1.文件上传全交给前端，减少了后端并发量</h3><h3 id="2-生成的签证只能使用一次，提升了安全性"><a href="#2-生成的签证只能使用一次，提升了安全性" class="headerlink" title="2.生成的签证只能使用一次，提升了安全性"></a>2.生成的签证只能使用一次，提升了安全性</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>无限级菜单</title>
      <link href="2020/03/17/%E6%97%A0%E9%99%90%E7%BA%A7%E8%8F%9C%E5%8D%95/"/>
      <url>2020/03/17/%E6%97%A0%E9%99%90%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<h2 id="MybatisPlus-递归实现无限级菜单"><a href="#MybatisPlus-递归实现无限级菜单" class="headerlink" title="MybatisPlus 递归实现无限级菜单"></a>MybatisPlus 递归实现无限级菜单</h2><h3 id="1-实体类"><a href="#1-实体类" class="headerlink" title="1.实体类"></a>1.实体类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsProductCategory</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-菜单封装类"><a href="#2-菜单封装类" class="headerlink" title="2.菜单封装类"></a>2.菜单封装类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 父级菜单本身是一个基本分类 只不过包含了一个子分类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsProductCategoryWithChildrenItem</span> <span class="token keyword">extends</span> <span class="token class-name">PmsProductCategory</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>PmsProductCategory<span class="token operator">></span> children<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在mapper中定义方法"><a href="#3-在mapper中定义方法" class="headerlink" title="3.在mapper中定义方法"></a>3.在mapper中定义方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PmsProductCategoryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>PmsProductCategory<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询当前菜单及子菜单</span>    List<span class="token operator">&lt;</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span> <span class="token function">listCatelogWithChilder</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-修改xml文件"><a href="#4-修改xml文件" class="headerlink" title="4.修改xml文件"></a>4.修改xml文件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.saber.gmall.pms.mapper.PmsProductCategoryMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通用查询映射结果 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.saber.gmall.pms.entity.PmsProductCategory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parentId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>product_count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>productCount<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>product_unit<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>productUnit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav_status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navStatus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show_status<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showStatus<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sort<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sort<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 通用查询结果列 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id, parent_id, name, level, product_count, product_unit, nav_status, show_status, sort, icon, keywords, description    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 查询结果封装列 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ExtendResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.saber.gmall.vo.product.PmsProductCategoryWithChildrenItem<span class="token punctuation">"</span></span>    <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>children<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listCatelogWithChilder<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- List&lt;PmsProductCategoryWithChildrenItem> listCatelogWithChilder(Integer i) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listCatelogWithChilder<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ExtendResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM pms_product_category WHERE parent_id = # {i}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出底层不过是根据父id查询数据，关键在于结果封装列里<strong>children属性</strong>，它的数据来源为下一次以<strong>本次结果集id字段</strong>为条件再次查询，那么只要还存在子集就会一直查询下去，直到查出所有。</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>上述的方式的确可以封装多级菜单，但是每次都遇到查询很多次的sql，对服务器的资源消耗很大：</p><pre class="line-numbers language-cmd"><code class="language-cmd">2020-03-17 17:34:08.022 DEBUG 16620 --- [20800-thread-19] c.s.g.p.m.PmsProductMapper.selectPage    : ==>  Preparing: SELECT id,brand_id,product_category_id,feight_template_id,product_attribute_category_id,name,pic,product_sn,delete_status,publish_status,new_status,recommand_status,verify_status,sort,sale,price,promotion_price,gift_growth,gift_point,use_point_limit,sub_title,description,original_price,stock,low_stock,unit,weight,preview_status,service_ids,keywords,note,album_pics,detail_title,detail_desc,detail_html,detail_mobile_html,promotion_start_time,promotion_end_time,promotion_per_limit,promotion_type,brand_name,product_category_name FROM pms_product LIMIT 0,5 2020-03-17 17:34:08.022 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ==> Parameters: 0(Integer)2020-03-17 17:34:08.022 DEBUG 16620 --- [20800-thread-20] c.s.g.p.m.PmsBrandMapper.selectPage      : ==> Parameters: 2020-03-17 17:34:08.022 DEBUG 16620 --- [20800-thread-19] c.s.g.p.m.PmsProductMapper.selectPage    : ==> Parameters: 2020-03-17 17:34:08.024 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ====>  Preparing: SELECT * FROM pms_product_category WHERE parent_id = ? 2020-03-17 17:34:08.025 DEBUG 16620 --- [20800-thread-20] c.s.g.p.m.PmsBrandMapper.selectPage      : <==      Total: 102020-03-17 17:34:08.025 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ====> Parameters: 1(Long)2020-03-17 17:34:08.025 DEBUG 16620 --- [20800-thread-20] org.mybatis.spring.SqlSessionUtils       : Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@12924a24]2020-03-17 17:34:08.027 DEBUG 16620 --- [20800-thread-19] c.s.g.p.m.PmsProductMapper.selectPage    : <==      Total: 52020-03-17 17:34:08.027 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ======>  Preparing: SELECT * FROM pms_product_category WHERE parent_id = ? 2020-03-17 17:34:08.027 DEBUG 16620 --- [20800-thread-19] org.mybatis.spring.SqlSessionUtils       : Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@471384b3]2020-03-17 17:34:08.027 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ======> Parameters: 7(Long)2020-03-17 17:34:08.029 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ========>  Preparing: SELECT * FROM pms_product_category WHERE parent_id = ? 2020-03-17 17:34:08.030 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ========> Parameters: 53(Long)2020-03-17 17:34:08.032 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : <========      Total: 02020-03-17 17:34:08.033 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ========>  Preparing: SELECT * FROM pms_product_category WHERE parent_id = ? 2020-03-17 17:34:08.034 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : ========> Parameters: 55(Long)2020-03-17 17:34:08.035 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : <========      Total: 02020-03-17 17:34:08.036 DEBUG 16620 --- [20800-thread-21] c.s.g.p.m.P.listCatelogWithChilder       : <======      Total: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>那么我们该如何去解决的？<br><br>首先想到的就是使用一个容器比如HashMap把数据存储起来，下次查询先判断map里是否有该数据，有就直接获取，没有就查询并存储到容器<br><br><br>但是这里也有一个问题，如果是单体项目这样肯定没问题；如果是分布式项目呢？</p><ul><li>假设这个功能我部署到100服务器上，HashMap只能存在于当前服务器，那么由于负载均衡每个服务器都会被访问到，就需要存储100次数据</li></ul><p>那么就利用redis缓存，为什么不用cookie呢，因为他有大小限制。</p><h3 id="添加redis场景启动器"><a href="#添加redis场景启动器" class="headerlink" title="添加redis场景启动器"></a>添加redis场景启动器</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.227.200</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="导入RedisTemplate"><a href="#导入RedisTemplate" class="headerlink" title="导入RedisTemplate"></a>导入RedisTemplate</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里有个问题，我们存储的数据都是以对象的基础单位的，redis中存对象默认是使用序列化方式，而RedisTemplate默认使用jdk序列化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">redisTemplateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        PmsBrand pmsBrand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pmsBrand<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplateObj<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span>pmsBrand <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存了对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object abc <span class="token operator">=</span> redisTemplateObj<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际存储：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//key:</span>\xAC\xED\x00\x05t\x00\x03abc<span class="token comment" spellcheck="true">//value:</span>\xAC\xED\x00\x05sr\x00# com<span class="token punctuation">.</span>saber<span class="token punctuation">.</span>gmall<span class="token punctuation">.</span>pms<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>PmsBrand\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x0BL\x00\x06bigPict\x00\x12Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span>L\x00\x0AbrandStoryq\x00<span class="token operator">~</span>\x00\x01L\x00\x0DfactoryStatust\x00\x13Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Integer<span class="token punctuation">;</span>L\x00\x0BfirstLetterq\x00<span class="token operator">~</span>\x00\x01L\x00\x02idt\x00\x10Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Long<span class="token punctuation">;</span>L\x00\x04logoq\x00<span class="token operator">~</span>\x00\x01L\x00\x04nameq\x00<span class="token operator">~</span>\x00\x01L\x00\x13productCommentCountq\x00<span class="token operator">~</span>\x00\x02L\x00\x0CproductCountq\x00<span class="token operator">~</span>\x00\x02L\x00\x0AshowStatusq\x00<span class="token operator">~</span>\x00\x02L\x00\x04sortq\x00<span class="token operator">~</span>\x00\x02xpppppppt\x00\x05hellopppp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是没有可读性,第二是如果有一天改用其他的语言(PHP)编写那么他将拿不到这个数据，所以要将数据序列成通用格式，比如json</p><h3 id="配置RedisTemplate序列化规则"><a href="#配置RedisTemplate序列化规则" class="headerlink" title="配置RedisTemplate序列化规则"></a>配置RedisTemplate序列化规则</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsRedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改默认的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setDefaultSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最终业务"><a href="#最终业务" class="headerlink" title="最终业务"></a>最终业务</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span> <span class="token function">listCatelogWithChilder</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先查询缓存中是否有菜单</span>    Object cacheMenu <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>SysCacheConstant<span class="token punctuation">.</span>CATEGORY_MENU_XACHE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span> items<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMenu<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//缓存里有 强转</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"菜单数据命中缓存..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        items <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span><span class="token punctuation">)</span> cacheMenu<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//缓存里没有 查询数据库</span>        items <span class="token operator">=</span> productCategoryMapper<span class="token punctuation">.</span><span class="token function">listCatelogWithChilder</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>SysCacheConstant<span class="token punctuation">.</span>CATEGORY_MENU_XACHE_KEY<span class="token punctuation">,</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> items<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>第一次发送大sql查询数据库<br><br>第二次命中缓存：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">37.501</span> DEBUG <span class="token number">9252</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">20800</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisConnectionUtils    <span class="token operator">:</span> Closing Redis Connection<span class="token punctuation">.</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">37.501</span> DEBUG <span class="token number">9252</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">:</span><span class="token number">20800</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span>s<span class="token punctuation">.</span>g<span class="token punctuation">.</span>p<span class="token punctuation">.</span>s<span class="token punctuation">.</span>i<span class="token punctuation">.</span>PmsProductCategoryServiceImpl <span class="token operator">:</span> 菜单数据命中缓存<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>封装三级菜单</title>
      <link href="2020/03/17/%E5%B0%81%E8%A3%85%E4%B8%89%E7%BA%A7%E8%8F%9C%E5%8D%95/"/>
      <url>2020/03/17/%E5%B0%81%E8%A3%85%E4%B8%89%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<h2 id="适用于浅层级菜单，优点在于只需查询一次数据库。"><a href="#适用于浅层级菜单，优点在于只需查询一次数据库。" class="headerlink" title="适用于浅层级菜单，优点在于只需查询一次数据库。"></a>适用于浅层级菜单，优点在于只需查询一次数据库。</h2><h3 id="实体类（也是最基本的底层分类菜单）"><a href="#实体类（也是最基本的底层分类菜单）" class="headerlink" title="实体类（也是最基本的底层分类菜单）"></a>实体类（也是最基本的底层分类菜单）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsProductCategory</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需要返回的菜单类"><a href="#需要返回的菜单类" class="headerlink" title="需要返回的菜单类"></a>需要返回的菜单类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsProductCategoryWithChildrenItem</span> <span class="token keyword">extends</span> <span class="token class-name">PmsProductCategory</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//二级分类</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>PmsProductCategoryLevelTwo<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PmsProductCategoryLevelTwo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二级分类"><a href="#二级分类" class="headerlink" title="二级分类"></a>二级分类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsProductCategoryLevelTwo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//三级分类</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>PmsProductCategory<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PmsProductCategory<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现菜单封装"><a href="#实现菜单封装" class="headerlink" title="实现菜单封装"></a>实现菜单封装</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span> <span class="token function">listCatelogWithChilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//最终要返回的集合</span>    List<span class="token operator">&lt;</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储一级分类</span>    Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>PmsProductCategoryWithChildrenItem<span class="token operator">></span> mapOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储二级分类</span>    Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>PmsProductCategoryLevelTwo<span class="token operator">></span> mapTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询所有分类</span>    List<span class="token operator">&lt;</span>PmsProductCategory<span class="token operator">></span> selectList <span class="token operator">=</span> productCategoryMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PmsProductCategory category <span class="token operator">:</span> selectList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//一级分类</span>            PmsProductCategoryWithChildrenItem levelOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsProductCategoryWithChildrenItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>levelOne<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存储一级分类</span>            mapOne<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>levelOne<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构造一级菜单</span>            dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>levelOne<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//二级分类</span>            <span class="token comment" spellcheck="true">//获取当前分类的父级分类</span>            PmsProductCategoryWithChildrenItem parent <span class="token operator">=</span> mapOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取对应的子级分类</span>            List<span class="token operator">&lt;</span>PmsProductCategoryLevelTwo<span class="token operator">></span> children <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PmsProductCategoryLevelTwo levelTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsProductCategoryLevelTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>levelTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>            children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>levelTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存储二级分类</span>            mapTwo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>levelTwo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>levelTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构造二级菜单</span>            parent<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//三级分类</span>            <span class="token comment" spellcheck="true">//获取当前分类的父级分类</span>            PmsProductCategoryLevelTwo parent <span class="token operator">=</span> mapTwo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getParentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取对应的子级分类</span>            List<span class="token operator">&lt;</span>PmsProductCategory<span class="token operator">></span> children <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PmsProductCategory levelThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsProductCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span>levelThree<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构造三级菜单</span>            children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>levelThree<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dataList<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>整合切面、JSR、异常处理</title>
      <link href="2020/03/16/%E6%95%B4%E5%90%88%E5%88%87%E9%9D%A2%E3%80%81JSR%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>2020/03/16/%E6%95%B4%E5%90%88%E5%88%87%E9%9D%A2%E3%80%81JSR%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="1-切面编写"><a href="#1-切面编写" class="headerlink" title="1.切面编写"></a>1.切面编写</h2><ul><li><p>1)导入切面场景</p><pre><code> ```xml</code></pre>  <dependency>      <groupid>org.springframework.boot</groupid>      <artifactid>spring-boot-starter-aop</artifactid></dependency>  ```</li><li><p>2) 编写切面<br></p><p>  1、标注@Aspect<br></p><p>  2、编写切入点表达式<br></p><p>  3、使用通知：</p><pre><code>  前置通知：方法执行之前触发  后置通知：方法执行之后触发  返回通知：方法正常返回之后触发  异常通知：方法出现异常触发  环绕通知：以上4合1</code></pre></li><li><p>3) 执行流程</p><pre><code>  正常执行：   前置通知==&gt;返回通知==&gt;后置通知  异常执行：   前置通知==&gt;异常通知==&gt;后置通知</code></pre></li></ul><h2 id="2-编写异常处理器"><a href="#2-编写异常处理器" class="headerlink" title="2.编写异常处理器"></a>2.编写异常处理器</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 统一处理异常信息 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span> <span class="token comment" spellcheck="true">//当前类是一个异常处理类 并返回json数据</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 处理数学异常     * @param exception     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">handlerArithmeticException</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统全局异常感知，信息：{}"</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateFailed</span><span class="token punctuation">(</span><span class="token string">"数学计算出现错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理空指针异常     * @param exception     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>NullPointerException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">handlerNullPointerException</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统全局异常感知，信息：{}"</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateFailed</span><span class="token punctuation">(</span><span class="token string">"空指针了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-整合JSR303和异常处理器-切记务必抛出异常"><a href="#3-整合JSR303和异常处理器-切记务必抛出异常" class="headerlink" title="3.整合JSR303和异常处理器 切记务必抛出异常"></a>3.整合JSR303和异常处理器 切记<strong>务必抛出异常</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span> <span class="token comment" spellcheck="true">//标注切面类</span><span class="token annotation punctuation">@Component</span> <span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataVaildAspect</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//com.saber.gmall.admin下任意修饰符任意类的任意参数的任意方法</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.saber.gmall.admin..*Controller.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">vaildAround</span><span class="token punctuation">(</span>ProceedingJoinPoint point<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"校验切面介入工作。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"JSR303校验开始。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法返回的结果</span>        Object proceed <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arg <span class="token keyword">instanceof</span> <span class="token class-name">BindingResult</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断是否包含BandingResult</span>                    BindingResult r <span class="token operator">=</span> <span class="token punctuation">(</span>BindingResult<span class="token punctuation">)</span> arg<span class="token punctuation">;</span>                    <span class="token keyword">int</span> errorCount <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getErrorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取得BandingResult的错误条数</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>errorCount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"JSR303校验失败。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateFailed</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"JSR303校验成功。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("前置通知");</span>            <span class="token comment" spellcheck="true">//相等于反射的 method.invoke()</span>            proceed <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"校验切面放行目标方法。。。{}"</span><span class="token punctuation">,</span>proceed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println("返回通知");</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println("异常通知");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一定要抛出异常 否则不会进入异常处理类</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//System.out.println("后置通知");</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在controller里制造除0异常</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre><code>2020-03-16 19:42:07.024 DEBUG 16040 --- [nio-8081-exec-5] c.saber.gmall.admin.aop.DataVaildAspect  : 校验切面介入工作。。。2020-03-16 19:42:07.024 DEBUG 16040 --- [nio-8081-exec-5] c.saber.gmall.admin.aop.DataVaildAspect  : JSR303校验开始。。。2020-03-16 19:42:07.024 DEBUG 16040 --- [nio-8081-exec-5] c.saber.gmall.admin.aop.DataVaildAspect  : JSR303校验成功。。。2020-03-16 19:42:07.024 DEBUG 16040 --- [nio-8081-exec-5] c.s.g.a.u.controller.UmsAdminController  : 需要注册的用户详情：UmsAdminParam(username=saber, password=saber, icon=string, email=string@qq.com, nickName=null, note=string)2020-03-16 19:42:07.025 DEBUG 16040 --- [nio-8081-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Using @ExceptionHandler com.saber.gmall.admin.aop.GlobalExceptionHandler# handlerArithmeticException(Exception)2020-03-16 19:42:07.025 ERROR 16040 --- [nio-8081-exec-5] c.s.g.admin.aop.GlobalExceptionHandler   : 系统全局异常感知，信息：com.saber.gmall.admin.aop.DataVaildAspect.vaildAround(DataVaildAspect.java:68)2020-03-16 19:42:07.025 DEBUG 16040 --- [nio-8081-exec-5] m.m.a.RequestResponseBodyMethodProcessor : Using 'application/json', given [*/*] and supported [application/json, application/*+json, application/json, application/*+json]2020-03-16 19:42:07.025 DEBUG 16040 --- [nio-8081-exec-5] m.m.a.RequestResponseBodyMethodProcessor : Writing [{"code":404,"message":"数学计算出现错误！"}]2020-03-16 19:42:07.026 DEBUG 16040 --- [nio-8081-exec-5] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.RuntimeException: java.lang.ArithmeticException: / by zero]2020-03-16 19:42:07.026 DEBUG 16040 --- [nio-8081-exec-5] o.s.web.servlet.DispatcherServlet        : Completed 200 OK</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JSR303</title>
      <link href="2020/03/16/JSR303/"/>
      <url>2020/03/16/JSR303/</url>
      <content type="html"><![CDATA[<h2 id="SpringMVC支持使用-【JSR303】-方式进行校验"><a href="#SpringMVC支持使用-【JSR303】-方式进行校验" class="headerlink" title="SpringMVC支持使用 【JSR303】 方式进行校验"></a>SpringMVC支持使用 【JSR303】 方式进行校验</h2><h2 id="springboot默认导第三方的校验框架hibernate-validator"><a href="#springboot默认导第三方的校验框架hibernate-validator" class="headerlink" title="springboot默认导第三方的校验框架hibernate-validator"></a>springboot默认导第三方的校验框架hibernate-validator</h2><h2 id="使用JSR303的三大步："><a href="#使用JSR303的三大步：" class="headerlink" title="使用JSR303的三大步："></a>使用JSR303的三大步：</h2><ul><li><h2 id="1、给需要校验数据的javaBean上标注校验注解："><a href="#1、给需要校验数据的javaBean上标注校验注解：" class="headerlink" title="1、给需要校验数据的javaBean上标注校验注解："></a>1、给需要校验数据的javaBean上标注校验注解：</h2>能使用的校验注解:<ul><li>1)、Hibernate   org.hibernate.validator.constraints 里面的所有 <ul><li>2)、JSR303规范规定的都可；javax.validation.constraints</li></ul></li><li>3)、正则表达式 @Pattern(regexp = “”) </li></ul></li></ul><pre><code>```java    @Length(min = 4,max = 8,message = "用户名长度必须4-8位")    private String username;    @NotEmpty    private String password;    @Null  //必须为空    private String nickName;    @Pattern(regexp = "")//正则    private String note;</code></pre><pre><code> * ## 2、告诉SpringBoot，这个需要校验；@Valid *            springmvc进入方法之前，确定参数值的时候就会进行校验，如果校验出错，直接返回错误，不执行controller代码 * ## 3、如何感知校验成功还是失败；   * 1）.只给开启了校验的javaBean参数后面，紧跟一个BindingResult对象,就可以获取到校验结果;   * 2).只要有BindingResult，即使**校验错了方法也会执行**。我们需要手动处理```javapublic Object register(@Valid @RequestBody UmsAdminParam umsAdminParam, BindingResult result) {    int errorCount = result.getErrorCount();    if(errorCount&gt;0){  //校验失败        List&lt;FieldError&gt; fieldErrors = result.getFieldErrors();        fieldErrors.forEach((fieldError)-&gt;{            String field = fieldError.getField();            log.debug("出错的属性：{}，传来的值是：{}，校验出错。出错的提示消息：{}",                    field,fieldError.getRejectedValue(),fieldError.getDefaultMessage());        });        return new CommonResult().validateFailed(result);    }else {        //TODO 完成注册功能    }    log.debug("需要注册的用户详情：{}",umsAdminParam);    return new CommonResult().success("");}             </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MybatisPlus逆向工程</title>
      <link href="2020/03/13/MybatisPlus%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
      <url>2020/03/13/MybatisPlus%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 逆向工程依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatisPlus --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mysql--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--lombok用来简化实体类：需要安装lombok插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.16.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--swagger--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-生成"><a href="#2-生成" class="headerlink" title="2.生成"></a>2.生成</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String moduleName <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1、创建代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"someone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成后是否打开资源管理器</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重新生成时文件是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去掉Service接口的首字母I</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER_STR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主键策略</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义生成的实体类中日期类型</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启Swagger2模式</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/database"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        pc.setModuleName(moduleName); //模块名</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.xxx.xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span>moduleName <span class="token operator">+</span> <span class="token string">"tableName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置要映射的表名 _\\w* 表示所有表</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置表前缀不生成</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表字段映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lombok 模型 @Accessors(chain = true) setter链式操作</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"is_deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逻辑删除字段名</span>        <span class="token comment" spellcheck="true">//strategy.setEntityBooleanColumnRemoveIsPrefix(true);//去掉布尔值的is_前缀</span>        <span class="token comment" spellcheck="true">//自动填充</span>        TableFill gmtCreate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill gmtModified <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TableFill<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//乐观锁列</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//restful api风格控制器</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url中驼峰转连字符</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、执行</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>冒泡排序</title>
      <link href="2020/03/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>2020/03/09/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="方法思考："><a href="#方法思考：" class="headerlink" title="方法思考："></a>方法思考：</h3><h4 id="1-逻辑："><a href="#1-逻辑：" class="headerlink" title="1.逻辑："></a>1.逻辑：</h4><pre><code>1.遍历数组2.从第一个元素开始比较相邻两个元素的大小3.若 a[i] &gt; a[i+1] 就交换位置4.第一次循环结束后 a[a.length-1]处值为当前数组中的最大值5.开启第二次循环 6. ......</code></pre><h4 id="2-那么需要循环的条件又是什么呢？"><a href="#2-那么需要循环的条件又是什么呢？" class="headerlink" title="2.那么需要循环的条件又是什么呢？"></a>2.那么需要循环的条件又是什么呢？</h4><pre class="line-numbers language-java"><code class="language-java">根据上述逻辑分析得以下结论：    <span class="token number">1</span><span class="token punctuation">.</span>需要遍历a<span class="token punctuation">.</span>length次    <span class="token number">2</span><span class="token punctuation">.</span>每次循环需要比较相邻数的大小    <span class="token number">3</span><span class="token punctuation">.</span>满足条件得元素需要交换值    <span class="token number">4</span><span class="token punctuation">.</span>经过一次遍历最高位不用参与下次遍历（因为它为最大）    <span class="token number">5</span><span class="token punctuation">.</span>由<span class="token number">4</span>可得每次需要遍历的元素都会减少<span class="token number">1</span>         所以可以使用两层循环：            第一层次控制遍历次数，            第二层实现具体排序。    <span class="token number">6</span><span class="token punctuation">.</span>循环退出条件为 变量<span class="token operator">></span><span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用于排序     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">greater</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">exch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 比较两个元素的大小     * @param c1     * @param c2     * @return 返回最大值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">greater</span><span class="token punctuation">(</span>Comparable c1<span class="token punctuation">,</span> Comparable c2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> c1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 交换两个元素的位置     * @param a     * @param i     * @param j     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exch</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comparable temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Bubble<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印："><a href="#打印：" class="headerlink" title="打印："></a>打印：</h4><pre><code>[1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h3 id="时间复杂度（最坏情况）："><a href="#时间复杂度（最坏情况）：" class="headerlink" title="时间复杂度（最坏情况）："></a>时间复杂度（最坏情况）：</h3><pre><code>O(n^2)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 算法入门 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Comparable排序</title>
      <link href="2020/03/09/Comparable%E6%8E%92%E5%BA%8F/"/>
      <url>2020/03/09/Comparable%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="实体类实现Comparable接口："><a href="#实体类实现Comparable接口：" class="headerlink" title="实体类实现Comparable接口："></a>实体类实现Comparable接口：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//排序条件构造</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义排序方法："><a href="#定义排序方法：" class="headerlink" title="定义排序方法："></a>定义排序方法：</h3><p>其实就是利用Comparable接口的CompareTo方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Comparable <span class="token function">getMaxAge</span><span class="token punctuation">(</span>Comparable c1 <span class="token punctuation">,</span>Comparable c2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> c1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法调用："><a href="#方法调用：" class="headerlink" title="方法调用："></a>方法调用：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Comparable maxAge <span class="token operator">=</span> <span class="token function">getMaxAge</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印结果："><a href="#打印结果：" class="headerlink" title="打印结果："></a>打印结果：</h3><pre class="line-numbers language-java"><code class="language-java">Student<span class="token punctuation">{</span>age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 算法入门 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Zull网关</title>
      <link href="2020/03/09/Zull%E7%BD%91%E5%85%B3/"/>
      <url>2020/03/09/Zull%E7%BD%91%E5%85%B3/</url>
      <content type="html"><![CDATA[<h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--网关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置application-properties"><a href="#2-配置application-properties" class="headerlink" title="2.配置application.properties"></a>2.配置application.properties</h3><pre class="line-numbers language-properties"><code class="language-properties">服务端口<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9003</span><span class="token comment" spellcheck="true"># 服务名</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">edugateway</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建启动类-标注-EnableZuulProxy"><a href="#3-创建启动类-标注-EnableZuulProxy" class="headerlink" title="3.创建启动类 标注@EnableZuulProxy"></a>3.创建启动类 标注@EnableZuulProxy</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableZuulProxy</span> <span class="token comment" spellcheck="true">//作为网关启动</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduGatewayApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EduGatewayApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-功能配置"><a href="#4-功能配置" class="headerlink" title="4.功能配置"></a>4.功能配置</h3><h5 id="4-1-端口映射-（不适用于集群服务器）"><a href="#4-1-端口映射-（不适用于集群服务器）" class="headerlink" title="4.1 端口映射 （不适用于集群服务器）"></a>4.1 端口映射 （不适用于集群服务器）</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## 输入的路径包含eduservice 跳转到 8101端口</span><span class="token comment" spellcheck="true"># zuul.routes.api-edu.path=/eduservice/**</span><span class="token comment" spellcheck="true"># zuul.routes.api-edu.url=http://localhost:8101/eduservice/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问方式: <a href="http://localhost:网关端口/eduservice/controller路径">http://localhost:网关端口/eduservice/controller路径</a></p><h5 id="4-2-在服务中心注册以支持集群-通过服务名访问"><a href="#4-2-在服务中心注册以支持集群-通过服务名访问" class="headerlink" title="4.2 在服务中心注册以支持集群 通过服务名访问"></a>4.2 在服务中心注册以支持集群 通过服务名访问</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 指定注册中心地址</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://127.0.0.1:9002/eureka/</span><span class="token comment" spellcheck="true"># eureka上传获取的是服务器id地址 否则是主机名</span><span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是需要在网关启动类上标注 @EnableEurekaClient<br><br>访问方式:<a href="http://localhost:网关端口/服务名/controller路径">http://localhost:网关端口/服务名/controller路径</a></p><h5 id="4-3-禁止暴露接口"><a href="#4-3-禁止暴露接口" class="headerlink" title="4.3 禁止暴露接口"></a>4.3 禁止暴露接口</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## 禁止eduservice对外提供接口</span><span class="token comment" spellcheck="true"># zuul.ignored-services=eduservice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-4-禁止通过网关访问路由"><a href="#4-4-禁止通过网关访问路由" class="headerlink" title="4.4 禁止通过网关访问路由"></a>4.4 禁止通过网关访问路由</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">###  禁止通过网关访问路由 </span><span class="token comment" spellcheck="true"># zuul.ignored-patterns=/**/eduservice/**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-5-自定义路由映射"><a href="#4-5-自定义路由映射" class="headerlink" title="4.5 自定义路由映射"></a>4.5 自定义路由映射</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">###  自定义路由映射 起别名 </span><span class="token comment" spellcheck="true"># zuul.routes.eduservice=/service/**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-特别注意-Zuul默认不传递cookie"><a href="#5-特别注意-Zuul默认不传递cookie" class="headerlink" title="5.特别注意 Zuul默认不传递cookie"></a>5.特别注意 Zuul默认不传递cookie</h3><h5 id="使用postman的设置header提交"><a href="#使用postman的设置header提交" class="headerlink" title="使用postman的设置header提交"></a>使用postman的设置header提交</h5><h5 id="cookie-”cokie”"><a href="#cookie-”cokie”" class="headerlink" title="cookie=”cokie”"></a>cookie=”cokie”</h5><h5 id="token-”token”"><a href="#token-”token”" class="headerlink" title="token=”token”"></a>token=”token”</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zuulCookieTest</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>    String cookie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cookie:"</span><span class="token operator">+</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"token:"</span><span class="token operator">+</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果:"></a>打印结果:</h5><p>cookie:null </p><p>token:token</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 还原被网关过滤的请求头</span><span class="token attr-name">zuul.sensitive-headers</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="打印结果-1"><a href="#打印结果-1" class="headerlink" title="打印结果:"></a>打印结果:</h5><p>cookie:cookie</p><p>token:token</p><hr><h3 id="6-Zull过滤器"><a href="#6-Zull过滤器" class="headerlink" title="6.Zull过滤器"></a>6.Zull过滤器</h3><h4 id="6-1生命周期："><a href="#6-1生命周期：" class="headerlink" title="6.1生命周期："></a>6.1生命周期：</h4><h5 id="1-Pre-到达网关前执行"><a href="#1-Pre-到达网关前执行" class="headerlink" title="1.Pre:到达网关前执行"></a>1.Pre:到达网关前执行</h5><h5 id="2-Routing-经过网关到达服务器之前执行"><a href="#2-Routing-经过网关到达服务器之前执行" class="headerlink" title="2.Routing:经过网关到达服务器之前执行"></a>2.Routing:经过网关到达服务器之前执行</h5><h5 id="3-Post-经过服务器之后执行"><a href="#3-Post-经过服务器之后执行" class="headerlink" title="3.Post:经过服务器之后执行"></a>3.Post:经过服务器之后执行</h5><h5 id="4-Error-发生错误执行"><a href="#4-Error-发生错误执行" class="headerlink" title="4.Error:发生错误执行"></a>4.Error:发生错误执行</h5><hr><h4 id="6-2过滤器的配置与使用"><a href="#6-2过滤器的配置与使用" class="headerlink" title="6.2过滤器的配置与使用"></a>6.2过滤器的配置与使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 模拟鉴权 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义过滤器的类型（生命周期）     * @return  PRE_TYPE:到达网关前执行     *          ROUTE_TYPE:经过网关到达服务器之前执行     *          POST_TYPE:经过服务器之后执行     *          ERROR_TYPE:发生错误执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PRE_TYPE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 过滤器执行顺序     * @return  返回的值越小越先执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 决定是否要执行下面的run()方法     * @return  false:过滤器放行 不执行run()     *          true :过滤器拦截 执行run()     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断：访问路径包含 eduvideo/getPlayAuth 进行登录校验</span>        String playUrl <span class="token operator">=</span> <span class="token string">"eduvideo/getPlayAuth"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.获取请求路径uri</span>        RequestContext currentContext <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> currentContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.根据uri判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>requestURI<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>requestURI<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>playUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//拦截</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//放行</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 过滤器的具体逻辑     * @return     * @throws ZuulException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ZuulException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RequestContext currentContext <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> currentContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用户未登录 不包含token</span>            currentContext<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面不能访问</span>            <span class="token comment" spellcheck="true">//设置状态码</span>            currentContext<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>微信登录总结</title>
      <link href="2020/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E6%80%BB%E7%BB%93/"/>
      <url>2020/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="步骤简介："><a href="#步骤简介：" class="headerlink" title="步骤简介："></a>步骤简介：</h2><p>1.用户点击微信登录 生成二维码</p><p>2.用户扫描二维码 调用回调方法 返回扫码后的票据</p><p>3.使用票据请求微信后台能够获得扫码人的信息凭证和微信id</p><p>4.使用信息凭证和微信id请求微信后端获得扫码人的信息</p><hr><h2 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h2><h4 id="1-前台点击微信登录按钮，请求后台"><a href="#1-前台点击微信登录按钮，请求后台" class="headerlink" title="1.前台点击微信登录按钮，请求后台"></a>1.前台点击微信登录按钮，请求后台</h4><h4 id="2-后端返回二维码图片地址"><a href="#2-后端返回二维码图片地址" class="headerlink" title="2.后端返回二维码图片地址"></a>2.后端返回二维码图片地址</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生成登录的二维码 *      调用一个固定的地址 生成二维码 */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">genQrConnect</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.定义微信开放平台授权baseUrl</span>    String baseUrl <span class="token operator">=</span> <span class="token string">"https://open.weixin.qq.com/connect/qrconnect"</span> <span class="token operator">+</span>            <span class="token string">"?appid=%s"</span> <span class="token operator">+</span>            <span class="token string">"&amp;redirect_uri=%s"</span> <span class="token operator">+</span>            <span class="token string">"&amp;response_type=code"</span> <span class="token operator">+</span>            <span class="token string">"&amp;scope=snsapi_login"</span> <span class="token operator">+</span>            <span class="token string">"# wechat_redirect"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.获取回调地址</span>    String redirectUrl <span class="token operator">=</span><span class="token string">"你的微信开放平台 重定向url"</span><span class="token punctuation">;</span>    String appId <span class="token operator">=</span> <span class="token string">"你的微信开放平台 appid"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.设置编码</span>        redirectUrl <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url编码</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//4.拼接qrcodeUrl</span>    String qrcodeUrl <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>            baseUrl<span class="token punctuation">,</span>            appId<span class="token punctuation">,</span>            redirectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.重定向二维码地址</span>    <span class="token keyword">return</span> <span class="token string">"redirect:"</span> <span class="token operator">+</span> qrcodeUrl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-前台用户扫描二维码确认登陆"><a href="#3-前台用户扫描二维码确认登陆" class="headerlink" title="3.前台用户扫描二维码确认登陆"></a>3.前台用户扫描二维码确认登陆</h4><h4 id="4-后端-回调-获取凭证-生成JWT令牌重定向到前台首页"><a href="#4-后端-回调-获取凭证-生成JWT令牌重定向到前台首页" class="headerlink" title="4.后端 回调 获取凭证 生成JWT令牌重定向到前台首页"></a>4.后端 回调 获取凭证 生成JWT令牌重定向到前台首页</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 扫描二维码进行回调 * @param code * @param state * @return */</span><span class="token comment" spellcheck="true">//扫描二维码进行回调的方法</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"callback"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">callback</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> String state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 获取扫描之后票据  code</span>    <span class="token comment" spellcheck="true">//2 使用返回票据请求地址获取 凭证（为了获取微信扫描人的信息）</span>    <span class="token comment" spellcheck="true">//向认证服务器发送请求换取access_token</span>    String baseAccessTokenUrl <span class="token operator">=</span> <span class="token string">"https://api.weixin.qq.com/sns/oauth2/access_token"</span> <span class="token operator">+</span>            <span class="token string">"?appid=%s"</span> <span class="token operator">+</span>            <span class="token string">"&amp;secret=%s"</span> <span class="token operator">+</span>            <span class="token string">"&amp;code=%s"</span> <span class="token operator">+</span>            <span class="token string">"&amp;grant_type=authorization_code"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拼接出来请求地址</span>    String accessTokenUrl <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>baseAccessTokenUrl<span class="token punctuation">,</span>           <span class="token string">"你的微信开放平台 appid"</span><span class="token punctuation">,</span>            <span class="token string">"你的微信开放平台 secret"</span><span class="token punctuation">,</span>            code    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送httpclient请求地址，获取凭证</span>    String result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>accessTokenUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//把返回result使用Gson进行json数据转换</span>    Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap map <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过转换之后map集合，根据map里面的key获取value值</span>    String access_token <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String openid <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据openid判断数据库表是否已经存在当前扫描微信用户</span>    UcenterMember member <span class="token operator">=</span> memberService<span class="token punctuation">.</span><span class="token function">existWxUser</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//底层是一个条件查询</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>member <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//表没有扫描微信数据，获取用户信息，添加到数据库里面</span>        <span class="token comment" spellcheck="true">//根据凭证和微信id 获取扫描人的信息（用户名称，头像等）</span>        <span class="token comment" spellcheck="true">//拼接获取微信用户信息的地址</span>        String baseUserInfoUrl <span class="token operator">=</span> <span class="token string">"https://api.weixin.qq.com/sns/userinfo"</span> <span class="token operator">+</span>                <span class="token string">"?access_token=%s"</span> <span class="token operator">+</span>                <span class="token string">"&amp;openid=%s"</span><span class="token punctuation">;</span>        String userInfoUrl <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>baseUserInfoUrl<span class="token punctuation">,</span>access_token<span class="token punctuation">,</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送httpclient请求</span>        String userInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            userInfo <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userInfoUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//转换json</span>        HashMap userInfoMap <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String nickname <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>userInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//微信昵称</span>        String headimgurl <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>userInfoMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"headimgurl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//微信头像</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nickname: "</span><span class="token operator">+</span>nickname<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"headimgurl: "</span><span class="token operator">+</span>headimgurl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把微信信息添加到数据库里面</span>        UcenterMember ucenterMember <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UcenterMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ucenterMember<span class="token punctuation">.</span><span class="token function">setOpenid</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span><span class="token punctuation">;</span>        ucenterMember<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span>nickname<span class="token punctuation">)</span><span class="token punctuation">;</span>        ucenterMember<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>headimgurl<span class="token punctuation">)</span><span class="token punctuation">;</span>        memberService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据member对象生成jwt令牌</span>    String token <span class="token operator">=</span> JwtUtils<span class="token punctuation">.</span><span class="token function">genJsonWebToken</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重定向到前台页面中</span>    <span class="token keyword">return</span> <span class="token string">"redirect:http://localhost:3000?token="</span><span class="token operator">+</span>token<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-前台首页在加载前调用后台获取用户登录信息进行昵称显示"><a href="#5-前台首页在加载前调用后台获取用户登录信息进行昵称显示" class="headerlink" title="5.前台首页在加载前调用后台获取用户登录信息进行昵称显示"></a>5.前台首页在加载前调用后台获取用户登录信息进行昵称显示</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 根据token获取用户信息 * @param token * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getUserInfoToken/{token}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> R <span class="token function">getUserInfoToken</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String token<span class="token punctuation">)</span><span class="token punctuation">{</span>    Claims claims <span class="token operator">=</span> JwtUtils<span class="token punctuation">.</span><span class="token function">checkJwt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    String id <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String nickname <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String avatar <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UcenterMember member <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UcenterMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    member<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    member<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span>nickname<span class="token punctuation">)</span><span class="token punctuation">;</span>    member<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span>avatar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-前台显示"><a href="#6-前台显示" class="headerlink" title="6.前台显示"></a>6.前台显示</h4><hr><h3 id="附上JWT工具类"><a href="#附上JWT工具类" class="headerlink" title="附上JWT工具类"></a>附上JWT工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需要&lt;!-- jwt --></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>jsonwebtoken<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jjwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.9</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String APPSECRET <span class="token operator">=</span> <span class="token string">"要使用的密钥"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成jwt令牌的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">genJsonWebToken</span><span class="token punctuation">(</span>UcenterMember member<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>member <span class="token operator">==</span> null            <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        String token <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"guli"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> APPSECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据jwt令牌获取里面用户信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">checkJwt</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>APPSECRET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="附上微信客户端工具类"><a href="#附上微信客户端工具类" class="headerlink" title="附上微信客户端工具类"></a>附上微信客户端工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  依赖的jar包有：commons-lang-2.6.jar、httpclient-4.3.2.jar、httpcore-4.3.1.jar、commons-io-2.4.jar * @author zhaoyb * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> connTimeout<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> readTimeout<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> HttpClient client <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        PoolingHttpClientConnectionManager cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cm<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cm<span class="token punctuation">.</span><span class="token function">setDefaultMaxPerRoute</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">postParameters</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String parameterStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span> SocketTimeoutException<span class="token punctuation">,</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>parameterStr<span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>charset<span class="token punctuation">,</span>connTimeout<span class="token punctuation">,</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">postParameters</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String parameterStr<span class="token punctuation">,</span>String charset<span class="token punctuation">,</span> Integer connTimeout<span class="token punctuation">,</span> Integer readTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span> SocketTimeoutException<span class="token punctuation">,</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>parameterStr<span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>charset<span class="token punctuation">,</span>connTimeout<span class="token punctuation">,</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">postParameters</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params<span class="token punctuation">)</span> <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span>            SocketTimeoutException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">postForm</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> null<span class="token punctuation">,</span> connTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">postParameters</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params<span class="token punctuation">,</span> Integer connTimeout<span class="token punctuation">,</span>Integer readTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span>            SocketTimeoutException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">postForm</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> null<span class="token punctuation">,</span> connTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">get</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">get</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String charset<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> connTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发送一个 Post 请求, 使用指定的字符集编码.     *     * @param url     * @param body RequestBody     * @param mimeType 例如 application/xml "application/x-www-form-urlencoded" a=1&amp;b=2&amp;c=3     * @param charset 编码     * @param connTimeout 建立链接超时时间,毫秒.     * @param readTimeout 响应超时时间,毫秒.     * @return ResponseBody, 使用指定的字符集编码.     * @throws ConnectTimeoutException 建立链接超时异常     * @throws SocketTimeoutException  响应超时     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">post</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String body<span class="token punctuation">,</span> String mimeType<span class="token punctuation">,</span>String charset<span class="token punctuation">,</span> Integer connTimeout<span class="token punctuation">,</span> Integer readTimeout<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span> SocketTimeoutException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>        HttpClient client <span class="token operator">=</span> null<span class="token punctuation">;</span>        HttpPost post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HttpEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> ContentType<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                post<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            Builder customReqConf <span class="token operator">=</span> RequestConfig<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connTimeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customReqConf<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>connTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readTimeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customReqConf<span class="token punctuation">.</span><span class="token function">setSocketTimeout</span><span class="token punctuation">(</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            post<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>customReqConf<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpResponse res<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 Https 请求.</span>                client <span class="token operator">=</span> <span class="token function">createSSLInsecureClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 Http 请求.</span>                client <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span>client<span class="token punctuation">;</span>                res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> IOUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            post<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> client <span class="token operator">!=</span> null<span class="token operator">&amp;&amp;</span> client <span class="token keyword">instanceof</span> <span class="token class-name">CloseableHttpClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>CloseableHttpClient<span class="token punctuation">)</span> client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     *      *     * @param url     * @param params     * @param connTimeout     * @param readTimeout     * @return     * @throws ConnectTimeoutException     * @throws SocketTimeoutException     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">postForm</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers<span class="token punctuation">,</span> Integer connTimeout<span class="token punctuation">,</span>Integer readTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span>            SocketTimeoutException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>        HttpClient client <span class="token operator">=</span> null<span class="token punctuation">;</span>        HttpPost post <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span> formParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> entrySet <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    formParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                UrlEncodedFormEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>formParams<span class="token punctuation">,</span> Consts<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                post<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>headers <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> headers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    post<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            Builder customReqConf <span class="token operator">=</span> RequestConfig<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connTimeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customReqConf<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>connTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readTimeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customReqConf<span class="token punctuation">.</span><span class="token function">setSocketTimeout</span><span class="token punctuation">(</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            post<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>customReqConf<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpResponse res <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 Https 请求.</span>                client <span class="token operator">=</span> <span class="token function">createSSLInsecureClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 Http 请求.</span>                client <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span>client<span class="token punctuation">;</span>                res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> IOUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            post<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> client <span class="token operator">!=</span> null                    <span class="token operator">&amp;&amp;</span> client <span class="token keyword">instanceof</span> <span class="token class-name">CloseableHttpClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>CloseableHttpClient<span class="token punctuation">)</span> client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​<br>​    </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 发送一个 GET 请求     *     * @param url     * @param charset     * @param connTimeout  建立链接超时时间,毫秒.     * @param readTimeout  响应超时时间,毫秒.     * @return     * @throws ConnectTimeoutException   建立链接超时     * @throws SocketTimeoutException   响应超时     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">get</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String charset<span class="token punctuation">,</span> Integer connTimeout<span class="token punctuation">,</span>Integer readTimeout<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ConnectTimeoutException<span class="token punctuation">,</span>SocketTimeoutException<span class="token punctuation">,</span> Exception <span class="token punctuation">{</span>        HttpClient client <span class="token operator">=</span> null<span class="token punctuation">;</span>        HttpGet get <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            Builder customReqConf <span class="token operator">=</span> RequestConfig<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connTimeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customReqConf<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>connTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readTimeout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customReqConf<span class="token punctuation">.</span><span class="token function">setSocketTimeout</span><span class="token punctuation">(</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            get<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>customReqConf<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpResponse res <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 Https 请求.</span>                client <span class="token operator">=</span> <span class="token function">createSSLInsecureClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 Http 请求.</span>                client <span class="token operator">=</span> HttpClientUtils<span class="token punctuation">.</span>client<span class="token punctuation">;</span>                res <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> IOUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            get<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> client <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> client <span class="token keyword">instanceof</span> <span class="token class-name">CloseableHttpClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>CloseableHttpClient<span class="token punctuation">)</span> client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 从 response 里获取 charset     *     * @param ressponse     * @return     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCharsetFromResponse</span><span class="token punctuation">(</span>HttpResponse ressponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Content-Type:text/html; charset=GBK</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ressponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null  <span class="token operator">&amp;&amp;</span> ressponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ressponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String contentType <span class="token operator">=</span> ressponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"charset="</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> contentType<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"charset="</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​    </p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 创建 SSL连接     * @return     * @throws GeneralSecurityException     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CloseableHttpClient <span class="token function">createSSLInsecureClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> GeneralSecurityException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SSLContext sslContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLContextBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadTrustMaterial</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTrusted</span><span class="token punctuation">(</span>X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain<span class="token punctuation">,</span>String authType<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SSLConnectionSocketFactory sslsf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLConnectionSocketFactory</span><span class="token punctuation">(</span>sslContext<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">X509HostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span>String arg0<span class="token punctuation">,</span> SSLSession arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> SSLSocket ssl<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> X509Certificate cert<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> SSLException <span class="token punctuation">{</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> cns<span class="token punctuation">,</span>                                   String<span class="token punctuation">[</span><span class="token punctuation">]</span> subjectAlts<span class="token punctuation">)</span> <span class="token keyword">throws</span> SSLException <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSSLSocketFactory</span><span class="token punctuation">(</span>sslsf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GeneralSecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>springboot上传文件出现大小限制</title>
      <link href="2020/03/04/springboot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/"/>
      <url>2020/03/04/springboot%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%87%BA%E7%8E%B0%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="在application-properties中添加如下配置即可"><a href="#在application-properties中添加如下配置即可" class="headerlink" title="在application.properties中添加如下配置即可"></a>在application.properties中添加如下配置即可</h3><pre class="line-numbers language-yml"><code class="language-yml"># 设置上传文件限制大小# 单个文件最大 1gspring.servlet.multipart.max-file-size=1024MB# 最大总上传量 1gspring.servlet.multipart.max-request-size=1024MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> 经验&amp;bug </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SpringCloud 注册中心:Eureka</title>
      <link href="2020/03/04/SpringCloud%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka/"/>
      <url>2020/03/04/SpringCloud%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka/</url>
      <content type="html"><![CDATA[<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h2><h4 id="1-服务中心注册"><a href="#1-服务中心注册" class="headerlink" title="1. 服务中心注册"></a>1. 服务中心注册</h4><h5 id="1-1-服务端导入依赖"><a href="#1-1-服务端导入依赖" class="headerlink" title="1.1 服务端导入依赖"></a>1.1 服务端导入依赖</h5><pre><code>&lt;!-- 注册服务 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><h5 id="1-2-服务中心配置application-properties"><a href="#1-2-服务中心配置application-properties" class="headerlink" title="1.2 服务中心配置application.properties"></a>1.2 服务中心配置application.properties</h5><pre><code># 服务端口server.port=9002# 是否将自己注册到Eureka中，本身是服务器无需注册eureka.client.register-with-eureka=false# 是否从Eureka中获取注册信息eureka.client.fetch-registry=false# Eureka客户端与Eureka服务器进行通信的地址eureka.client.service-url.defaultZone=http://127.0.0.1:${server.port}/eureka/</code></pre><h5 id="1-3-服务中心启动类添加注解-EnableEurekaServer"><a href="#1-3-服务中心启动类添加注解-EnableEurekaServer" class="headerlink" title="1.3 服务中心启动类添加注解 @EnableEurekaServer"></a>1.3 服务中心启动类添加注解 @EnableEurekaServer</h5><pre><code>@SpringBootApplication@EnableEurekaServerpublic class EurekaServerApplication {    public static void main(String[] args) {        SpringApplication.run(EurekaServerApplication.class, args);    }}</code></pre><h4 id="2-客户端注册"><a href="#2-客户端注册" class="headerlink" title="2. 客户端注册"></a>2. 客户端注册</h4><h5 id="2-1-客户端导入依赖"><a href="#2-1-客户端导入依赖" class="headerlink" title="2.1 客户端导入依赖"></a>2.1 客户端导入依赖</h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 注册客户端 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-客户端配置application-properties"><a href="#2-2-客户端配置application-properties" class="headerlink" title="2.2 客户端配置application.properties"></a>2.2 客户端配置application.properties</h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 指定注册中心地址</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://127.0.0.1:9002/eureka/</span><span class="token comment" spellcheck="true"># eureka上传获取的是服务器id地址 否则是主机名</span><span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-客户端启动类添加注解-EnableEurekaClient"><a href="#2-3-客户端启动类添加注解-EnableEurekaClient" class="headerlink" title="2.3 客户端启动类添加注解 @EnableEurekaClient"></a>2.3 客户端启动类添加注解 @EnableEurekaClient</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduossApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EduossApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-服务发现："><a href="#2-服务发现：" class="headerlink" title="2. 服务发现："></a>2. 服务发现：</h2><p>前往注册中心路径查看服务是否加载</p><h2 id="3-服务调用："><a href="#3-服务调用：" class="headerlink" title="3. 服务调用："></a>3. 服务调用：</h2><h4 id="3-1-在要使用服务调用的客户端中添加依赖"><a href="#3-1-在要使用服务调用的客户端中添加依赖" class="headerlink" title="3.1 在要使用服务调用的客户端中添加依赖"></a>3.1 在要使用服务调用的客户端中添加依赖</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 服务调用 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-在要使用服务调用的客户端的启动类上标-EnableFeignClients"><a href="#3-2-在要使用服务调用的客户端的启动类上标-EnableFeignClients" class="headerlink" title="3.2 在要使用服务调用的客户端的启动类上标@EnableFeignClients"></a>3.2 在要使用服务调用的客户端的启动类上标@EnableFeignClients</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment" spellcheck="true">//这是一个客户端</span><span class="token annotation punctuation">@EnableFeignClients</span>    <span class="token comment" spellcheck="true">//允许加载服务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduServiceApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EduServiceApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-创建接口"><a href="#3-3-创建接口" class="headerlink" title="3.3 创建接口"></a>3.3 创建接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"eduvideo"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//要调用的服务端</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义调用方法的路径  必须使用@PathVariable指定参数名称</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/eduvideo/deleteAliyunVideoById/{videoId}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">deleteAliyunVideoById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"videoId"</span><span class="token punctuation">)</span> String videoId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-在类注入中刚才创建的接口"><a href="#3-4-在类注入中刚才创建的接口" class="headerlink" title="3.4 在类注入中刚才创建的接口"></a>3.4 在类注入中刚才创建的接口</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduVideoServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>EduVideoMapper<span class="token punctuation">,</span> EduVideo<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">EduVideoService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注入client</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> VideoClient videoClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeById</span><span class="token punctuation">(</span>String eduvideo<span class="token punctuation">)</span><span class="token punctuation">{</span>         videoClient<span class="token punctuation">.</span><span class="token function">deleteAliyunVideoById</span><span class="token punctuation">(</span>eduvideo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于element 文件上传出现跨域问题</title>
      <link href="2020/03/03/%E5%85%B3%E4%BA%8Eelement%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/03/%E5%85%B3%E4%BA%8Eelement%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>控制台报错：</p><pre><code>Access to XMLHttpRequest at 'http://localhost:9001/eduvideo/uploadAliyunVideo' from origin 'http://localhost:9528' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.Failed to load resource: net::ERR_FAILED</code></pre><h3 id="问题排查："><a href="#问题排查：" class="headerlink" title="问题排查："></a>问题排查：</h3><h3 id="1-检查后端代码："><a href="#1-检查后端代码：" class="headerlink" title="1.检查后端代码："></a>1.检查后端代码：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以发现已标注跨域注解@CrossOrigin</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/eduvideo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    VideoService videoService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上传视频到阿里云</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"uploadAliyunVideo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> R <span class="token function">uploadAliyunVideo</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>        String videoId <span class="token operator">=</span> videoService<span class="token punctuation">.</span><span class="token function">uploadAliyunVideo</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">,</span>videoId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用swagger文档测试结果正常，那么问题一定在前台"><a href="#2-使用swagger文档测试结果正常，那么问题一定在前台" class="headerlink" title="2.使用swagger文档测试结果正常，那么问题一定在前台"></a>2.使用swagger文档测试结果正常，那么问题一定在前台</h3><h3 id="3-检查前台代码"><a href="#3-检查前台代码" class="headerlink" title="3.检查前台代码"></a>3.检查前台代码</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传视频<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-upload</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload-demo<span class="token punctuation">"</span></span>  <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://localhost:9001/eduvideo/uploadAliyunVideo<span class="token punctuation">'</span></span>  <span class="token attr-name">:on-success</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleVodUploadSuccess<span class="token punctuation">"</span></span>   <span class="token attr-name">:on-exceed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleUploadExceed<span class="token punctuation">"</span></span>  <span class="token attr-name">:file-list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传视频<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>最大支持1G，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>支持3GP、ASF、AVI、DAT、DV、FLV、F4V、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>GIF、M2T、M4V、MJ2、MJPEG、MKV、MOV、MP4、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>MPE、MPG、MPEG、MTS、OGG、QT、RM、RMVB、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>SWF、TS、VOB、WMV、WEBM 等视频格式上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-question<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-upload</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1"><a href="#3-1" class="headerlink" title="*3.1"></a>*3.1</h4><pre><code>首先该段代码复制于element官方文档只修改了action属性应该不会是代码本身的问题那么只能是人为写错路径造成的吗？但为什么不是404？</code></pre><h4 id="3-2"><a href="#3-2" class="headerlink" title="*3.2"></a>*3.2</h4><pre><code>通过百度、谷歌搜索国内外论坛相关问题，基本上所有的回答都牛头不对马嘴。在国外某论坛看到一个猜想：        会不会是element本身禁止跨域请求？</code></pre><h4 id="3-3-通过文档定义到配置文件-修改代理配置项"><a href="#3-3-通过文档定义到配置文件-修改代理配置项" class="headerlink" title="*3.3 通过文档定义到配置文件 修改代理配置项"></a>*3.3 通过文档定义到配置文件 修改代理配置项</h4><p>入口：config ====&gt; index.js</p><pre class="line-numbers language-html"><code class="language-html">    //target 对应要代理的路径 proxyTable: {  '/api': {    target: 'http://localhost:9001/eduvideo/uploadAliyunVideo',    changeOrigin: true,    pathRewrite: {      '^/api': ''    }  },},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-修改接口调用-固定写法"><a href="#3-4-修改接口调用-固定写法" class="headerlink" title="*3.4 修改接口调用 固定写法"></a>*3.4 修改接口调用 固定写法</h4><pre><code> action='/api'</code></pre><h4 id="3-5-重启前端项目-进行测试"><a href="#3-5-重启前端项目-进行测试" class="headerlink" title="*3.5 重启前端项目 进行测试"></a>*3.5 重启前端项目 进行测试</h4><pre><code>//之前的跨域报错消失了//出现了一个新的报错element-ui.common.js:25924 POST http://localhost:9528/api 413 (Request Entity Too Large)</code></pre><h4 id="3-6-报错定位为服务器端问题"><a href="#3-6-报错定位为服务器端问题" class="headerlink" title="*3.6 报错定位为服务器端问题"></a>*3.6 报错定位为服务器端问题</h4><h3 id="413报错原因："><a href="#413报错原因：" class="headerlink" title="413报错原因："></a>413报错原因：</h3><pre><code>由于是多模块项目使用nginx进行了代理而nginx文件上传默认最大值为1024*1024字节 也就是1MB</code></pre><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><pre><code>修改nginx配置文件 在 http 内添加    http {        ...        client_max_body_size 1024m;        ...    }</code></pre><h3 id="至此问题解决！"><a href="#至此问题解决！" class="headerlink" title="至此问题解决！"></a>至此问题解决！</h3><p>​         </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mybatis逆向工程使用方法</title>
      <link href="2020/02/21/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2020/02/21/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1-pom导入mybatis代码构造器坐标依赖"><a href="#1-pom导入mybatis代码构造器坐标依赖" class="headerlink" title="1.pom导入mybatis代码构造器坐标依赖"></a>1.pom导入mybatis代码构造器坐标依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建xml配置文件"><a href="#2-创建xml配置文件" class="headerlink" title="2.创建xml配置文件"></a>2.创建xml配置文件</h3><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token doctype">&lt;!DOCTYPE generatorConfiguration PUBLIC    "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"    "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>       &lt;context id= "testTables" targetRuntime= "MyBatis3" >       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --></span>       &lt;property name= "suppressAllComments" value= "true" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --></span>    &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver"       connectionURL= "jdbc:mysql://localhost:3306/xxx"       userId= "username"       password= "password" >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 生成POJO类的位置       targetPackage:包名       targetProject：路径名--></span>       &lt;javaModelGenerator targetPackage= "com.xxx.xxx.bean"       targetProject= "src\main\java" >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mapper映射文件生成的位置 --></span>    &lt;sqlMapGenerator targetPackage= "mapper"        targetProject= "src\main\resources" >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mapper接口生成的位置 --></span>    &lt;javaClientGenerator type= "XMLMAPPER"        targetPackage= "com.xxx.xxx.dao"        targetProject= "src\main\java" >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 要逆向的每一张表            domainObjectName:指定类名         --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabler<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UmsMember<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用代码生成器"><a href="#3-使用代码生成器" class="headerlink" title="3.使用代码生成器"></a>3.使用代码生成器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>api<span class="token punctuation">.</span>MyBatisGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>ConfigurationParser<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>DefaultShellCallback<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMBG</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//指定配置文件的全路径类名 注意不能有空格</span>        File configFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\xxx\\testMBG\\src\\main\\resources\\mbg.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurationParser cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        Configuration config <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultShellCallback callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyBatisGenerator myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>        myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>尚硅谷在线教育项目技术总结</title>
      <link href="2020/02/20/%E4%BD%BF%E7%94%A8SpringBoot%20+%20Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
      <url>2020/02/20/%E4%BD%BF%E7%94%A8SpringBoot%20+%20Vue%20%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<hr><p><strong>使用SpringBoot + Vue 前后端分离式开发</strong></p><h2 id="前端部分："><a href="#前端部分：" class="headerlink" title="前端部分："></a>前端部分：</h2><h3 id="1-前端使用vscode-安装nodejs-使用npm进行项目管理"><a href="#1-前端使用vscode-安装nodejs-使用npm进行项目管理" class="headerlink" title="1.前端使用vscode 安装nodejs 使用npm进行项目管理"></a>1.前端使用vscode 安装nodejs 使用npm进行项目管理</h3><pre class="line-numbers language-shell"><code class="language-shell">    nmp常用命令：        全局安装组件 ：nmp install -g xxx        更新依赖 ： nmp install (一般在导入时使用)        运行项目 : nmp run dev (dev表示开发环境）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-安装Vue、Element"><a href="#2-安装Vue、Element" class="headerlink" title="2.安装Vue、Element"></a>2.安装Vue、Element</h3><p>使用id选择器以及插值表达式对div内容进行渲染：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>var app = new Vue({    el: '# app',    data: {    message: 'Hello Vue!'    }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vue常用语法："><a href="#vue常用语法：" class="headerlink" title="vue常用语法："></a>vue常用语法：</h4><p><strong>插入文本<br></strong><br>插值表达式：  {{ }}<br><br>    <span>Message: {{ msg }}</span>    </p><p><strong>插入html文本</strong>：      v-html=”rawHtml”<br>    <span v-html="rawHtml"></span></p><h4 id="vue常用指令："><a href="#vue常用指令：" class="headerlink" title="vue常用指令："></a>vue常用指令：</h4><p><strong>条件判断</strong> ： v-if<br>     //当seen为true时 text才会显示<br>    </p><p v-if="seen">text</p><p></p><p>对应的还有： v-else<br>     //当seen为false时 text才会显示<br>    </p><p v-else="seen">text</p><p></p><p><strong>HTML属性取值</strong>：  v-bind:id=”dynamicId” 缩写为 :id<br>    //这里的id是某一个元素的id属性<br>    </p><div v-bind:id="dynamicId"></div><br>        //缩写<br>    <div :id="dynamicId"></div><p></p><p><strong>双向数据绑定</strong>： v-model=””<br>    //当原始数据或者input里的值某一个发生变化另一个随之改变<br>    <input v-model="message"></p><p><strong>绑定事件</strong> ： v-on:click=”doSomething” 缩写为 @:click<br>    <a v-on:click="doSomething"><br>    //缩写<br>     &lt;a @click=”doSomething”&gt;</a></p><p><strong>循环</strong>： v-for=”变量 in 数据”</p><pre><code>&lt;!--循环遍历--&gt;&lt;ul&gt;  &lt;template v-for="site in sites"&gt;    &lt;li&gt;{{ site.name }}&lt;/li&gt;  &lt;/template&gt;&lt;/ul&gt;</code></pre><h4 id="路由绑定"><a href="#路由绑定" class="headerlink" title="路由绑定:"></a>路由绑定:</h4><pre><code>{    path: '/teacher',    component: Layout,    redirect: '/teacher/list',    name: '讲师管理',    meta: { title: '讲师管理', icon: 'example' },    children: [      {        path: 'list',        name: '讲师列表',        component: () =&gt; import('@/views/edu/teacher/list'),        meta: { title: '讲师列表', icon: 'table' }      },      {        path: 'edit/:id', //传递id        name: '修改讲师',        component: () =&gt; import('@/views/edu/teacher/add'),        meta: { title: '修改讲师', icon: 'tree' },        hidden: true //隐藏该路由      }    ]  },</code></pre><h4 id="监听路由"><a href="#监听路由" class="headerlink" title="监听路由:"></a>监听路由:</h4><pre><code> watch:{ //监听路由        $route(to,from){            console.log('watch $route')            this.init()//一般用于页面初始化清空参数        }    },</code></pre><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局:"></a>页面布局:</h2><p>每个页面都由两部分组成</p><pre><code>&lt;/template&gt;    //页面显示内容    ...&lt;/template&gt;&lt;script&gt;    //script代码    //首先引入要使用的js文件 JS是引用名 可以自定义    import JS from '@/api/edu/teacher'    export default{    data(){ //定义变量和初始值        return{            var1:"1",            var2:{}            ...        }    },    watch:{ //监听路由        $route(to,from){            console.log('watch $route')            this.xxx()        }    },    created(){//在页面渲染之前会执行该方法        this.xxx()    },    methods:{//具体的方法调用        xxx(){             JS.xxx(xxx) //调用JS中的xxx方法             .then(response=&gt;{ //请求成功执行该方法                })             .catch(()=&gt;){ //请求失败执行该方法                })            }    }&lt;/script&gt;</code></pre><h2 id="关于JS文件定义方法"><a href="#关于JS文件定义方法" class="headerlink" title="关于JS文件定义方法:"></a>关于JS文件定义方法:</h2><pre><code>//模板提供的组件 axios的封装import request from '@/utils/request'export default{     //具体方法    xxx(var1,var2,...){            return request({                //后台接口路径 携带普通参数使用 +var的方式                url: '/接口地址/'+var1,                //提交方式                method: 'post',                // 传递复杂数据（json）                data: var2                // params：serchObj               })    },       </code></pre><p>​             </p><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分:"></a>后端部分:</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><h3 id="2-创建SpringBoot项目根据需求分模块"><a href="#2-创建SpringBoot项目根据需求分模块" class="headerlink" title="2.创建SpringBoot项目根据需求分模块"></a>2.创建SpringBoot项目根据需求分模块</h3><h3 id="3-在pom-xml文件中导入并管理依赖"><a href="#3-在pom-xml文件中导入并管理依赖" class="headerlink" title="3.在pom.xml文件中导入并管理依赖"></a>3.在pom.xml文件中导入并管理依赖</h3><h3 id="4-配置application-properties"><a href="#4-配置application-properties" class="headerlink" title="4.配置application.properties"></a>4.配置application.properties</h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 服务端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8101</span><span class="token comment" spellcheck="true"># 服务名</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">xxxx</span><span class="token comment" spellcheck="true"># 环境设置：dev、test、prod</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment" spellcheck="true"># mysql数据库连接</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/database?characterEncoding=utf-8&amp;useSSL=false</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">username</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span class="token comment" spellcheck="true"># Hikari是Spring Boot 2.0之后默认整合的数据库连接池，比druid更快的数据库连接池</span><span class="token comment" spellcheck="true"># 数据源类型</span><span class="token attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token attr-value">com.zaxxer.hikari.HikariDataSource</span><span class="token comment" spellcheck="true"># 连接池名称，默认HikariPool-1</span><span class="token attr-name">spring.datasource.hikari.pool-name</span><span class="token punctuation">=</span><span class="token attr-value">GuliHikariPool</span><span class="token comment" spellcheck="true"># 最大连接数，小于等于0会被重置为默认值10；大于零小于1会被重置为minimum-idle的值</span><span class="token attr-name">spring.datasource.hikari.maximum-pool-size</span><span class="token punctuation">=</span><span class="token attr-value">12</span><span class="token comment" spellcheck="true"># 连接超时时间:毫秒，小于250毫秒，否则被重置为默认值30秒</span><span class="token attr-name">spring.datasource.hikari.connection-timeout</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token comment" spellcheck="true"># 最小空闲连接，默认值10，小于0或大于maximum-pool-size，都会重置为maximum-pool-size</span><span class="token attr-name">spring.datasource.hikari.minimum-idle</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment" spellcheck="true"># 空闲连接超时时间，默认值600000（10分钟），大于等于max-lifetime且max-lifetime>0，会被重置为0；不等于0且小于10秒，会被重置为10秒。</span><span class="token comment" spellcheck="true"># 只有空闲连接数大于最大连接数且空闲时间超过该值，才会被释放</span><span class="token attr-name">spring.datasource.hikari.idle-timeout</span><span class="token punctuation">=</span><span class="token attr-value">500000</span><span class="token comment" spellcheck="true"># 连接最大存活时间.不等于0且小于30秒，会被重置为默认值30分钟.设置应该比mysql设置的超时时间短</span><span class="token attr-name">spring.datasource.hikari.max-lifetime</span><span class="token punctuation">=</span><span class="token attr-value">540000</span><span class="token comment" spellcheck="true"># 连接测试查询</span><span class="token attr-name">spring.datasource.hikari.connection-test-query</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 1</span><span class="token comment" spellcheck="true"># mybatis日志</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span class="token comment" spellcheck="true"># json时间格式</span><span class="token attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span><span class="token attr-value">yyyy-MM-dd HH:mm:ss</span><span class="token attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span><span class="token attr-value">GMT+8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-导入velocity-模板引擎"><a href="#5-导入velocity-模板引擎" class="headerlink" title="5.导入velocity 模板引擎"></a>5.导入velocity 模板引擎</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>velocity-engine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-导入lombok-swagger"><a href="#6-导入lombok-swagger" class="headerlink" title="6.导入lombok swagger"></a>6.导入lombok swagger</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--lombok用来简化实体类：需要安装lombok插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--swagger--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-使用代码构造器生成-service层-dao层-bean层"><a href="#7-使用代码构造器生成-service层-dao层-bean层" class="headerlink" title="7.使用代码构造器生成 service层 dao层 bean层"></a>7.使用代码构造器生成 service层 dao层 bean层</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String moduleName <span class="token operator">=</span> <span class="token string">"edu"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1、创建代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Chenxinyi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成后是否打开资源管理器</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重新生成时文件是否覆盖</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//去掉Service接口的首字母I</span>        gc<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER_STR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主键策略</span>        gc<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义生成的实体类中日期类型</span>        gc<span class="token punctuation">.</span><span class="token function">setSwagger2</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启Swagger2模式</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/eduonline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//pc.setModuleName(moduleName); //模块名</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.eduonline.eduservice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5、策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span>moduleName <span class="token operator">+</span> <span class="token string">"_\\w*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置要映射的表名</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置表前缀不生成</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表字段映射到实体的命名策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lombok 模型 @Accessors(chain = true) setter链式操作</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"is_deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//逻辑删除字段名</span>        <span class="token comment" spellcheck="true">//strategy.setEntityBooleanColumnRemoveIsPrefix(true);//去掉布尔值的is_前缀</span>        <span class="token comment" spellcheck="true">//自动填充</span>        TableFill gmtCreate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill gmtModified <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TableFill<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmtModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//乐观锁列</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//restful api风格控制器</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//url中驼峰转连字符</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6、执行</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-在实体Bean类上标注-Data注解-免除写geteer-settter"><a href="#8-在实体Bean类上标注-Data注解-免除写geteer-settter" class="headerlink" title="8.在实体Bean类上标注     @Data注解 免除写geteer/settter"></a>8.在实体Bean类上标注     @Data注解 免除写geteer/settter</h3><h3 id="9-定义返回数据实体类"><a href="#9-定义返回数据实体类" class="headerlink" title="9.定义返回数据实体类"></a>9.定义返回数据实体类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>eduonline<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 在接口内部定义状态码 实现类可通过链式编程调用 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultCode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> SUCCESS<span class="token operator">=</span><span class="token number">20000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成功</span>    <span class="token keyword">int</span> ERROR<span class="token operator">=</span><span class="token number">20001</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//失败</span>    <span class="token keyword">int</span> AUTH<span class="token operator">=</span><span class="token number">30000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有权限</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>eduonline<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义具体的数据格式 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token keyword">implements</span> <span class="token class-name">ResultCode</span><span class="token punctuation">{</span><span class="token keyword">private</span> Boolean success<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作是否成功</span><span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//响应状态码</span><span class="token keyword">private</span> String message<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应消息</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//响应数据</span><span class="token keyword">private</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//操作成功 调用该方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//操作失败</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> R <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        R r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>ResultCode<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> R <span class="token function">success</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> R <span class="token function">message</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> R <span class="token function">code</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> R <span class="token function">data</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> R <span class="token function">data</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h3 id="8-编写Controller控制器"><a href="#8-编写Controller控制器" class="headerlink" title="8.编写Controller控制器"></a>8.编写Controller控制器</h3><p>别忘了@CrossOrigin注解 解决跨域问题</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span> <span class="token comment" spellcheck="true">//解决跨域</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/edu-teacher"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduTeacherController</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-特别的"><a href="#9-特别的" class="headerlink" title="9.特别的"></a>9.特别的</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询条件封装类 * 前端传入的查询数据可能会与实体类字段有出入， *我的做法是专门定义一个类用于封装前端传递的查询条件 */</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>       <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryTeacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String level<span class="token punctuation">;</span>    <span class="token keyword">private</span> String begin<span class="token punctuation">;</span>    <span class="token keyword">private</span> String end<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MySql练习题</title>
      <link href="2020/02/20/MySql%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>2020/02/20/MySql%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>–建表</p><p>–学生表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>Student<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>s_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">`</span>s_birth<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">`</span>s_sex<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–课程表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>Course<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–教师表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>Teacher<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>t_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>t_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>t_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–成绩表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>Score<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>s_score<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–插入学生表测试数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'赵雷'</span> <span class="token punctuation">,</span> <span class="token string">'1990-01-01'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'钱电'</span> <span class="token punctuation">,</span> <span class="token string">'1990-12-21'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'孙风'</span> <span class="token punctuation">,</span> <span class="token string">'1990-05-20'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'李云'</span> <span class="token punctuation">,</span> <span class="token string">'1990-08-06'</span> <span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'05'</span> <span class="token punctuation">,</span> <span class="token string">'周梅'</span> <span class="token punctuation">,</span> <span class="token string">'1991-12-01'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'06'</span> <span class="token punctuation">,</span> <span class="token string">'吴兰'</span> <span class="token punctuation">,</span> <span class="token string">'1992-03-01'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'07'</span> <span class="token punctuation">,</span> <span class="token string">'郑竹'</span> <span class="token punctuation">,</span> <span class="token string">'1989-07-01'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'08'</span> <span class="token punctuation">,</span> <span class="token string">'王菊'</span> <span class="token punctuation">,</span> <span class="token string">'1990-01-20'</span> <span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–课程表测试数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'语文'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'数学'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'英语'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>–教师表测试数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Teacher <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Teacher <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Teacher <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>–成绩表测试数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'05'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'05'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'06'</span> <span class="token punctuation">,</span> <span class="token string">'01'</span> <span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'06'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'07'</span> <span class="token punctuation">,</span> <span class="token string">'02'</span> <span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> Score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'07'</span> <span class="token punctuation">,</span> <span class="token string">'03'</span> <span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>————————————————</p><h3 id="练习题和sql语句"><a href="#练习题和sql语句" class="headerlink" title="练习题和sql语句:"></a>练习题和sql语句:</h3><p>– 1、查询”01”课程比”02”课程成绩高的学生的信息及课程分数</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">as</span> 01_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>s_score <span class="token keyword">as</span> 02_score <span class="token keyword">from</span> student   <span class="token number">a</span><span class="token punctuation">,</span>score <span class="token number">b</span><span class="token punctuation">,</span>score <span class="token number">c</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token operator">></span><span class="token number">c</span><span class="token punctuation">.</span>s_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 2、查询”01”课程比”02”课程成绩低的学生的信息及课程分数</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">as</span> 01_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>s_score <span class="token keyword">as</span> 02_score <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">or</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token boolean">NULL</span> <span class="token keyword">join</span> score <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span> <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">c</span><span class="token punctuation">.</span>s_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> student <span class="token number">b</span> <span class="token keyword">join</span> score <span class="token number">a</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name <span class="token keyword">HAVING</span> avg_score <span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>– 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- (包括有成绩的和无成绩的)</span><span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> student <span class="token number">b</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">a</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name <span class="token keyword">HAVING</span> avg_score <span class="token operator">&lt;</span><span class="token number">60</span><span class="token keyword">union</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token number">0</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> s_id <span class="token keyword">from</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_course<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_score <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>– 6、查询”李”姓老师的数量 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>t_id<span class="token punctuation">)</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">like</span> <span class="token string">'李%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 7、查询学过”张三”老师授课的同学的信息 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> t_id <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> t_id <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 8、查询没学过”张三”老师授课的同学的信息 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token number">c</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token keyword">from</span> course <span class="token number">a</span> <span class="token keyword">join</span> teacher <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>t_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>t_id <span class="token keyword">where</span> t_name <span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 9、查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token number">a</span><span class="token punctuation">,</span>score <span class="token number">b</span><span class="token punctuation">,</span>score <span class="token number">c</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id  <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 10、查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 11、查询没有学全所有课程的同学的信息 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--@wendiepei的写法</span><span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">left</span> <span class="token keyword">join</span> Score s1 <span class="token keyword">on</span> s1<span class="token punctuation">.</span>s_id<span class="token operator">=</span>s<span class="token punctuation">.</span>s_id<span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>c_id<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--@k1051785839的写法</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> student<span class="token keyword">where</span> s_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score t1  <span class="token keyword">group</span> <span class="token keyword">by</span> s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> c_id<span class="token punctuation">)</span>  <span class="token keyword">from</span> course<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 12、查询至少有一门课与学号为”01”的同学所学相同的同学的信息 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> s_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 13、查询和”01”号的同学学习的课程完全相同的其他同学的信息 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--@ouyang_1993的写法</span><span class="token keyword">SELECT</span> Student<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span> Student<span class="token keyword">WHERE</span> s_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> s_id <span class="token keyword">FROM</span> Score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true"># 下面的语句是找到'01'同学学习的课程数</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Score <span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token string">'01'</span>   <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">AND</span> s_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true"># 下面的语句是找到学过‘01’同学没学过的课程，有哪些同学。并排除他们</span> <span class="token keyword">SELECT</span> s_id <span class="token keyword">FROM</span> Score <span class="token keyword">WHERE</span> c_id <span class="token operator">IN</span><span class="token punctuation">(</span>   <span class="token comment" spellcheck="true"># 下面的语句是找到‘01’同学没学过的课程</span>   <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> c_id <span class="token keyword">FROM</span> Score   <span class="token keyword">WHERE</span> c_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true"># 下面的语句是找出‘01’同学学习的课程</span> <span class="token keyword">SELECT</span> c_id <span class="token keyword">FROM</span> Score <span class="token keyword">WHERE</span> s_id <span class="token operator">=</span> <span class="token string">'01'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 下面的条件是排除01同学</span><span class="token operator">AND</span> s_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--@k1051785839的写法</span><span class="token keyword">SELECT</span> t3<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token punctuation">(</span>  <span class="token keyword">SELECT</span>   s_id<span class="token punctuation">,</span>   group_concat<span class="token punctuation">(</span>c_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span> group1  <span class="token keyword">FROM</span>   score  <span class="token keyword">WHERE</span>   s_id <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">></span> <span class="token string">'01'</span>  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>   s_id <span class="token punctuation">)</span> t1<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span>  group_concat<span class="token punctuation">(</span>c_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span> group2 <span class="token keyword">FROM</span>  score <span class="token keyword">WHERE</span>  s_id <span class="token operator">=</span> <span class="token string">'01'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  s_id<span class="token punctuation">)</span> t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>group1 <span class="token operator">=</span> t2<span class="token punctuation">.</span>group2<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> student t3 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>s_id <span class="token operator">=</span> t3<span class="token punctuation">.</span>s_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 14、查询没学过”张三”老师讲授的任一门课程的学生姓名 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_name <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> t_id <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> t_id <span class="token keyword">from</span> teacher <span class="token keyword">where</span> t_name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>– 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">where</span> s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>  s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 16、检索”01”课程分数小于60，按分数降序排列的学生信息</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> student <span class="token number">a</span><span class="token punctuation">,</span>score <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_score <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> c_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 语文<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_score <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 数学<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_score <span class="token keyword">from</span> score <span class="token keyword">where</span> s_id<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> c_id<span class="token operator">=</span><span class="token string">'03'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 英语<span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 平均分 <span class="token keyword">from</span> score <span class="token number">a</span>  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 平均分 <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--@喝完这杯还有一箱的写法</span><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token keyword">WHEN</span> <span class="token string">'01'</span> <span class="token keyword">THEN</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">END</span> <span class="token punctuation">)</span> 语文<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token keyword">WHEN</span> <span class="token string">'02'</span> <span class="token keyword">THEN</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">END</span> <span class="token punctuation">)</span> 数学<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token keyword">WHEN</span> <span class="token string">'03'</span> <span class="token keyword">THEN</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">END</span> <span class="token punctuation">)</span> 英语<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name <span class="token keyword">FROM</span> Score <span class="token number">a</span> <span class="token keyword">JOIN</span> Student <span class="token number">b</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">5</span> <span class="token keyword">DESC</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_name<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 及格率<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">70</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 中等率<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">80</span> <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 优良率<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 优秀率<span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 19、按各科成绩进行排序，并显示排名</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- mysql没有rank函数</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> i保留排名<span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@score</span><span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank不保留排名<span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">as</span> score<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">,</span>s_score <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> s_score <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s<span class="token comment" spellcheck="true">--@k1051785839的写法</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> t1<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> t2<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> score t2 <span class="token keyword">where</span> t2<span class="token punctuation">.</span>s_score<span class="token operator">>=</span>t1<span class="token punctuation">.</span>s_score <span class="token operator">and</span> t2<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token punctuation">)</span> rank<span class="token keyword">FROM</span> score t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span><span class="token keyword">order</span> <span class="token keyword">by</span> t1<span class="token punctuation">.</span>s_score <span class="token keyword">desc</span><span class="token punctuation">)</span> t1<span class="token punctuation">)</span><span class="token keyword">union</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> t1<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> t2<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> score t2 <span class="token keyword">where</span> t2<span class="token punctuation">.</span>s_score<span class="token operator">>=</span>t1<span class="token punctuation">.</span>s_score <span class="token operator">and</span> t2<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">)</span> rank<span class="token keyword">FROM</span> score t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token keyword">order</span> <span class="token keyword">by</span> t1<span class="token punctuation">.</span>s_score <span class="token keyword">desc</span><span class="token punctuation">)</span> t2<span class="token punctuation">)</span><span class="token keyword">union</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> t1<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>t1<span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> t2<span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> score t2 <span class="token keyword">where</span> t2<span class="token punctuation">.</span>s_score<span class="token operator">>=</span>t1<span class="token punctuation">.</span>s_score <span class="token operator">and</span> t2<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'03'</span><span class="token punctuation">)</span> rank<span class="token keyword">FROM</span> score t1 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'03'</span><span class="token keyword">order</span> <span class="token keyword">by</span> t1<span class="token punctuation">.</span>s_score <span class="token keyword">desc</span><span class="token punctuation">)</span> t3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 20、查询学生的总成绩并进行排名</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> i<span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@score</span><span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>sum_score <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank<span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>sum_score <span class="token keyword">as</span> score<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_score <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_score <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 21、查询不同老师所教不同课程平均分从高到低显示 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>t_id<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>t_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> course <span class="token number">a</span><span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token keyword">left</span> <span class="token keyword">join</span> teacher <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>t_id<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>t_id<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>t_name <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_score <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>– 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>排名<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>c_id <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> 排名 <span class="token keyword">from</span> score <span class="token number">a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'01'</span>  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span>  <span class="token punctuation">)</span><span class="token number">c</span><span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>s_id<span class="token keyword">where</span> 排名 <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">3</span><span class="token keyword">UNION</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>排名<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>c_id <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@j</span>:<span class="token operator">=</span><span class="token variable">@j</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> 排名 <span class="token keyword">from</span> score <span class="token number">a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@j</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'02'</span>  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token number">c</span><span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>s_id<span class="token keyword">where</span> 排名 <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">3</span><span class="token keyword">UNION</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>排名<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>c_id <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token variable">@k</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> 排名 <span class="token keyword">from</span> score <span class="token number">a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>s <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token string">'03'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token number">c</span><span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">c</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>s_id<span class="token keyword">where</span> 排名 <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token number">f</span><span class="token punctuation">.</span>c_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">85</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>百分比<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">70</span><span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>百分比<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>百分比<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>百分比 <span class="token keyword">from</span> score <span class="token number">a</span><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">85</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">`</span><span class="token number">85</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">85</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比<span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span><span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">70</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">85</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">`</span><span class="token number">70</span><span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">70</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">85</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比<span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span><span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">60</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">70</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">`</span><span class="token number">60</span><span class="token operator">-</span><span class="token number">70</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">></span><span class="token number">60</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">70</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比<span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span><span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>c_id<span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">60</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">`</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> s_score <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> s_score <span class="token operator">&lt;=</span><span class="token number">60</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 百分比<span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">)</span><span class="token number">e</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">e</span><span class="token punctuation">.</span>c_id<span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">f</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">f</span><span class="token punctuation">.</span>c_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 24、查询学生平均成绩及其名次 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token variable">@i</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">as</span> <span class="token string">'不保留空缺排名'</span><span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token variable">@avg_score</span><span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>avg_s <span class="token keyword">then</span> <span class="token variable">@k</span> <span class="token keyword">else</span> <span class="token variable">@i</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'保留空缺排名'</span><span class="token punctuation">,</span><span class="token variable">@avg_score</span>:<span class="token operator">=</span>avg_s <span class="token keyword">as</span> <span class="token string">'平均分'</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_s <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_s <span class="token keyword">DESC</span><span class="token punctuation">)</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@avg_score</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@i</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@k</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token number">b</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 25、查询各科成绩前三名的记录</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1.选出b表比a表成绩大的所有组</span><span class="token comment" spellcheck="true">-- 2.选出比当前id成绩大的 小于三个的</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 26、查询每门课程被选修的学生数 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>s_id<span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 27、查询出只有两门课程的全部学生的学号和姓名 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span>s_name <span class="token keyword">from</span> student <span class="token keyword">where</span> s_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>– 28、查询男生、女生人数 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> s_sex<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>s_sex<span class="token punctuation">)</span> <span class="token keyword">as</span> 人数  <span class="token keyword">from</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_sex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 29、查询名字中含有”风”字的学生信息</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> s_name <span class="token operator">like</span> <span class="token string">'%风%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 30、查询同名同性学生名单，并统计同名人数 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_sex<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token number">a</span>  <span class="token keyword">JOIN</span> student <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">!=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_name <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_name <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_sex <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_sex<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 31、查询1990年出生的学生名单    </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> s_name <span class="token keyword">from</span> student <span class="token keyword">where</span> s_birth <span class="token operator">like</span> <span class="token string">'1990%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> avg_score <span class="token keyword">DESC</span><span class="token punctuation">,</span>c_id <span class="token keyword">ASC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> avg_score <span class="token keyword">from</span> score <span class="token number">a</span><span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> avg_score<span class="token operator">>=</span><span class="token number">85</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>– 34、查询课程名称为”数学”，且分数低于60的学生姓名和分数 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score <span class="token number">b</span> <span class="token keyword">join</span> student <span class="token number">a</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token keyword">where</span> c_name <span class="token operator">=</span><span class="token string">'数学'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>– 35、查询所有学生的课程及分数情况； </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token number">c</span><span class="token punctuation">.</span>c_name <span class="token keyword">when</span> <span class="token string">'语文'</span> <span class="token keyword">then</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token number">c</span><span class="token punctuation">.</span>c_name <span class="token keyword">when</span> <span class="token string">'数学'</span> <span class="token keyword">then</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token number">c</span><span class="token punctuation">.</span>c_name <span class="token keyword">when</span> <span class="token string">'英语'</span> <span class="token keyword">then</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token string">'总分'</span><span class="token keyword">from</span> student <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id <span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>c_id <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> – 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数； </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_name<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_name<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> course <span class="token number">b</span> <span class="token keyword">left</span> <span class="token keyword">join</span> score <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token keyword">left</span> <span class="token keyword">join</span> student <span class="token number">a</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>s_id <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">70</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>– 37、查询不及格的课程</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_name<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">left</span> <span class="token keyword">join</span> course <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">&lt;</span><span class="token number">60</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>–38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名； </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_name <span class="token keyword">from</span> score <span class="token number">a</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> student <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token string">'01'</span><span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token operator">></span><span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>– 39、求每门课程的学生人数 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 40、查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询老师id    </span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token number">c</span><span class="token punctuation">,</span>teacher <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>t_id <span class="token operator">and</span> <span class="token number">d</span><span class="token punctuation">.</span>t_name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token comment" spellcheck="true">-- 查询最高分（可能有相同分数）</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token comment" spellcheck="true">-- 查询信息</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>c_name <span class="token keyword">from</span> student <span class="token number">a</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> score <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> course <span class="token number">c</span> <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>c_id<span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> c_id <span class="token keyword">from</span> course <span class="token number">c</span><span class="token punctuation">,</span>teacher <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>t_id<span class="token operator">=</span><span class="token number">d</span><span class="token punctuation">.</span>t_id <span class="token operator">and</span> <span class="token number">d</span><span class="token punctuation">.</span>t_name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">MAX</span><span class="token punctuation">(</span>s_score<span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> c_id<span class="token operator">=</span><span class="token string">'02'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>– 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">DISTINCT</span> <span class="token number">b</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score <span class="token number">a</span><span class="token punctuation">,</span>score <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">!=</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id <span class="token operator">and</span> <span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 42、查询每门功成绩最好的前两名 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 牛逼的写法</span><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>s_score <span class="token keyword">from</span> score <span class="token number">a</span><span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">b</span><span class="token punctuation">.</span>c_id<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>c_id <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>s_score<span class="token operator">>=</span><span class="token number">a</span><span class="token punctuation">.</span>s_score<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>c_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> c_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c_id <span class="token keyword">HAVING</span> total<span class="token operator">></span><span class="token number">5</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total<span class="token punctuation">,</span>c_id <span class="token keyword">ASC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 44、检索至少选修两门课程的学生学号 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> s_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> sel<span class="token operator">>=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 45、查询选修了全部课程的学生信息 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> s_id <span class="token operator">in</span><span class="token punctuation">(</span>        <span class="token keyword">select</span> s_id <span class="token keyword">from</span> score <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> s_id <span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>–46、查询各学生的年龄</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一</span><span class="token keyword">select</span> s_birth<span class="token punctuation">,</span><span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y'</span><span class="token punctuation">)</span><span class="token operator">-</span>DATE_FORMAT<span class="token punctuation">(</span>s_birth<span class="token punctuation">,</span><span class="token string">'%Y'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%m%d'</span><span class="token punctuation">)</span><span class="token operator">></span>DATE_FORMAT<span class="token punctuation">(</span>s_birth<span class="token punctuation">,</span><span class="token string">'%m%d'</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> age<span class="token keyword">from</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>– 47、查询本周过生日的学生</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> WEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>WEEK<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> YEARWEEK<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span class="token operator">=</span>YEARWEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">select</span> WEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>– 48、查询下周过生日的学生</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> WEEK<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span>WEEK<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 49、查询本月过生日的学生</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> MONTH<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>MONTH<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– 50、查询下月过生日的学生</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> MONTH<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span>MONTH<span class="token punctuation">(</span>s_birth<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>